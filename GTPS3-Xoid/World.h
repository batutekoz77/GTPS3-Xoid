#pragma once
#include <chrono>
#include "enet/dirent.h"
#include <sstream>
#include <filesystem>
#include "NewPacket.h"

#define HOME_TIME (15 * 1000)
#define WORLDBAN_TIME (3600 * 1000)
#define WARP_TIME (15 * 1000)


namespace fs = std::filesystem;
using namespace chrono;
bool saving_ = false, f_saving_ = false;
long long last_connect = 0, last_connects = 0;
map<enet_uint32, uint8_t> g_maxPlayerCount;
int item1 = 0, item2 = 0, item1c = 0, item2c = 0, day_ = 0, theitemtoday = 0, punched = 0, thedaytoday = 0, today_month = -1, today_day = -1;
string active_world_list = "";
vector<int> killerID, promocode;
int login_count = 0;
vector<pair<string, int>> sortplay;
vector<pair<string, pair<int, int>>> leader;
vector<tuple<string, int, int, int>> guild_board;
long long int server_uptime = 0;
using std::filesystem::directory_iterator;
long long int last_alt_check = 0;
long long int last_uptime_check = 0, ch_time = 0, kk_time = 0, refresh_menu = 0, last_scan = 0;
vector<pair<string, long long int>> banned_ip_temporary;
vector<pair<int, string>> top_active_worlds;
vector<string> active_worlds;
long long last_world_menu = 0;
long long last_active_update = 0;
//clash event
//vector<pair<int, string>> topclash;
//long long int event_timer = 0; //604800000
//long long int last_update_clash = 0;
//string top_clash_list = "\nadd_smalltext|Clash Leaderboard is empty.|\nadd_spacer|small|";
//clash end
string news_text = "", news_texture = "";
int gem_event = 1;
bool deathmatch = false;
int ch_type = 0;
bool restart_server_status = false;
bool restart_server_status_seconds = false;
int restart_server_time = 10;
string a = "";
vector<string> ipbans, t_worlds, bots;
vector<string> sbworld = { "START" };
string lastsbworld = "";

vector<pair<string, long long int>> home_timed;

struct Position2D {
	int x, y;
};

vector<vector<string>> info_about_playmods{
	// playmod id, consumableid_time, playmod name, playmod on used, playmod on removed, display id, state, skin, how work, eff, say text after using, gravity
	{"1", "388_300", "Stinky", "You really really smell.", "The air clears.", "372", "14", "spray.wav", "", "", "", "", ""},
	{"2", "1368_2", "Frozen", "Your body has turned to ice. You can't move!", "You've thawed out.", "1368", "11", "freeze.wav", "4284769380", "", "", "", ""},
	{"3", "274_10", "Frozen", "Freeze!", "You've thawed out.", "274", "11", "freeze.wav", "4284769380", "", "", "", ""},
	{"4", "874_180", "Egged!", "You have egg on your face.", "You washed your face!", "874", "", "", "16777215", "throw", "42", "", ""},
	{"5", "3404_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"6", "3406_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"7", "4422_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"8", "386_0", "", "", "", "", "", "", "", "cutewords", "", "", ""},
	{"9", "10660_1800", "Lucky in Love: Increased chance of Golden Heart Crystal", "Increased chance of Golden Heart Crystal!", "The honeymoon phase is over!", "10660", "", "", "", "", "", ":D`#YUMMY!``", ""},
	{"10", "2206_1800", "Irradiated", "You are aglow with radiation!", "You have recovered.", "2206", "", "", "", "", "", "", ""},
	{"11", "408_600", "Duct Tape", "Duct tape has covered your mouth!", "Duct tape removed. OUCH!", "408", "", "already_used.wav", "", "", "", "", ""},
	{"12", "384_3600", "Valentine", "You are somebody's valentine!", "Yuck!", "384", "", "choir.wav", "2526478335", "", "", "", ""},
	{"13", "2480_600", "Megaphone!", "Broadcasting to ALL!", "You can broadcast once again.", "2480", "", "", "", "", "", "", ""},
	{"14", "528_1800", "Lucky", "You're luckier than before!", "Your luck has worn off.", "528", "15", "", "", "", "", "", ""},
	{"15", "1510_10", "1512", "", "", "", "", "", "", "pet", "", "Legend says that you need 10 Blarney Pebbles!", ""},
	{"16", "540_900", "Envious", "It ain't easy being you.", "Healthy color restored.", "540", "", "eat.wav", "1627349247", "", "", "", ""},
	{"17", "196_3600", "Feelin' Blue", "A `!blueberry`` slides down your throat!", "The effects of the `!blueberry`` have worn off.", "196", "", "spray.wav", "4278190335", "drop", "", "", ""},
	{"18", "338_2", "Floating!", "Whoooooooaaaaaaaa...", "Gravity - it's the law.", "338", "", "balloon.wav", "", "drop", "", "", "-30"},
	{"19", "962_180", "Saucy!", "You are a saucy person.", "You got cleaned up.", "962", "", "", "2554747", "throw", "45", "", ""},
	{"20", "950_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"21", "968_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"22", "1058_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"23", "1096_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"24", "868_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"25", "782_3600", "Antidote!", "You are now immune to zombie bites! Temporarily...", "Your immunity is gone.", "782", "", "", "", "drop", "25", "", ""},
	{"26", "4668_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"27", "128_1800", "Golden Halo!", "You have been good.", "You're falling out of favor.", "128", "7", "", "-2104114177", "drop", "25", "", ""},
	{"28", "764_60", "Infected!", "You've been infected by the g-Virus. Punch others to infect them, too! Braiiiins...", "You've been cured.", "764", "16", "", "", "drop", "", "", ""},
	{"29", "5178_1800", "Lucky", "You're luckier than before!", "Your luck has worn off.", "5178", "15", "", "", "", "", "", ""},
	{"30", "1058_50", "Dropped!", "You have 5 seconds drop cooldown.", "You are able to drop again!", "", "", "", "", "", "", "", ""},
	{"31", "1094_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"32", "276_300", "Punished!", "You have 5 minutes punish cooldown!", "You are able to punish someone again!", "", "", "", "", "", "", "", ""},
	{"33", "6922_180", "2x Gems Boost!", "You are now getting 2x gems! Temporarily..", "You are poor again.", "6922", "", "", "", "", "", "", ""},
	{"34", "2002_86400","Doctor Replusion", "Doctors won't come near you!", "You no longer repel doctors.", "2002", "", "spray.wav", "", "", "", "", ""},
	{"35", "7058_300", "Food: Purified Scythe", "Hand Scythe breaks 5% less!", "You no longer feel pure!", "7058", "15", "", "", "", "", "", ""},
	{"36", "1056_1800", "Lucky", "You're luckier than before!", "Your luck has worn off.", "1056", "15", "", "", "", "", "", ""},
	{"37", "4378_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"38", "614_300", "Stinky", "You really really smell.", "The air clears.", "614", "14", "spray.wav", "", "", "", "", ""},
	{"39", "1374_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"40", "406_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"41", "966_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"42", "4766_1800", "Blushing Red", "`4Cherry`` red lips!", "The effects of the `!Cherry`` have worn off.", "4766", "", "spray.wav", "842203135", "drop", "", "", ""},
	{"43", "958_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"44", "950_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"45", "1580_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"46", "7052_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"46", "7052_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"47", "1634_5", "Caffeinated", "You are full of caffeine!", "Ugh. Caffeine crash.", "1634", "14", "spray.wav", "", "", "", "", ""},
	{"48", "4672_900", "Envious", "It ain't easy being you.", "Healthy color restored.", "4672", "", "spray.wav", "1234743295", "", "", "", ""},
	{"49", "6314_2", "Frozen", "Your body has turned to ice. You can't move!", "You've thawed out.", "6314", "11", "freeze.wav", "4284769380", "", "", "", ""},
	{"50", "3064_0", "", "", "", "3064", "", "", "", "throw", "34", "", ""},
	{"51", "8520_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"52", "10628_0", "/dab", "", "", "", "", "", "", "consume", "", "", ""},
	{"53", "1474_1800", "Food: Extra XP", "25% chance of double XP for all actions.", "Your stomach's rumbling.", "1474", "", "spray.wav", "", "drop", "", "", ""},
	{"54", "3546_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"55", "3600_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"56", "3836_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"57", "3240_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"58", "4410_0", ":P`#Bleh.``", "", "", "", "", "", "", "consume", "", "", ""},
	{"59", "4984_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"60", "2734_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"61", "3622_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"62", "10988_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"63", "4764_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"64", "964_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"65", "3428_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"66", "4752_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"67", "3816_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"68", "3816_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"69", "126_1800", "Devil Horns", "You little devil...", "Off the naughty list!", "126", "6", "spray.wav", "", "drop", "", "", ""},
	{"70", "1964_1800", "Devil Horns", "You little devil...", "Off the naughty list!", "1964", "6", "spray.wav", "", "drop", "", "", ""},
	{"71", "960_5", "ON FIRE!!!", "You are burning up!", "The fire's out.", "960", "17", "spray.wav", "842203135", "", "", "", ""},
	{"72", "712_5", "ON FIRE!!!", "You are burning up!", "The fire's out.", "712", "17", "spray.wav", "842203135", "", "", "", ""},
	{"73", "1988_1800", "Haunted!", "You are haunted!", "Not anymore.", "372", "18", "spray.wav", "", "", "", "", ""},
	{"74", "1772_2", "Floating!", "Whoooooooaaaaaaaa...", "Gravity - it's the law.", "1772", "", "balloon.wav", "", "drop", "", "", "-30"},
	{"75", "5262_5", "Neon Gum!", "Dazzle your friends as super funky neon lines course across your skin.", "Party's over.", "5262", "28", "spray.wav", "", "drop", "", "", ""},
	{"76", "676_86400","Doctor Replusion", "Doctors won't come near you!", "You no longer repel doctors.", "676", "", "spray.wav", "", "", "", "", ""},
	{"77", "276_0", "", "", "", "", "", "", "", "cutewords", "", "", ""},
	{"78", "278_600", "Go to HELL!!", "You're on the HIGHWAY TO HELL!!", "You no longer cursed.", "278", "", "already_used.wav", "", "", "", "", "" },
	{"79", "618_0", "", "", "", "", "", "", "", "cutewords", "", "", ""},
	{"80", "616_0", "", "", "", "", "", "", "", "cutewords", "", "", ""},
	{"81", "614_0", ":P", "", "", "", "", "", "", "consume", "", "", ""},
	{"82", "750_1800", "Lucky", "You're luckier than before!", "Your luck has worn off.", "750", "15", "", "", "", "", "", ""},
	{"83", "752_0", "", "", "", "", "", "", "", "cutewords", "25", "", ""},
	{"84", "1208_0", ":D`#YUM!``", "", "", "", "", "", "", "consume", "", "", ""},
	{"85", "5114_120", "Calm Nerves", "Steady hands of a surgeon.", "Butterfingers again.", "5114", "14", "spray.wav", "", "", "", "", ""},
	{"86", "6912_1800", "Spicey Skills", "Reduce your skill fails by half in both Surgery and Startopia missions.", "Your stomach's too spicey.", "6912", "", "spray.wav", "", "", "", "", ""},
	{"87", "3536_0", "Mmm, sugar!", "", "", "", "", "", "", "consume", "", "", ""},
	{"88", "1260_3600", "Malpractice", "You are not allowed to perform surgery for a while!", "You can surg again.", "1260", "", "", "", "", "", "", ""},
	{"89", "1270_3600", "Recovering", "You are recovering from surgery.", "You healed.", "1270", "", "", "", "", "", "", ""},
	{"90", "8500_0", "", "", "", "", "", "", "", "cutewords", "", "", ""},
	{"91", "4602_300", "Stinky", "You really really smell.", "The air clears.", "4602", "14", "spray.wav", "", "", "", "", ""},
	{"92", "8544_43200", "Lupus malady", "You've been infected with lupus!", "You no longer have lupus!", "8544", "", "spray.wav", "", "", "", "", ""},
	{"93", "8540_43200", "Moldy Guts malady", "You've been infected with moldy guts!", "You no longer have moldy guts!", "8540", "", "spray.wav", "", "", "", "", ""},
	{"94", "8546_43200", "Ecto-Bones malady", "You've been infected with Ecto-Bones!", "Your bones are no longer ectoplasmic!", "8546", "", "spray.wav", "", "", "", "", ""},
	{"95", "8538_43200", "Chaos Infection malady", "You've been infected with CHAOS!", "You no longer have CHAOS!", "8538", "", "spray.wav", "", "", "", "", ""},
	{"96", "8548_43200", "Fatty Liver malady", "You've been infected with fatty liver!", "You no longer have fatty liver!", "8548", "", "spray.wav", "", "", "", "", ""},
	{"97", "8542_43200", "Brainworms malady", "You've been infected with brainworms!", "You no longer have brainworms!", "8542", "", "spray.wav", "", "", "", "", ""},
	{"98", "6908_1800", "Food: Buff Duration", "Increase the duration of food buffs by 30%", "Your stomach can't take anymore buffs!", "6908", "", "spray.wav", "", "drop", "", "", ""},
	{"99", "5452_1800", "Food: Extra XP", "10% chance of triple XP for all actions.", "Your body craves sugar!", "5452", "", "spray.wav", "", "drop", "", "", ""},
	{"100", "316900_0", "Ban Cooldown Added.", "Ban Cooldown Added.", "Ban Cooldown Removed.", "276", "", "", "", "", "", "", "" },
	{"101", "21600_0", "Curse Cooldown Added.", "Curse Cooldown Added.", "Curse Cooldown Removed.", "278", "", "", "", "", "", "", "" },
	{"102", "21600_0", "Mute Cooldown Added.", "Mute Cooldown Added.", "Mute Cooldown Removed.", "408", "", "", "", "", "", "", "" },
	{"103", "21600_0", "HardBan Cooldown Added.", "HardBan Cooldown Added.", "HardBan Cooldown Removed.", "408", "", "", "", "", "", "", "" },
	{ "104", "6910_1800", "Food: Delectable", "25% chance of double Growtokens from Daily Quests.", "Your stomach's devasted!", "6910", "", "spray.wav", "", "drop", "", "", "" },
	{ "105",  "5406_300", "Red Winterfest Crown!", "You're in the Winterfest spirit.", "Your paper crown dissolved in your forehead sweat!", "5406", "", "spray.wav", "", "", "", "", "" },
	{ "106",  "5408_300", "Green Winterfest Crown!", "You're in the Winterfest spirit.", "Your paper crown dissolved in your forehead sweat!", "5408", "", "spray.wav", "", "", "", "", ""},
	{ "107",  "5410_300", "Silver Winterfest Crown!", "You're in the Winterfest spirit.", "Your paper crown dissolved in your forehead sweat!", "5410", "", "spray.wav", "", "", "", "", ""},
	{ "108",  "5412_300", "Gold Winterfest Crown!", "You're in the Winterfest spirit.", "Your paper crown dissolved in your forehead sweat!", "5412", "", "spray.wav", "", "", "", "", ""}
};
//#include <mutex>
vector<pair<uint32_t, int>> growch_prize{
	{4292, 200000},
	{4286, 500000},
	{4288, 1000000},
	{10500, 2000000},
	{12888, 5000000},
	{12892, 10000000},
	{7962, 50000000},
};


//mutex m;
struct Portrait
{
	uint32_t c_expression = 1;
	/*
	* 1: Unconcerned
	* 2: Happy
	* 3: Sad
	* 4: Tongue Out
	* 5: Surprised
	* 6: Angry
	* 7: Talking
	* 9: Ecstatic
	* 24: Wry
	* 12: Sleeping
	* 14: Winking
	* 16: Trolling
	* 18: Vampire
	* 22: Underwater
	*
	*/
	uint32_t c_hair_colour = 0;
	uint32_t c_skin = 0;
	uint16_t c_face = 0;
	uint16_t c_head = 0;
	uint16_t c_hair = 0;
};


void s_log(ENetPeer* peer, const string s) {
	if (pInfo(peer)->adminLevel >= 6) {
		gamepacket_t p;
		p.Insert("OnConsoleMessage"), p.Insert("`p[DEV-LOG]`$ " + s), p.CreatePacket(peer);
	}
}

string to_playmod_time(int seconds) {
	int hour = seconds / 3600;
	int minute = (seconds % 3600) / 60;
	int second = seconds % 60;
	if (hour == 0 and minute == 0 and second == 0) return "Removing now ";
	return (hour > 0 ? to_string(hour) + " hours" : "") + (minute > 0 ? (hour > 0 ? ", " : "") + to_string(minute) + " mins" : "") + (second > 0 ? (minute > 0 ? ", " : "") + to_string(second) + " secs " : " ");
}
void to_json(json& j, const Portrait& p) {
	j = json{
		{"c_expression", p.c_expression},
		{"c_hair_colour", p.c_hair_colour},
		{"c_skin", p.c_skin},
		{"c_face", p.c_face},
		{"c_head", p.c_head},
		{"c_hair", p.c_hair}
	};
}


void from_json(const json& j, Portrait& p) {
	j["c_expression"].get_to(p.c_expression);
	j["c_hair_colour"].get_to(p.c_hair_colour);
	j["c_skin"].get_to(p.c_skin);
	j["c_face"].get_to(p.c_face);
	j["c_head"].get_to(p.c_head);
	j["c_hair"].get_to(p.c_hair);
}
int ancesupgradeto(ENetPeer* peer, int c) {
	switch (c) {
	case 0:
		return pInfo(peer)->ances = 0;
	case 5080:
		return 5144;
	case 5078:
		return 5126;
	case 5082:
		return 5162;
	case 5084:
		return 5180;
	case 7166:
		return 7168;
	case 5144: //checkpoint
		return 5146;
	case 5126:
		return 5128;
	case 5162:
		return 5164;
	case 5180:
		return 5182;
	case 7168:
		return 7170;
	case 5146: //checkpoint
		return 5148;
	case 5128:
		return 5130;
	case 5164:
		return 5168;
	case 5182:
		return 5184;
	case 7170:
		return 7172;
	case 5148: //checkpoint
		return 5150;
	case 5130:
		return 5132;
	case 5168:
		return 5170;
	case 5184:
		return 5186;
	case 7172:
		return 7174;
	case 5150: //checkpoint
		return 5152;
	case 5132:
		return 5134;
	case 5170:
		return 5172;
	case 5186:
		return 5188;
	case 7174:
		return 9212;
	default:
		return 0;
	}
}
struct Mannequin
{
	uint16_t c_head = 0;
	uint16_t c_shirt = 0;
	uint16_t c_pants = 0;
	uint16_t c_feet = 0;
	uint16_t c_mask = 0;
	uint16_t c_hand = 0;
	uint16_t c_back = 0;
	uint16_t c_hair = 0;
	uint16_t c_neck = 0;
};

void to_json(json& j, const Mannequin& p) {
	j = json{
		{"c_head", p.c_head},
		{"c_shirt", p.c_shirt},
		{"c_pants", p.c_pants},
		{"c_feet", p.c_feet},
		{"c_mask", p.c_mask},
		{"c_hand", p.c_hand},
		{"c_back", p.c_back},
		{"c_hair", p.c_hair},
		{"c_neck", p.c_neck}
	};
}
void from_json(const json& j, Mannequin& p) {
	j["c_head"].get_to(p.c_head);
	j["c_shirt"].get_to(p.c_shirt);
	j["c_pants"].get_to(p.c_pants);
	j["c_feet"].get_to(p.c_feet);
	j["c_mask"].get_to(p.c_mask);
	j["c_hand"].get_to(p.c_hand);
	j["c_back"].get_to(p.c_back);
	j["c_hair"].get_to(p.c_hair);
	j["c_neck"].get_to(p.c_neck);
}
struct Donate
{
	int item = 0, count = 0;
	string name = "", text = "";
};

struct Card
{
	int x = 0, y = 0, type = 0;
	bool done = false;
};

vector<Card>cards;

struct Killer
{
	int x;
	int y;
	int netid;
};

vector<Killer>locations;

struct Challenger
{
	string nick;
	int point;
};

vector<Challenger>challengers;

void to_json(json& j, const Donate& p) {
	j = json{
		{"item", p.item},
		{"count", p.count},
		{"name", p.name},
		{"text", p.text}
	};
}
void from_json(const json& j, Donate& p) {
	j["item"].get_to(p.item);
	j["count"].get_to(p.count);
	j["name"].get_to(p.name);
	j["text"].get_to(p.text);
}
struct WorldBlock
{
	uint16_t fg = 0, bg = 0;
	int fruit = 0;
	uint32_t id = 0, wl = 0;
	size_t c_ = 0;
	int pr = 0;
	long long lp = 0, planted = 0;
	int hp = -1, sp = 0;
	uint8_t roll = 0;
	string txt = "";
	string door_destination = "", door_id = "";
	bool open = true;
	int flags = 0x00000000;
	long long last_punch_weather = 0;
	bool scanned = false;
	int rate_of_fire = 10, projectile_speed = 100;
	// magplants
	bool enabled = false;
	int gravity = 50;
	bool spin = false, invert = false;
	bool magnetron = false;
	bool locked = false;
	int lock_origin = -1;
	bool open_to_public = false;
	bool empty_air = false;
	vector<string> admins{};
	string owner_name = "";
	string owner_named = "";
	bool build_only = false;
	bool limit_admins = false;
	vector<vector<int>> crystals{};
	Mannequin mannequin{};
	vector<Donate> donates{};
	int r = 255, g = 128, b = 64;
	Portrait portrait{};
	uint32_t bunny_egg_progress = 0;
	string heart_monitor = "";
	string spotlight = "";
	bool fossil = false;
	uint32_t shelf_1 = 0, shelf_2 = 0, shelf_3 = 0, shelf_4 = 0;
};
struct WorldMachines
{
	uint16_t id = 0, x = 0, y = 0, target_item = 0;
	bool enabled = false;
	long long last_ = 0;
};

struct WorldNPC
{
	uint16_t id = 0, x = 0, y = 0, rate_of_fire = 10, projectile_speed = 100;
	float kryptis = 0;
	int uid = 0;
	bool enabled = false;
	long long last_ = 0, started_moving = 0;
};
struct WorldDrop
{
	int id = 0, count = 0, uid = 0, x = 0, y = 0;
	bool special = false;
};
struct WorldSBOX1
{
	int id = 0, count = 0, x = 0, y = 0;
};
struct WorldGrowscan
{
	int x = 0, y = 0;
	bool world_public = false, floating_public = false;
};
struct WorldBulletinSettings
{
	int x = 0, y = 0;
	bool public_can_add = false, hide_names = false;
};

struct WorldCCTVSettings
{
	int x = 0, y = 0;
	bool show_item_taking = false, show_item_dropping = false, show_people_entering = true, show_people_exiting = false, dont_show_owner = false, dont_show_admins = false, dont_show_noaccess = false;
};

struct WorldCCTV
{
	int x = 0, y = 0;
	string logs;
};

struct WorldBulletin
{
	int x = 0, y = 0;
	string name = "", text = "";
};
struct GlobalMonitors
{
	string world_name = "";
	int x = -1, y = -1;
	uint32_t active = 0;
};
vector<GlobalMonitors> monitors;
struct World
{
	int honors = 0;
	string name = "", owner_name = "", owner_named = "";
	pair<int, int> s4tb{ 0, 0 };
	bool nuked = false;
	bool fresh_world = false;
	string n_t = "";
	string n_b = "";
	vector<string> admins{};
	vector<WorldBlock> blocks{};
	vector<vector<int>> drop_new;
	vector<WorldDrop> drop{};
	vector<WorldGrowscan> gscan{};
	vector<WorldCCTVSettings> cctv_settings{};
	vector<WorldCCTV> cctv{};
	vector<WorldSBOX1> sbox1{};
	vector<WorldBulletin> bulletin{};
	bool savealiyo = false;
	vector<WorldBulletinSettings> bulletins{};
	uint16_t weather = 56;
	uint16_t d_weather = 0;
	bool v_p = false;
	bool open_to_public = false, disable_music_blocks = false, make_music_blocks_invisible = false;
	vector<pair<string, long long int>> bannedPlayers{};
	vector<vector<unsigned int>> wlc;
	long long last_address_change = 0;
	bool zombie_jammer = false;
	uint32_t music_bpm = 100;
	int entry_level = 1;
	int total_drop_uid = 0;
	vector<int> active_jammers{};
	vector<WorldNPC> npc{};
	vector<WorldMachines> machines{};
	int guild_id = 0;
	long long int save_time = 0;
	int lockid = 0;
	bool rainbows = false, silence = false;

	long long last_special_event = 0, last_comet_spawn = 0;
	int special_event_item = 0;
	int special_event_item_taken = 0;
	bool special_event = false;
};
vector<World> worlds;
map<string, vector<WorldNPC>> active_npc;
map<string, vector<WorldMachines>> active_machines;

int get_free_slots(Player* p_) {
	int free = 0; // -1
	for (int i_ = 0; i_ < p_->inv.size(); i_++) {
		if (p_->inv[i_].id == 0 and p_->inv[i_].count == 0)
			free++;
	}
	return free;
}

void SendParticleEffect(ENetPeer* peer, int x, int y, int size, int id, int delay)
{
	PlayerMoving datx{};
	datx.packetType = 0x11;
	datx.x = x;
	datx.y = y;
	datx.YSpeed = id;
	datx.XSpeed = size;
	datx.plantingTree = delay;
	BYTE* raw = packPlayerMoving(&datx);
	send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
	delete[]raw;
}

void deleteWorld(string wname) {
	for (auto it = worlds.begin(); it != worlds.end(); ) {
		if (it->name == wname) {
			worlds.erase(it);
		}
		else {
			++it;
		}
	}
}


void punch_tile(ENetPeer* peer, int x, int y, int t_, int n_, int net_, int state_, bool tree_ = false, int count_ = 1, bool every_ = true) {
	PlayerMoving data{ net_, 0, t_, state_, n_, x, y, 0, (float)x, (float)y, 0, 0 };
	BYTE* p_ = packPlayerMoving(&data);
	p_[2] = 0, p_[3] = tree_ ? count_ : 0;
	int32_t item = pInfo(peer)->hand;
	memcpy(p_ + 8, &item, 4);
	if (every_) {
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
			send_raw(currentPeer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	else {
		send_raw(peer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
	}
	delete[]p_;
}

void update_tile(ENetPeer* peer, int16_t x, int16_t y, int16_t n_, bool add, bool everyone) {
	//if (add) growganoth_platform.push_back(x + (y * 100));
	PlayerMoving data{ 0, 0, 3, 0, n_, x, y, 0, (float)x, (float)y, 0, 0 };
	BYTE* p_ = packPlayerMoving(&data);

	if (everyone) {
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
			send_raw(currentPeer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	else send_raw(peer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
	send_raw(peer, 4, p_, 56, ENET_PACKET_FLAG_RELIABLE);
	delete[]p_;
}

World create_world(const string& name_, int s_) {
	World world_;
	world_.name = name_;
	int d_ = rand() % (s_ / (s_ / 100) - 4) + 2;
	for (int i_ = 0; i_ < s_; i_++) {
		WorldBlock block_{ 0, 0, uint16_t(-1) }; // buvo WorldBlock block_{0, 0, -1}; 
		if (i_ >= 3800 && i_ < 5400 && !(rand() % 50))
			block_.fg = 10;
		else if (i_ >= 3700 && i_ < 5400) {
			if (i_ > 5000) {
				if (rand() % 8 < 3)
					block_.fg = 4;
				else
					block_.fg = 2;
			}
			else
				block_.fg = 2;
		}
		else if (i_ >= 5400)
			block_.fg = 8;
		if (i_ == 3600 + d_)
			block_.fg = 6;
		if (i_ == 3700 + d_)
			block_.fg = 8;
		if (i_ >= 3700)
			block_.bg = 14;
		world_.blocks.push_back(block_);
	}
	worlds.push_back(world_);
	return world_;
}

World get_world(const string& name_) {
	/*galima buvo daryti pagal worldid o ne name bet jeigu worldus trinti is memory tai nk gero nebus*/
	World dunyasav;
	if (!dunyasav.savealiyo) {
		vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			return worlds[p - worlds.begin()]; // return worldo struktura   
		}
	}
	// Worldo Nera bet jis gali buti issaugotas  
	string path_ = "worlds/" + name_ + "_.json";
	if (_access_s(path_.c_str(), 0) == 0) {
		World world_;
		try {
			// Pakrauti worlda is json      

			/*
			jeigu nera naudoti sita
						if (world_read.find("rainbows") != world_read.end()) world_.rainbows = world_read["rainbows"].get<bool>();
						*/
			json world_read;
			ifstream world_file(path_, ifstream::binary);
			world_file >> world_read;
			world_file.close();
			world_.name = name_;
			world_.entry_level = world_read["entry_level"].get<int>();
			world_.open_to_public = world_read["public"].get<bool>();
			world_.nuked = world_read["nuked"].get<bool>();
			world_.wlc = world_read["wlc"].get<vector<vector<unsigned int>>>();
			world_.n_t = world_read["n_t"].get<string>();
			world_.n_b = world_read["n_b"].get<string>();
			world_.music_bpm = world_read["music_bpm"].get<uint32_t>();
			world_.weather = world_read["weather"].get<uint16_t>();
			world_.make_music_blocks_invisible = world_read["invisible_music_blocks"].get<bool>();
			world_.disable_music_blocks = world_read["disable_music_blocks"].get<bool>();
			world_.owner_name = world_read["owner"].get<string>();
			world_.rainbows = world_read["rainbows"].get<bool>();
			world_.silence = world_read["silence"].get<bool>();
			world_.guild_id = world_read["guild_id"].get<int>();
			world_.d_weather = world_read["d_weather"].get<int>();
			world_.owner_named = world_read["o2"].get<string>();
			world_.v_p = world_read["v_p"].get<bool>();
			/*if cant find
						json gscan_ = json::array();
			if (world_read.find("gscan") != world_read.end()) gscan_ = world_read["gscan"].get<json>();
			*/
			json sbx1_ = world_read["sbox1"].get<json>();
			json gscan_ = world_read["gscan"].get<json>();
			json bulletins_ = world_read["sbull"].get<json>();
			json cctv_get_settings_ = world_read["sstv"].get<json>();
			json cctv_ = world_read["cctv"].get<json>();
			json bullet_ = world_read["bulletin"].get<json>();
			json p_ = world_read["blocks"].get<json>(), a_ = world_read["drop"].get<json>(), adm_ = world_read["admins"].get<json>(), npc_vector_ = world_read["npc"].get<json>(), machine_vector_ = world_read["machine"].get<json>();
			for (int i_ = 0; i_ < adm_.size(); i_++) {
				string name_ = adm_[i_]["name"].get<string>();
				world_.admins.push_back(name_);
			}
			if (save_aldi) {
				for (auto& p : directory_iterator("worlds")) {
					remove(p.path());
				} //remove garbage worlds
			}
			for (int i_ = 0; i_ < p_.size(); i_++) {
				WorldBlock b_{};
				if (p_[i_].find("f") != p_[i_].end()) b_.fg = p_[i_]["f"].get<int>();
				if (p_[i_].find("b") != p_[i_].end()) b_.bg = p_[i_]["b"].get<int>();
				if (p_[i_].find("p") != p_[i_].end()) b_.planted = p_[i_]["p"].get<long long>();
				if (p_[i_].find("fc") != p_[i_].end()) b_.fruit = p_[i_]["fc"].get<int>();
				if (p_[i_].find("sp") != p_[i_].end()) b_.sp = p_[i_]["sp"].get<int>();
				if (p_[i_].find("t") != p_[i_].end()) b_.txt = p_[i_]["t"].get<string>();
				if (p_[i_].find("n") != p_[i_].end()) b_.roll = p_[i_]["n"].get<uint8_t>();
				if (p_[i_].find("id") != p_[i_].end()) b_.id = p_[i_]["id"].get<uint32_t>();
				if (p_[i_].find("c") != p_[i_].end()) b_.c_ = p_[i_]["c"].get<uint32_t>();
				if (p_[i_].find("wl") != p_[i_].end()) b_.wl = p_[i_]["wl"].get<uint32_t>();
				if (p_[i_].find("pr") != p_[i_].end()) b_.pr = p_[i_]["pr"].get<int>();
				if (p_[i_].find("o") != p_[i_].end()) b_.open = p_[i_]["o"].get<bool>();
				if (p_[i_].find("dd") != p_[i_].end()) b_.door_destination = p_[i_]["dd"].get<string>();
				if (p_[i_].find("di") != p_[i_].end()) b_.door_id = p_[i_]["di"].get<string>();
				if (p_[i_].find("fl") != p_[i_].end()) b_.flags = p_[i_]["fl"].get<int>();
				if (p_[i_].find("ps") != p_[i_].end()) b_.projectile_speed = p_[i_]["ps"].get<int>();
				if (p_[i_].find("rf") != p_[i_].end()) b_.rate_of_fire = p_[i_]["rf"].get<int>();
				if (p_[i_].find("en") != p_[i_].end()) b_.enabled = p_[i_]["en"].get<bool>();
				if (p_[i_].find("in") != p_[i_].end()) b_.invert = p_[i_]["in"].get<bool>();
				if (p_[i_].find("sn") != p_[i_].end()) b_.spin = p_[i_]["sn"].get<bool>();
				if (p_[i_].find("g") != p_[i_].end()) b_.gravity = p_[i_]["g"].get<int>();
				if (p_[i_].find("m") != p_[i_].end()) b_.magnetron = p_[i_]["m"].get<bool>();
				if (p_[i_].find("l") != p_[i_].end()) b_.locked = p_[i_]["l"].get<bool>();
				if (p_[i_].find("lq") != p_[i_].end()) b_.lock_origin = p_[i_]["lq"].get<int>();
				if (p_[i_].find("lo") != p_[i_].end()) b_.owner_name = p_[i_]["lo"].get<string>();
				if (p_[i_].find("ea") != p_[i_].end()) b_.empty_air = p_[i_]["ea"].get<bool>();
				if (p_[i_].find("otp") != p_[i_].end()) b_.open_to_public = p_[i_]["otp"].get<bool>();
				if (p_[i_].find("ad") != p_[i_].end()) {
					json read_block_admins_ = p_[i_]["ad"].get<json>();
					for (int i_2 = 0; i_2 < read_block_admins_.size(); i_2++) {
						string name_ = read_block_admins_[i_2]["name"].get<string>();
						b_.admins.push_back(name_);
					}
				}
				if (p_[i_].find("bo") != p_[i_].end()) b_.build_only = p_[i_]["bo"].get<bool>();
				if (p_[i_].find("la") != p_[i_].end()) b_.limit_admins = p_[i_]["la"].get<bool>();
				if (p_[i_].find("cr") != p_[i_].end()) b_.crystals = p_[i_]["cr"].get<vector<vector<int>>>();
				if (p_[i_].find("mq") != p_[i_].end()) b_.mannequin = p_[i_]["mq"].get<Mannequin>();
				if (p_[i_].find("dnt") != p_[i_].end()) {
					json read_block_donation_ = p_[i_]["dnt"].get<json>();
					for (int i_2 = 0; i_2 < read_block_donation_.size(); i_2++) {
						Donate new_donate;
						new_donate.item = read_block_donation_[i_2]["item"].get<int>();
						new_donate.count = read_block_donation_[i_2]["count"].get<int>();
						new_donate.text = read_block_donation_[i_2]["text"].get<string>();
						new_donate.name = read_block_donation_[i_2]["name"].get<string>();
						b_.donates.push_back(new_donate);
					}
				}
				if (p_[i_].find("r1") != p_[i_].end()) b_.r = p_[i_]["r1"].get<int>();
				if (p_[i_].find("g1") != p_[i_].end()) b_.g = p_[i_]["g1"].get<int>();
				if (p_[i_].find("b1") != p_[i_].end()) b_.b = p_[i_]["b1"].get<int>();
				if (p_[i_].find("prs") != p_[i_].end()) b_.portrait = p_[i_]["prs"].get<Portrait>();
				if (p_[i_].find("bep") != p_[i_].end()) b_.bunny_egg_progress = p_[i_]["bep"].get<uint32_t>();
				if (p_[i_].find("hm") != p_[i_].end()) b_.heart_monitor = p_[i_]["hm"].get<string>();
				if (p_[i_].find("sh1") != p_[i_].end()) b_.shelf_1 = p_[i_]["sh1"].get<uint32_t>();
				if (p_[i_].find("sh2") != p_[i_].end()) b_.shelf_2 = p_[i_]["sh2"].get<uint32_t>();
				if (p_[i_].find("sh3") != p_[i_].end()) b_.shelf_3 = p_[i_]["sh3"].get<uint32_t>();
				if (p_[i_].find("sh4") != p_[i_].end()) b_.shelf_4 = p_[i_]["sh4"].get<uint32_t>();
				world_.blocks.push_back(b_);
			}
			int fix_uid = 0;
			for (int i_ = 0; i_ < a_.size(); i_++) {
				WorldDrop b_{};
				b_.id = a_[i_]["i"].get<int>();
				if (b_.id == 0) {
					fix_uid++;
					continue;
				}
				b_.count = a_[i_]["c"].get<int>();
				b_.uid = a_[i_]["u"].get<int>() - fix_uid;
				b_.x = a_[i_]["x"].get<int>();
				b_.y = a_[i_]["y"].get<int>();
				world_.drop.push_back(b_);
			}
			for (int i_ = 0; i_ < sbx1_.size(); i_++) {
				WorldSBOX1 db_{};
				db_.id = sbx1_[i_]["i"].get<int>();
				db_.count = sbx1_[i_]["c"].get<int>();
				db_.x = sbx1_[i_]["x"].get<int>();
				db_.y = sbx1_[i_]["y"].get<int>();
				world_.sbox1.push_back(db_);
			}
			for (int i_ = 0; i_ < gscan_.size(); i_++) {
				WorldGrowscan db_{};
				db_.x = gscan_[i_]["x"].get<int>();
				db_.y = gscan_[i_]["y"].get<int>();
				db_.world_public = gscan_[i_]["world_public"].get<bool>();
				db_.floating_public = gscan_[i_]["floating_public"].get<bool>();
				world_.gscan.push_back(db_);
			}
			for (int i_ = 0; i_ < cctv_get_settings_.size(); i_++) {
				WorldCCTVSettings db_{};
				db_.x = cctv_get_settings_[i_]["x"].get<int>();
				db_.y = cctv_get_settings_[i_]["y"].get<int>();
				db_.show_item_taking = cctv_get_settings_[i_]["s1"].get<bool>();
				db_.show_item_dropping = cctv_get_settings_[i_]["s2"].get<bool>();
				db_.show_people_entering = cctv_get_settings_[i_]["s3"].get<bool>();
				db_.show_people_exiting = cctv_get_settings_[i_]["s4"].get<bool>();
				db_.dont_show_owner = cctv_get_settings_[i_]["s5"].get<bool>();
				db_.dont_show_admins = cctv_get_settings_[i_]["s6"].get<bool>();
				db_.dont_show_noaccess = cctv_get_settings_[i_]["s7"].get<bool>();
				world_.cctv_settings.push_back(db_);
			}
			for (int i_ = 0; i_ < cctv_.size(); i_++) {
				WorldCCTV db_{};
				db_.x = cctv_[i_]["x"].get<int>();
				db_.y = cctv_[i_]["y"].get<int>();
				db_.logs = cctv_[i_]["l"].get<string>();
				world_.cctv.push_back(db_);
			}
			for (int i_ = 0; i_ < bullet_.size(); i_++) {
				WorldBulletin db_{};
				db_.x = bullet_[i_]["x"].get<int>();
				db_.y = bullet_[i_]["y"].get<int>();
				db_.name = bullet_[i_]["n"].get<string>();
				db_.text = bullet_[i_]["t"].get<string>();
				world_.bulletin.push_back(db_);
			}
			for (int i_ = 0; i_ < bulletins_.size(); i_++) {
				WorldBulletinSettings db_{};
				db_.x = bulletins_[i_]["x"].get<int>();
				db_.y = bulletins_[i_]["y"].get<int>();
				db_.public_can_add = bulletins_[i_]["s1"].get<bool>();
				db_.hide_names = bulletins_[i_]["s2"].get<bool>();
				world_.bulletins.push_back(db_);
			}
			for (int i_ = 0; i_ < npc_vector_.size(); i_++) {
				WorldNPC npc_{};
				npc_.id = npc_vector_[i_]["i"].get<uint16_t>();
				npc_.x = npc_vector_[i_]["x"].get<uint16_t>();
				npc_.y = npc_vector_[i_]["y"].get<uint16_t>();
				npc_.projectile_speed = npc_vector_[i_]["ps"].get<uint16_t>();
				npc_.rate_of_fire = npc_vector_[i_]["rf"].get<uint16_t>();
				npc_.kryptis = npc_vector_[i_]["kr"].get<float>();
				npc_.enabled = npc_vector_[i_]["en"].get<bool>();
				npc_.last_ = npc_vector_[i_]["l"].get<long long>();
				npc_.started_moving = npc_vector_[i_]["sm"].get<long long>();
				world_.npc.push_back(npc_);
			}
			for (int i_ = 0; i_ < machine_vector_.size(); i_++) {
				WorldMachines machine_{};
				machine_.id = machine_vector_[i_]["i"].get<uint16_t>();
				machine_.x = machine_vector_[i_]["x"].get<uint16_t>();
				machine_.y = machine_vector_[i_]["y"].get<uint16_t>();
				machine_.target_item = machine_vector_[i_]["ti"].get<uint16_t>();
				machine_.enabled = machine_vector_[i_]["en"].get<bool>();
				machine_.last_ = machine_vector_[i_]["l"].get<long long>();
				world_.machines.push_back(machine_);
			}
		}
		catch (exception err) {
			remove(path_.c_str());
			world_ = create_world(name_, 6000);
		}
		worlds.push_back(world_);
		if (world_.npc.size() != 0 or world_.machines.size() != 0) {
			if (find(t_worlds.begin(), t_worlds.end(), world_.name) == t_worlds.end()) {
				t_worlds.push_back(world_.name);
			}
		}
		return world_;
	}
	return create_world(name_, 6000);
}


World create_world_blast(ENetPeer* peer, const string& name_, int blast, int width = 100, int height = 60) {
	vector<int> id;
	World world_;
	if (blast == 9164 || blast == 1402 || blast == 1060) {
		if (blast == 1060) world_.d_weather = 6;
		int s_ = width * height;
		int d_ = rand() % (s_ / (s_ / width) - 4) + 2;
		for (int i_ = 0; i_ < 6000; i_++) {
			WorldBlock block_{ 0, 0, 0 }; // buvo WorldBlock block_{0, 0, -1};
			if (blast == 9164) {
				if (i_ >= 1700 && i_ < 5400) {
					if (i_ > 5000) {
						if (rand() % 8 < 3) block_.fg = 9162;
					}
				}
				else if (i_ >= 5400) block_.fg = 8;
				if (i_ == 1600 + d_) block_.fg = 6;
				if (i_ == 1700 + d_) block_.fg = 8;
				if (i_ >= 1700) block_.bg = 14;
			}
			else if (blast == 1402) {
				if (i_ >= 5400) block_.fg = 8;
				if (i_ == 5200) block_.fg = 6;
				if (i_ == 5300)block_.fg = 8;
			}
			else if (blast == 1060) {
				if (i_ >= 3800 && i_ < 5400 && !(rand() % 50)) block_.fg = 10;
				else if (i_ >= 3600 && i_ < 3700) {
					id = { 231,487,483,2019,427,1757,2009,281,781,329,459,1041,421,2787,2789,1043,2797,181,613,65,4983,283,553,425,4635,987,627,2017,989,61,4639,973,3523,331,265,859,433,253,339,1105,439,4567,333,677,5673,1427,5603,183,10533,5731,7223,10833,6035,6813,1113,1047,653,2811,4703,1429,847,665,485,1613,833,2025,1775,3931,429,3831,423,437,1773,4767,1299,361,667,2815,3473,301,4637,5683,2709,415,955,461,861,9389,5467,2791,2815,1803,419,2027,685,555,741,10531,5729,7221,10831,6033,6811,621,6401,1107,359,3471,855,309,1685,1449,1309,441,1111,221,1431,3065,9307,1257,1501,1109,4641,3587,1103,417,743,431,3823,2949,1131,3825,727,5379,729,187,787,5459,4785,3261,3521,2293,2309,2321,2333,5461,3721,327,247,63,3479,445,4783,299,863,8935,1451,261,1871,1499,455,9391,683,1159,551,1745,411,3005,557,687,4799,559,4643,3899,1605,9309,567,565,1155,3827,1327,1767,993,1157,563,4721,115,1423,10515,1329,6545,287,669,777,5463,1655,1599,561,4585,3413,4745,1771,2011,1161,1729,3757,3753,321,3265,3263,623,775,6397,129,4667,759,3767,1529,6543,4707,3835,1435,651,8929,569,527,3287,1595,6063,2795,1003,1731,4943,4963,597,4669,1531,1523,625,4297,599,657,571,873,3755,2969,1725,4603,1447,3267,5375,1683 };
					block_.fg = id[rand() % id.size()], block_.fruit = items[block_.fg].rarity == 999 ? 1 : (rand() % 4) + 1, block_.planted = time(nullptr) - (items[block_.fg].growTime);
				}
				else if (i_ >= 3700 && i_ < 5400) {
					if (i_ > 5000) {
						if (rand() % 8 < 3) block_.fg = 4;
						else block_.fg = 2;
					}
					else block_.fg = 2;
				}
				else if (i_ >= 5400) block_.fg = 8;
				if (i_ == 3600 + d_) block_.fg = 6;
				if (i_ == 3700 + d_) block_.fg = 8;
				if (i_ >= 3700) block_.bg = 14;
			}
			world_.blocks.push_back(block_);
		}
	}
	/*
	else if (blast == 1532) {
		world_ = get_world("GENERATED_UNDERSEA_BLAST_1532");
		world_.d_weather = 14;
	}
	*/
	/*
	else if (blast == 830) {
		world_ = get_world("GENERATED_SUMMER_BLAST_830");
		world_.d_weather = 1;
	}
	*/
	/*
	else if (blast == 1136) {
		world_ = get_world("GENERATED_MARS_BLAST_1136");
		world_.d_weather = 7;
	}
	*/
	else if (blast == 3562) {
		world_ = get_world("GENERATED_CAVE_BLAST_3562");
		world_.blocks[5000 - rand() % 700].fg = 3604;
		world_.blocks[5300 - rand() % 700].fg = 3604;
	}
	else if (blast == 7588) {
		world_ = get_world("GENERATED_TREASURE_BLAST_7588");
		world_.d_weather = 44;
	}
	else if (blast == 9488) {
		world_ = get_world("GENERATED_FARM_BLAST_9488");
	}
	else if (blast == 942) {
		world_ = get_world("GENERATED_DESERT_BLAST_942");
		world_.d_weather = 3;
		if (rand() % 100 < 10) {
			id = { 12292 , 12294 };
			WorldDrop drop_block_{};
			drop_block_.id = id[rand() % id.size()], drop_block_.count = 1, drop_block_.uid = uint16_t(world_.drop.size()) + 1, drop_block_.x = 1536, drop_block_.y = 544;
			world_.drop.push_back(drop_block_);
		}
	}
	else if (blast == 4774) {
		id = { 4778, 4714,4778, 4714, 10066, 11188 };
		world_ = get_world("GENERATE_JUNGLE_BLAST_4774");
		WorldDrop drop_block_{};
		drop_block_.id = id[rand() % id.size()], drop_block_.count = 1, drop_block_.uid = uint16_t(world_.drop.size()) + 1, drop_block_.x = 835, drop_block_.y = 1485;
		world_.d_weather = 32;
		world_.drop.push_back(drop_block_);
	}
	else if (blast == 7380) {
		world_ = get_world("GENERATE_MONOCHROME_BLAST_7380");
		world_.d_weather = 43;
	}
	else if (blast == 8556) {
		world_ = get_world("GENERATE_SURG_BLAST_8556");
		world_.d_weather = 45;
	}
	else {
		world_ = get_world("GENERATED_UNKNOWN_BLAST");
		world_.d_weather = 3;
	}
	world_.name = name_;
	worlds.push_back(world_);
	return world_;
}


void save_worlds(const string& name_, bool erase = true) {

	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		cout << "World: " << name_ << " saved!" << endl;
		__int64 id_ = p - worlds.begin();
		World* world_ = &worlds[id_];
		world_->savealiyo = true;
		json save_, blocks_ = json::array(), drops_ = json::array(), sboxs1_ = json::array(), gscans_ = json::array(), bulletin_s = json::array(), cctv_save_settings_ = json::array(), cctv_save_ = json::array(), bulletins_ = json::array(), donates_ = json::array(), admins_ = json::array(), npcs = json::array(), machines = json::array(), wlc_ = json::array();
		save_["entry_level"] = world_->entry_level;
		save_["nuked"] = world_->nuked;
		save_["n_t"] = world_->n_t;
		save_["n_b"] = world_->n_b;
		save_["music_bpm"] = world_->music_bpm;
		save_["public"] = world_->open_to_public;
		save_["weather"] = world_->weather;
		save_["invisible_music_blocks"] = world_->make_music_blocks_invisible;
		save_["disable_music_blocks"] = world_->disable_music_blocks;
		save_["owner"] = world_->owner_name;
		save_["guild_id"] = world_->guild_id;
		save_["d_weather"] = world_->d_weather;
		save_["o2"] = world_->owner_named;
		save_["v_p"] = world_->v_p;
		save_["rainbows"] = world_->rainbows;
		save_["silence"] = world_->silence;
		for (int i_ = 0; i_ < world_->admins.size(); i_++) {
			json admin_;
			admin_["name"] = world_->admins[i_];
			admins_.push_back(admin_);
		}
		for (int i_ = 0; i_ < world_->wlc.size(); i_++) {
			json wlc_;
			wlc_["size"] = world_->wlc[i_];
			wlc_.push_back(wlc_);
		}
		bool add_fossil = false;
		if (rand() % 2 < 1) add_fossil = true;
		for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
			json block_;
			if (world_->blocks[i_].fg != 0) {
				if (add_fossil && f_saving_ && world_->blocks[i_].fg == 10 && rand() % 6900 < 1) {
					cout << "gave a fossil to " << name_ << endl;
					block_["f"] = 3918;
				}
				else block_["f"] = world_->blocks[i_].fg;
			}
			if (world_->blocks[i_].bg != 0) block_["b"] = world_->blocks[i_].bg;
			if (world_->blocks[i_].planted != 0) block_["p"] = world_->blocks[i_].planted;
			if (world_->blocks[i_].fruit != 0 and world_->blocks[i_].fruit != 65535) block_["fc"] = world_->blocks[i_].fruit;
			if (world_->blocks[i_].sp != 0) block_["sp"] = world_->blocks[i_].sp;
			if (world_->blocks[i_].txt != "") block_["t"] = world_->blocks[i_].txt;
			if (world_->blocks[i_].roll != 0) block_["n"] = world_->blocks[i_].roll;
			if (world_->blocks[i_].id != 0) block_["id"] = world_->blocks[i_].id;
			if (world_->blocks[i_].c_ != 0) block_["c"] = world_->blocks[i_].c_;
			if (world_->blocks[i_].wl != 0) block_["wl"] = world_->blocks[i_].wl;
			if (world_->blocks[i_].pr != 0) block_["pr"] = world_->blocks[i_].pr;
			if (world_->blocks[i_].open != true) block_["o"] = world_->blocks[i_].open;
			if (world_->blocks[i_].door_destination != "") block_["dd"] = world_->blocks[i_].door_destination;
			if (world_->blocks[i_].door_id != "") block_["di"] = world_->blocks[i_].door_id;
			if (world_->blocks[i_].flags != 0x00000000) block_["fl"] = world_->blocks[i_].flags;
			if (world_->blocks[i_].rate_of_fire != 10) block_["rf"] = world_->blocks[i_].rate_of_fire;
			if (world_->blocks[i_].projectile_speed != 100) block_["ps"] = world_->blocks[i_].projectile_speed;
			if (world_->blocks[i_].enabled != false) block_["en"] = world_->blocks[i_].enabled;
			if (world_->blocks[i_].invert != false) block_["in"] = world_->blocks[i_].invert;
			if (world_->blocks[i_].spin != false) block_["sn"] = world_->blocks[i_].spin;
			if (world_->blocks[i_].gravity != 50) block_["g"] = world_->blocks[i_].gravity;
			if (world_->blocks[i_].magnetron != false) block_["m"] = world_->blocks[i_].magnetron;
			if (world_->blocks[i_].locked != false) block_["l"] = world_->blocks[i_].locked;
			if (world_->blocks[i_].lock_origin != -1) block_["lq"] = world_->blocks[i_].lock_origin;
			if (world_->blocks[i_].owner_name != "") block_["lo"] = world_->blocks[i_].owner_name;
			if (world_->blocks[i_].empty_air != false) block_["ea"] = world_->blocks[i_].empty_air;
			if (world_->blocks[i_].open_to_public != false) block_["otp"] = world_->blocks[i_].open_to_public;
			if (world_->blocks[i_].admins.size() != 0) {
				json block_admins_ = json::array();
				for (int i_2 = 0; i_2 < world_->blocks[i_].admins.size(); i_2++) {
					json admin_;
					admin_["name"] = world_->blocks[i_].admins[i_2];
					block_admins_.push_back(admin_);
				}
				block_["ad"] = block_admins_;
			}
			if (world_->blocks[i_].build_only != false) block_["bo"] = world_->blocks[i_].build_only;
			if (world_->blocks[i_].limit_admins != false) block_["la"] = world_->blocks[i_].limit_admins;
			if (world_->blocks[i_].crystals.size() != 0) block_["cr"] = world_->blocks[i_].crystals;
			if (world_->blocks[i_].mannequin.c_head != 0 or world_->blocks[i_].mannequin.c_shirt != 0 or world_->blocks[i_].mannequin.c_pants != 0 or world_->blocks[i_].mannequin.c_feet != 0 or world_->blocks[i_].mannequin.c_mask != 0 or world_->blocks[i_].mannequin.c_hand != 0 or world_->blocks[i_].mannequin.c_back != 0 or world_->blocks[i_].mannequin.c_hair != 0 or world_->blocks[i_].mannequin.c_neck != 0) {
				block_["mq"] = world_->blocks[i_].mannequin;
			}
			if (world_->blocks[i_].donates.size() != 0) {
				json block_donates_ = json::array();
				for (int i_2 = 0; i_2 < world_->blocks[i_].donates.size(); i_2++) {
					json donate_;
					donate_["item"] = world_->blocks[i_].donates[i_2].item;
					donate_["count"] = world_->blocks[i_].donates[i_2].count;
					donate_["text"] = world_->blocks[i_].donates[i_2].text;
					donate_["name"] = world_->blocks[i_].donates[i_2].name;
					block_donates_.push_back(donate_);
				}
				block_["dnt"] = block_donates_;
			}
			if (world_->blocks[i_].r != 255) block_["r1"] = world_->blocks[i_].r;
			if (world_->blocks[i_].g != 128) block_["g1"] = world_->blocks[i_].g;
			if (world_->blocks[i_].b != 64) block_["b1"] = world_->blocks[i_].b;
			if (world_->blocks[i_].portrait.c_expression != 1 or world_->blocks[i_].portrait.c_hair_colour != 0 or world_->blocks[i_].portrait.c_skin != 0 or world_->blocks[i_].portrait.c_face != 0 or world_->blocks[i_].portrait.c_head != 0 or world_->blocks[i_].portrait.c_hair != 0) {
				block_["prs"] = world_->blocks[i_].portrait;
			}
			if (world_->blocks[i_].bunny_egg_progress != 0) block_["bep"] = world_->blocks[i_].bunny_egg_progress;
			if (world_->blocks[i_].heart_monitor != "") block_["hm"] = world_->blocks[i_].heart_monitor;
			if (world_->blocks[i_].shelf_1 != 0) block_["sh1"] = world_->blocks[i_].shelf_1;
			if (world_->blocks[i_].shelf_2 != 0) block_["sh2"] = world_->blocks[i_].shelf_2;
			if (world_->blocks[i_].shelf_3 != 0) block_["sh3"] = world_->blocks[i_].shelf_3;
			if (world_->blocks[i_].shelf_4 != 0) block_["sh4"] = world_->blocks[i_].shelf_4;
			blocks_.push_back(block_);
		}

		if (f_saving_) for (int i_ = 0, uid = 0; i_ < world_->drop.size(); i_++) if (world_->drop[i_].id <= 0 || world_->drop[i_].x < 0 || world_->drop[i_].y < 0 || world_->drop[i_].x > 3200 || world_->drop[i_].y > 1888) world_->drop.erase(world_->drop.begin() + i_);

		for (int i_ = 0; i_ < world_->drop.size(); i_++) {
			json drop_;
			drop_["i"] = world_->drop[i_].id;
			drop_["c"] = world_->drop[i_].count;
			drop_["u"] = (f_saving_ ? i_ : world_->drop[i_].uid);
			drop_["x"] = world_->drop[i_].x;
			drop_["y"] = world_->drop[i_].y;
			drops_.push_back(drop_);
		}
		for (int i_ = 0; i_ < world_->sbox1.size(); i_++) {
			json sbox1_;
			sbox1_["i"] = world_->sbox1[i_].id;
			sbox1_["c"] = world_->sbox1[i_].count;
			sbox1_["x"] = world_->sbox1[i_].x;
			sbox1_["y"] = world_->sbox1[i_].y;
			sboxs1_.push_back(sbox1_);
		}
		for (int i_ = 0; i_ < world_->gscan.size(); i_++) {
			json gscan_;
			gscan_["x"] = world_->gscan[i_].x;
			gscan_["y"] = world_->gscan[i_].y;
			gscan_["world_public"] = world_->gscan[i_].world_public;
			gscan_["floating_public"] = world_->gscan[i_].floating_public;
			gscans_.push_back(gscan_);
		}
		for (int i_ = 0; i_ < world_->cctv_settings.size(); i_++) {
			json cctv_settings_;
			cctv_settings_["x"] = world_->cctv_settings[i_].x;
			cctv_settings_["y"] = world_->cctv_settings[i_].y;
			cctv_settings_["s1"] = world_->cctv_settings[i_].show_item_taking;
			cctv_settings_["s2"] = world_->cctv_settings[i_].show_item_dropping;
			cctv_settings_["s3"] = world_->cctv_settings[i_].show_people_entering;
			cctv_settings_["s4"] = world_->cctv_settings[i_].show_people_exiting;
			cctv_settings_["s5"] = world_->cctv_settings[i_].dont_show_owner;
			cctv_settings_["s6"] = world_->cctv_settings[i_].dont_show_admins;
			cctv_settings_["s7"] = world_->cctv_settings[i_].dont_show_noaccess;
			cctv_save_settings_.push_back(cctv_settings_);
		}
		for (int i_ = 0; i_ < world_->cctv.size(); i_++) {
			json cctv_;
			cctv_["x"] = world_->cctv[i_].x;
			cctv_["y"] = world_->cctv[i_].y;
			cctv_["l"] = world_->cctv[i_].logs;
			cctv_save_.push_back(cctv_);
		}
		for (int i_ = 0; i_ < world_->bulletin.size(); i_++) {
			json bulletin_;
			bulletin_["x"] = world_->bulletin[i_].x;
			bulletin_["y"] = world_->bulletin[i_].y;
			bulletin_["n"] = world_->bulletin[i_].name;
			bulletin_["t"] = world_->bulletin[i_].text;
			bulletins_.push_back(bulletin_);
		}
		for (int i_ = 0; i_ < world_->bulletins.size(); i_++) {
			json bulletin_settings_;
			bulletin_settings_["x"] = world_->bulletins[i_].x;
			bulletin_settings_["y"] = world_->bulletins[i_].y;
			bulletin_settings_["s1"] = world_->bulletins[i_].public_can_add;
			bulletin_settings_["s2"] = world_->bulletins[i_].hide_names;
			bulletin_s.push_back(bulletin_settings_);
		}
		for (int i_ = 0; i_ < world_->npc.size(); i_++) {
			json npc_;
			npc_["i"] = world_->npc[i_].id;
			npc_["x"] = world_->npc[i_].x;
			npc_["y"] = world_->npc[i_].y;
			npc_["ps"] = world_->npc[i_].projectile_speed;
			npc_["rf"] = world_->npc[i_].rate_of_fire;
			npc_["en"] = world_->npc[i_].enabled;
			npc_["kr"] = world_->npc[i_].kryptis;
			npc_["l"] = world_->npc[i_].last_;
			npc_["sm"] = world_->npc[i_].started_moving;
			npcs.push_back(npc_);
		}
		for (int i_ = 0; i_ < world_->machines.size(); i_++) {
			json machine_;
			machine_["i"] = world_->machines[i_].id;
			machine_["x"] = world_->machines[i_].x;
			machine_["y"] = world_->machines[i_].y;
			machine_["en"] = world_->machines[i_].enabled;
			machine_["ti"] = world_->machines[i_].target_item;
			machine_["l"] = world_->machines[i_].last_;
			machines.push_back(machine_);
		}
		save_["blocks"] = blocks_, save_["drop"] = drops_, save_["wlc"] = wlc_, save_["sbox1"] = sboxs1_, save_["gscan"] = gscans_, save_["sbull"] = bulletin_s, save_["sstv"] = cctv_save_settings_, save_["cctv"] = cctv_save_, save_["bulletin"] = bulletins_, save_["donate"] = donates_, save_["admins"] = admins_, save_["npc"] = npcs, save_["machine"] = machines;
		//cout << "saved world " << name_ << endl;
		ofstream w_("worlds/" + name_ + "_.json");
		if (w_.fail()) {
			cout << "world saving failed for " << name_ << endl;
			return;
		}
		w_ << save_ << endl;
		w_.close();
		if (erase) {
			bool dont_del = false;
			if (not dont_del) {
				/*world_->cctv_settings.clear();
				world_->cctv.clear();
				world_->bulletin.clear();
				world_->bulletins.clear();
				world_->admins.clear();
				world_->blocks.clear();
				world_->drop.clear();
				world_->sbox1.clear();
				world_->gscan.clear();
				world_->npc.clear();
				world_->machines.clear();*/
				//worlds.erase(worlds.begin() + id_);

				deleteWorld(world_->name);
				// SAVEMEM
			}
		}
		world_->savealiyo = false;
	}
}

void save_world(const string& name_, bool erase = true) {


	cout << "World: " << name_ << " saved!" << endl;

	World world_ = get_world(name_);
	world_.savealiyo = true;
	json save_, blocks_ = json::array(), drops_ = json::array(), sboxs1_ = json::array(), gscans_ = json::array(), bulletin_s = json::array(), cctv_save_settings_ = json::array(), cctv_save_ = json::array(), bulletins_ = json::array(), donates_ = json::array(), admins_ = json::array(), npcs = json::array(), machines = json::array(), wlc_ = json::array();
	save_["entry_level"] = world_.entry_level;
	save_["nuked"] = world_.nuked;
	save_["n_t"] = world_.n_t;
	save_["n_b"] = world_.n_b;
	save_["music_bpm"] = world_.music_bpm;
	save_["public"] = world_.open_to_public;
	save_["weather"] = world_.weather;
	save_["invisible_music_blocks"] = world_.make_music_blocks_invisible;
	save_["disable_music_blocks"] = world_.disable_music_blocks;
	save_["owner"] = world_.owner_name;
	save_["guild_id"] = world_.guild_id;
	save_["d_weather"] = world_.d_weather;
	save_["o2"] = world_.owner_named;
	save_["v_p"] = world_.v_p;
	save_["rainbows"] = world_.rainbows;
	save_["silence"] = world_.silence;
	for (int i_ = 0; i_ < world_.admins.size(); i_++) {
		json admin_;
		admin_["name"] = world_.admins[i_];
		admins_.push_back(admin_);
	}
	for (int i_ = 0; i_ < world_.wlc.size(); i_++) {
		json wlc_;
		wlc_["size"] = world_.wlc[i_];
		wlc_.push_back(wlc_);
	}
	bool add_fossil = false;
	if (rand() % 2 < 1) add_fossil = true;
	for (int i_ = 0; i_ < world_.blocks.size(); i_++) {
		json block_;
		if (world_.blocks[i_].fg != 0) {
			if (add_fossil && f_saving_ && world_.blocks[i_].fg == 10 && rand() % 6900 < 1) {
				cout << "gave a fossil to " << name_ << endl;
				block_["f"] = 3918;
			}
			else block_["f"] = world_.blocks[i_].fg;
		}
		if (world_.blocks[i_].bg != 0) block_["b"] = world_.blocks[i_].bg;
		if (world_.blocks[i_].planted != 0) block_["p"] = world_.blocks[i_].planted;
		if (world_.blocks[i_].fruit != 0 and world_.blocks[i_].fruit != 65535) block_["fc"] = world_.blocks[i_].fruit;
		if (world_.blocks[i_].sp != 0) block_["sp"] = world_.blocks[i_].sp;
		if (world_.blocks[i_].txt != "") block_["t"] = world_.blocks[i_].txt;
		if (world_.blocks[i_].roll != 0) block_["n"] = world_.blocks[i_].roll;
		if (world_.blocks[i_].id != 0) block_["id"] = world_.blocks[i_].id;
		if (world_.blocks[i_].c_ != 0) block_["c"] = world_.blocks[i_].c_;
		if (world_.blocks[i_].wl != 0) block_["wl"] = world_.blocks[i_].wl;
		if (world_.blocks[i_].pr != 0) block_["pr"] = world_.blocks[i_].pr;
		if (world_.blocks[i_].open != true) block_["o"] = world_.blocks[i_].open;
		if (world_.blocks[i_].door_destination != "") block_["dd"] = world_.blocks[i_].door_destination;
		if (world_.blocks[i_].door_id != "") block_["di"] = world_.blocks[i_].door_id;
		if (world_.blocks[i_].flags != 0x00000000) block_["fl"] = world_.blocks[i_].flags;
		if (world_.blocks[i_].rate_of_fire != 10) block_["rf"] = world_.blocks[i_].rate_of_fire;
		if (world_.blocks[i_].projectile_speed != 100) block_["ps"] = world_.blocks[i_].projectile_speed;
		if (world_.blocks[i_].enabled != false) block_["en"] = world_.blocks[i_].enabled;
		if (world_.blocks[i_].invert != false) block_["in"] = world_.blocks[i_].invert;
		if (world_.blocks[i_].spin != false) block_["sn"] = world_.blocks[i_].spin;
		if (world_.blocks[i_].gravity != 50) block_["g"] = world_.blocks[i_].gravity;
		if (world_.blocks[i_].magnetron != false) block_["m"] = world_.blocks[i_].magnetron;
		if (world_.blocks[i_].locked != false) block_["l"] = world_.blocks[i_].locked;
		if (world_.blocks[i_].lock_origin != -1) block_["lq"] = world_.blocks[i_].lock_origin;
		if (world_.blocks[i_].owner_name != "") block_["lo"] = world_.blocks[i_].owner_name;
		if (world_.blocks[i_].empty_air != false) block_["ea"] = world_.blocks[i_].empty_air;
		if (world_.blocks[i_].open_to_public != false) block_["otp"] = world_.blocks[i_].open_to_public;
		if (world_.blocks[i_].admins.size() != 0) {
			json block_admins_ = json::array();
			for (int i_2 = 0; i_2 < world_.blocks[i_].admins.size(); i_2++) {
				json admin_;
				admin_["name"] = world_.blocks[i_].admins[i_2];
				block_admins_.push_back(admin_);
			}
			block_["ad"] = block_admins_;
		}
		if (world_.blocks[i_].build_only != false) block_["bo"] = world_.blocks[i_].build_only;
		if (world_.blocks[i_].limit_admins != false) block_["la"] = world_.blocks[i_].limit_admins;
		if (world_.blocks[i_].crystals.size() != 0) block_["cr"] = world_.blocks[i_].crystals;
		if (world_.blocks[i_].mannequin.c_head != 0 or world_.blocks[i_].mannequin.c_shirt != 0 or world_.blocks[i_].mannequin.c_pants != 0 or world_.blocks[i_].mannequin.c_feet != 0 or world_.blocks[i_].mannequin.c_mask != 0 or world_.blocks[i_].mannequin.c_hand != 0 or world_.blocks[i_].mannequin.c_back != 0 or world_.blocks[i_].mannequin.c_hair != 0 or world_.blocks[i_].mannequin.c_neck != 0) {
			block_["mq"] = world_.blocks[i_].mannequin;
		}
		if (world_.blocks[i_].donates.size() != 0) {
			json block_donates_ = json::array();
			for (int i_2 = 0; i_2 < world_.blocks[i_].donates.size(); i_2++) {
				json donate_;
				donate_["item"] = world_.blocks[i_].donates[i_2].item;
				donate_["count"] = world_.blocks[i_].donates[i_2].count;
				donate_["text"] = world_.blocks[i_].donates[i_2].text;
				donate_["name"] = world_.blocks[i_].donates[i_2].name;
				block_donates_.push_back(donate_);
			}
			block_["dnt"] = block_donates_;
		}
		if (world_.blocks[i_].r != 255) block_["r1"] = world_.blocks[i_].r;
		if (world_.blocks[i_].g != 128) block_["g1"] = world_.blocks[i_].g;
		if (world_.blocks[i_].b != 64) block_["b1"] = world_.blocks[i_].b;
		if (world_.blocks[i_].portrait.c_expression != 1 or world_.blocks[i_].portrait.c_hair_colour != 0 or world_.blocks[i_].portrait.c_skin != 0 or world_.blocks[i_].portrait.c_face != 0 or world_.blocks[i_].portrait.c_head != 0 or world_.blocks[i_].portrait.c_hair != 0) {
			block_["prs"] = world_.blocks[i_].portrait;
		}
		if (world_.blocks[i_].bunny_egg_progress != 0) block_["bep"] = world_.blocks[i_].bunny_egg_progress;
		if (world_.blocks[i_].heart_monitor != "") block_["hm"] = world_.blocks[i_].heart_monitor;
		if (world_.blocks[i_].shelf_1 != 0) block_["sh1"] = world_.blocks[i_].shelf_1;
		if (world_.blocks[i_].shelf_2 != 0) block_["sh2"] = world_.blocks[i_].shelf_2;
		if (world_.blocks[i_].shelf_3 != 0) block_["sh3"] = world_.blocks[i_].shelf_3;
		if (world_.blocks[i_].shelf_4 != 0) block_["sh4"] = world_.blocks[i_].shelf_4;
		blocks_.push_back(block_);
	}

	if (f_saving_) for (int i_ = 0, uid = 0; i_ < world_.drop.size(); i_++) if (world_.drop[i_].id <= 0 || world_.drop[i_].x < 0 || world_.drop[i_].y < 0 || world_.drop[i_].x > 3200 || world_.drop[i_].y > 1888) world_.drop.erase(world_.drop.begin() + i_);

	for (int i_ = 0; i_ < world_.drop.size(); i_++) {
		json drop_;
		drop_["i"] = world_.drop[i_].id;
		drop_["c"] = world_.drop[i_].count;
		drop_["u"] = (f_saving_ ? i_ : world_.drop[i_].uid);
		drop_["x"] = world_.drop[i_].x;
		drop_["y"] = world_.drop[i_].y;
		drops_.push_back(drop_);
	}
	for (int i_ = 0; i_ < world_.sbox1.size(); i_++) {
		json sbox1_;
		sbox1_["i"] = world_.sbox1[i_].id;
		sbox1_["c"] = world_.sbox1[i_].count;
		sbox1_["x"] = world_.sbox1[i_].x;
		sbox1_["y"] = world_.sbox1[i_].y;
		sboxs1_.push_back(sbox1_);
	}
	for (int i_ = 0; i_ < world_.gscan.size(); i_++) {
		json gscan_;
		gscan_["x"] = world_.gscan[i_].x;
		gscan_["y"] = world_.gscan[i_].y;
		gscan_["world_public"] = world_.gscan[i_].world_public;
		gscan_["floating_public"] = world_.gscan[i_].floating_public;
		gscans_.push_back(gscan_);
	}
	for (int i_ = 0; i_ < world_.cctv_settings.size(); i_++) {
		json cctv_settings_;
		cctv_settings_["x"] = world_.cctv_settings[i_].x;
		cctv_settings_["y"] = world_.cctv_settings[i_].y;
		cctv_settings_["s1"] = world_.cctv_settings[i_].show_item_taking;
		cctv_settings_["s2"] = world_.cctv_settings[i_].show_item_dropping;
		cctv_settings_["s3"] = world_.cctv_settings[i_].show_people_entering;
		cctv_settings_["s4"] = world_.cctv_settings[i_].show_people_exiting;
		cctv_settings_["s5"] = world_.cctv_settings[i_].dont_show_owner;
		cctv_settings_["s6"] = world_.cctv_settings[i_].dont_show_admins;
		cctv_settings_["s7"] = world_.cctv_settings[i_].dont_show_noaccess;
		cctv_save_settings_.push_back(cctv_settings_);
	}
	for (int i_ = 0; i_ < world_.cctv.size(); i_++) {
		json cctv_;
		cctv_["x"] = world_.cctv[i_].x;
		cctv_["y"] = world_.cctv[i_].y;
		cctv_["l"] = world_.cctv[i_].logs;
		cctv_save_.push_back(cctv_);
	}
	for (int i_ = 0; i_ < world_.bulletin.size(); i_++) {
		json bulletin_;
		bulletin_["x"] = world_.bulletin[i_].x;
		bulletin_["y"] = world_.bulletin[i_].y;
		bulletin_["n"] = world_.bulletin[i_].name;
		bulletin_["t"] = world_.bulletin[i_].text;
		bulletins_.push_back(bulletin_);
	}
	for (int i_ = 0; i_ < world_.bulletins.size(); i_++) {
		json bulletin_settings_;
		bulletin_settings_["x"] = world_.bulletins[i_].x;
		bulletin_settings_["y"] = world_.bulletins[i_].y;
		bulletin_settings_["s1"] = world_.bulletins[i_].public_can_add;
		bulletin_settings_["s2"] = world_.bulletins[i_].hide_names;
		bulletin_s.push_back(bulletin_settings_);
	}
	for (int i_ = 0; i_ < world_.npc.size(); i_++) {
		json npc_;
		npc_["i"] = world_.npc[i_].id;
		npc_["x"] = world_.npc[i_].x;
		npc_["y"] = world_.npc[i_].y;
		npc_["ps"] = world_.npc[i_].projectile_speed;
		npc_["rf"] = world_.npc[i_].rate_of_fire;
		npc_["en"] = world_.npc[i_].enabled;
		npc_["kr"] = world_.npc[i_].kryptis;
		npc_["l"] = world_.npc[i_].last_;
		npc_["sm"] = world_.npc[i_].started_moving;
		npcs.push_back(npc_);
	}
	for (int i_ = 0; i_ < world_.machines.size(); i_++) {
		json machine_;
		machine_["i"] = world_.machines[i_].id;
		machine_["x"] = world_.machines[i_].x;
		machine_["y"] = world_.machines[i_].y;
		machine_["en"] = world_.machines[i_].enabled;
		machine_["ti"] = world_.machines[i_].target_item;
		machine_["l"] = world_.machines[i_].last_;
		machines.push_back(machine_);
	}
	save_["blocks"] = blocks_, save_["drop"] = drops_, save_["wlc"] = wlc_, save_["sbox1"] = sboxs1_, save_["gscan"] = gscans_, save_["sbull"] = bulletin_s, save_["sstv"] = cctv_save_settings_, save_["cctv"] = cctv_save_, save_["bulletin"] = bulletins_, save_["donate"] = donates_, save_["admins"] = admins_, save_["npc"] = npcs, save_["machine"] = machines;
	//cout << "saved world " << name_ << endl;
	ofstream w_("worlds/" + name_ + "_.json");
	if (w_.fail()) {
		cout << "world saving failed for " << name_ << endl;
		return;
	}
	w_ << save_ << endl;
	w_.close();
	if (erase) {
		bool dont_del = false;
		if (not dont_del) {
			/*world_.cctv_settings.clear();
			world_.cctv.clear();
			world_.bulletin.clear();
			world_.bulletins.clear();
			world_.admins.clear();
			world_.blocks.clear();
			world_.drop.clear();
			world_.sbox1.clear();
			world_.gscan.clear();
			world_.npc.clear();
			world_.machines.clear();*/
			//worlds.erase(worlds.begin() + id_);

			deleteWorld(world_.name);
			// SAVEMEM
		}
	}
	world_.savealiyo = false;
}

void ServerLog(const std::string& message) {
	std::ofstream file("logs/logs.txt", std::ios::app);
	if (file.is_open()) {
		auto now = std::time(nullptr);
		file << "" << getDate() << " " << message << "\n";
	}
	file.close();
}

void get_players(const string& name_, int& c_, int& t_, int& net_, int& r_c) {
	t_ = 20;
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->tankIDName == "") continue;
		if (not name_.empty() && pInfo(currentPeer)->world == name_) {
			if (not pInfo(currentPeer)->invis)
				c_++;
			if (pInfo(currentPeer)->netID >= net_)
				net_ = pInfo(currentPeer)->netID + 1;
			r_c++;
		}
		if (server_port == 1) t_ += 1 + rand() % 3 + 1;
		else t_ += 1;
	}
}

void packet_(ENetPeer* p_, string t_, string l_ = "") {
	if (l_ != "")
		t_ = "action|log\nmsg|" + t_;
	int y_ = 3;
	BYTE z_ = 0;
	BYTE* const d_ = new BYTE[5 + t_.length()];
	memcpy(d_, &y_, 4);
	memcpy(d_ + 4, t_.c_str(), t_.length());
	memcpy(d_ + 4 + t_.length(), &z_, 1);
	ENetPacket* const p = enet_packet_create(d_, 5 + t_.length(), ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(p_, 0, p);
	delete[]d_;
	if (l_ != "") {
		const string w_ = "https://privategt.com/";
		l_ = "action|set_url\nurl|" + w_ + "\nlabel|" + l_ + "\n";
		BYTE* const u_ = new BYTE[5 + l_.length()];
		memcpy(u_, &y_, 4);
		memcpy(u_ + 4, l_.c_str(), l_.length());
		memcpy(u_ + 4 + l_.length(), &z_, 1);
		ENetPacket* const p3 = enet_packet_create(u_, 5 + l_.length(), ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(p_, 0, p3);
		delete[]u_;
	}
}
bool check_name(string& name_) {
	if (name_ == "EXIT") {
		name_ = "Exit from what? Press back if you're done playing.";
		return false;
	}
	for (char c : name_) if ((c < 'A' || c>'Z') && (c < '0' || c>'9')) {
		name_ = "Sorry, spaces and special characters are not allowed in world or door names.  Try again.";
		return false;
	}
	for (int i = 0; i < swear_words.size(); i++) {
		if (name_.find(swear_words[i]) != string::npos) {
			name_ = "DISNEYLAND";
			break;
		}
	}
	if (name_.size() < 1 || name_.size() >= 24) {
		name_ = "`4To reduce confusion, that is not a valid world name.``  Try another?";
		return false;
	} if (name_ == "") {
		name_ = "START";
	}
	return true;
}

bool check_blast(string& name_) {
	if (name_ == "EXIT" || name_ == "" || name_.size() < 1 || name_.size() >= 24) {
		return false;
	}
	for (char c : name_) if ((c < 'A' || c>'Z') && (c < '0' || c>'9')) {
		return false;
	}
	for (int i = 0; i < swear_words.size(); i++) {
		if (name_.find(swear_words[i]) != string::npos) return false;
	}
	return true;
}

void form_emoji(ENetPeer* peer) {
	gamepacket_t p;
	p.Insert("OnAddNotification");
	p.Insert("interface/large/friend_button.rttex");
	p.Insert("You've unlocked some new `$Growmojis``!");
	p.Insert("audio/hub_open.wav");
	p.Insert(0);
	p.CreatePacket(peer);
	{
		gamepacket_t p;
		p.Insert("OnEmoticonDataChanged");
		p.Insert(151749376);
		string other = "";
		for (int i = 0; i < pInfo(peer)->gr.size(); i++) other += pInfo(peer)->gr[i];
		p.Insert(other + "" + (pInfo(peer)->supp == 2 ? "(yes)|Ă|1" : "(yes)|Ă|0") + "&" + (pInfo(peer)->supp != 0 ? "(no)|ă|1" : "(no)|ă|0") + "&" + (pInfo(peer)->supp == 2 ? "(love)|Ą|1" : "(love)|Ą|0") + "&" + (pInfo(peer)->supp != 0 ? "(shy)|Ć|1&(wink)|ć|1" : "(shy)|Ć|0&(wink)|ć|0") + "&" + (pInfo(peer)->level >= 5 ? "(tongue)|Ĉ|1" : "(tongue)|Ĉ|0") + "&" + (pInfo(peer)->friends.size() >= 20 ? "(agree)|ĉ|1" : "(agree)|ĉ|0") + "&" + (pInfo(peer)->supp != 0 ? "(music)|Č|1" : "(music)|Č|0") + "&" + (pInfo(peer)->friends.size() >= 50 ? "(build)|č|1" : "(build)|č|0") + "&" + (pInfo(peer)->supp == 2 ? "(megaphone)|Ď|1" : "(megaphone)|Ď|0") + "&" + (pInfo(peer)->level >= 5 ? "(sigh)|ď|1&(mad)|Đ|1&(wow)|đ|1" : "(sigh)|ď|0&(mad)|Đ|0&(wow)|đ|0") + "&" + (pInfo(peer)->friends.size() >= 40 ? "(dance)|Ē|1" : "(dance)|Ē|0") + "&" + (pInfo(peer)->friends.size() >= 30 ? "(see-no-evil)|ē|1" : "(see-no-evil)|ē|0") + "&" + (pInfo(peer)->supp == 2 ? "(heart)|ĕ|1" : "(heart)|ĕ|0") + "&" + (pInfo(peer)->friends.size() >= 10 ? "(kiss)|Ę|1" : "(kiss)|Ę|0") + "&" + (pInfo(peer)->supp != 0 ? "(lol)|Ě|1" : "(lol)|Ě|1") + "&" + (pInfo(peer)->level >= 5 ? "(smile)|Ā|1" : "(smile)|Ā|0") + "&" + (pInfo(peer)->supp == 2 ? "(cool)|Ĝ|1" : "(cool)|Ĝ|0") + "&(lucky)|ĳ|1&");
		p.CreatePacket(peer);
	}
}

bool toolavailable(ENetPeer* peer, int tool) {
	bool have = false;
	for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == tool) have = true;
	if (pInfo(peer)->dirt == 10 && tool != 1258 && tool != 0)
		return false;
	else
		switch (tool) {
		case 1258:
			return have;
		case 1266:
			return have && pInfo(peer)->labworked;
		case 1296:
			return pInfo(peer)->fixable && !pInfo(peer)->fixed;
		case 4316:
			return have && !pInfo(peer)->sounded;
		case 4318:
			return have && !pInfo(peer)->labworked;
		case 4312:
			return have && pInfo(peer)->heart > 0;
		case 1268:
			return have && pInfo(peer)->broken > 0;
		case 4308:
			return have && pInfo(peer)->shattered > 0 && pInfo(peer)->incisions > 0;
		case 4314:
			return have && pInfo(peer)->incisions > 0 && pInfo(peer)->bleeding > 0;
		default:
			return have;
		}
}



void add_cctv(ENetPeer* peer, string type, string extra) {
	struct tm newtime;
	time_t now = time(0);
	localtime_s(&newtime, &now);
	WorldCCTV cctv_{};
	string name_ = pInfo(peer)->world;
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		for (int i2_ = 0; i2_ < world_->cctv_settings.size(); i2_++) {
			cctv_.logs = "";
			if (world_->cctv_settings[i2_].dont_show_owner && pInfo(peer)->tankIDName == world_->owner_name) break;
			if (world_->cctv_settings[i2_].dont_show_noaccess && pInfo(peer)->tankIDName != world_->owner_name and !guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end()) break;
			if (world_->cctv_settings[i2_].dont_show_admins && find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) != world_->admins.end()) break;
			if (type == "entered" && world_->cctv_settings[i2_].show_people_entering or type == "left" && world_->cctv_settings[i2_].show_people_exiting or type == "took" && world_->cctv_settings[i2_].show_item_taking or type == "dropped" && world_->cctv_settings[i2_].show_item_dropping) cctv_.logs = "\nadd_label_with_icon|small|`w" + pInfo(peer)->tankIDName + "`w " + type + "" + (extra == "" ? " " : " " + extra + " ") + "at " + to_string(newtime.tm_hour) + ":" + to_string(newtime.tm_min) + " on " + to_string(newtime.tm_mon + 1) + "/" + to_string(newtime.tm_wday) + "``|left|" + (type == "took" ? "18" : "1400") + "|";
			if (cctv_.logs != "") {
				if (world_->cctv.size() == 50) world_->cctv.erase(world_->cctv.begin() + 1);
				cctv_.x = world_->cctv_settings[i2_].x, cctv_.y = world_->cctv_settings[i2_].y;
				world_->cctv.push_back(cctv_);
			}
		}
	}
}

/*void view_inventory(ENetPeer* peer) {
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(pInfo(peer)->last_wrenched)) {
			string recently_visited = "";
			int total_items = 0;
			for (auto it = pInfo(currentPeer)->last_visited_worlds.rbegin(); it != pInfo(currentPeer)->last_visited_worlds.rend(); ++it) {
				string a_ = *it + (next(it) != pInfo(currentPeer)->last_visited_worlds.rend() ? "``, " : "``");
				recently_visited += "`#" + a_;
			}
			string inventory = "";
			for (int i_ = 0; i_ < pInfo(currentPeer)->inv.size(); i_++) {
				if (pInfo(currentPeer)->inv[i_].first == 0 || pInfo(currentPeer)->inv[i_].first == 18 || pInfo(currentPeer)->inv[i_].first == 32) continue;
				total_items++;
				inventory += "\nadd_button_with_icon|" + (pInfo(peer)->dev == 1 ? to_string(pInfo(currentPeer)->inv[i_].first) : "") + "||staticBlueFrame|" + to_string(pInfo(currentPeer)->inv[i_].first) + "|" + to_string(pInfo(currentPeer)->inv[i_].second) + "|";
			}
			string item_log = "\nadd_spacer|small|\ntext_scaling_string|aaaaaaaaaaaaaaa|";
			for (int i_ = 0; i_ < pInfo(currentPeer)->bp.size(); i_++) item_log += "\nadd_button_with_icon||" + items[pInfo(currentPeer)->bp[i_].first].name + "|frame|" + to_string(pInfo(currentPeer)->bp[i_].first) + "|" + to_string(pInfo(currentPeer)->bp[i_].second) + "|";
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|small|`0Inventory of " + get_player_nick(currentPeer) + "'s (" + pInfo(currentPeer)->requestedName + ") - #" + to_string(pInfo(currentPeer)->netID) + "|left|3802|\nadd_spacer|small|\nadd_textbox|Last visited: " + recently_visited + "|\nadd_textbox|Gems: `w" + setGems(pInfo(currentPeer)->gems) + "|\nadd_textbox|Backpack items (`w" + to_string(pInfo(currentPeer)->bp.size()) + "``):|" + (pInfo(currentPeer)->bp.size() >= 1 ? item_log + "\nadd_button_with_icon||END_LIST|noflags|0||" : "no items in backpack.") + "\ntext_scaling_string|50,000OPC|\nadd_textbox|Inventory items (`w" + to_string(total_items) + "``)|" + inventory + (inventory.empty() ? "|" : "\nadd_button_with_icon||END_LIST|noflags|0||") + "\nend_dialog|view_inventory|Continue||\nadd_quick_exit|");
			p.CreatePacket(peer);
			break;
		}
	}
}*/


string shop_string(string button, string name, string rttex, string text, int x, int y, int gems) {
	"add_button|" + button + "|" + name + "|interface/large/" + rttex + "|" + text + "|" + to_string(x) + "|" + to_string(y) + "|" + to_string(gems) + "|0|||-1|-1||-1|-1||1||||||0|0|\n";
}

void shop_tab(ENetPeer* peer, string tab) {
	struct tm newtime;
	time_t now = time(0);
	localtime_s(&newtime, &now);
	time_t currentTime;
	time(&currentTime);
	const auto localTime = localtime(&currentTime);
	string winterfestd1;
	//\nadd_banner|interface/large/titles.rttex|0|1|\nadd_button|dl|`oDiamond Lock``|interface/large/locks.rttex|`2You Get:`` 1 Diamond Lock. <CR><CR>`5Description:`` A beautiful shiny thing to lock your world!|0|3|100000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|5dl|`o5 Diamond Lock``|interface/large/locks.rttex|`2You Get:`` 5 Diamond Lock. <CR><CR>`5Description:`` A beautiful shiny thing to lock your world!|0|4|500000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|10dl|`o10 Diamond Lock``|interface/large/locks.rttex|`2You Get:`` 10 Diamond Lock. <CR><CR>`5Description:`` A beautiful shiny thing to lock your world!|0|5|1000000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|bgl|`oBlue Gem Lock``|interface/large/locks.rttex|`2You Get:`` 1 Blue Gem Lock. <CR><CR>`5Description:`` An amazing thing to lock your world!|0|0|10000000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|5bgl|`o5 Blue Gem Lock``|interface/large/locks.rttex|`2You Get:`` 5 Blue Gem Lock. <CR><CR>`5Description:`` An amazing thing to lock your world!|0|1|50000000|500000000|||-1|-1||-1|-1||1||||||0|0|\nadd_button|10bgl|`o10 Blue Gem Lock``|interface/large/locks.rttex|`2You Get:`` 10 Blue Gem Lock. <CR><CR>`5Description:`` An amazing thing to lock your world!|0|2|100000000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_banner|interface/large/titles.rttex|0|3|\nadd_button|mis|`oMagic Infused Stone``|interface/large/gachas.rttex|`2You Get:`` 1 Magic Infused Stone. <CR><CR>`5Description:`` You can get random cool items with breaking this block!|0|0|500000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|valentine_goodies|`oValentine Goodies``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 1 Valentine Goodies. <CR><CR>`5Description:`` Its time to get all of the valentine items. So buy it now! |0|4|7500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pmo|`oPure Magic Ore``|interface/large/gachas.rttex|`2You Get:`` 1 Pure Magic Ore. <CR><CR>`5Description:`` You can get random more cool items with breaking this exclusive block!|0|2|1000000|0|||-1|-1||-1|-1||1||||||0|0|
	ifstream ifsz("winterFest/calendar.txt");
	string content((std::istreambuf_iterator<char>(ifsz)), (std::istreambuf_iterator<char>()));
	int Total = atoi(content.c_str());
	float TotalPercent = (float)Total / 500;
	if (Total > 0) winterfestd1 += "\nadd_button|winterfest_calendar_2022|`oWinterfest Calendar - 2022``|interface/large/store_buttons/store_buttons34.rttex|`2You Get:`` 1 Winterfest Calendar - 2022.<CR><CR>`5Description:`` A wonderful Winterfest Calendar for 2022, jam-packed with joy and gifts to celebrate the holidays. Buying this item will give you access to exclusive Winterfest Club Items as they become available in store.|0|0|65000|0||interface/large/gui_store_button_overlays1.rttex|0|0||-1|-1||1|||||" + to_string(((int)TotalPercent < 1 ? 1 : (int)TotalPercent)) + "% remaining||0|0|";
	else winterfestd1 += "\nadd_button|winterfest_calendar_2022|`oWinterfest Calendar - 2022``|interface/large/store_buttons/store_buttons34.rttex|`2You Get:`` 1 Winterfest Calendar - 2022.<CR><CR>`5Description:`` A wonderful Winterfest Calendar for 2022, jam-packed with joy and gifts to celebrate the holidays. Buying this item will give you access to exclusive Winterfest Club Items as they become available in store.|0|0|65000|0||interface/large/gui_store_button_overlays1.rttex|0|0||-1|-1||0|interface/large/store_buttons/store_buttons34.rttex|1|0|Out of Stock||0|0|";
	string gemsshop = "\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|1|\nadd_button|deadly_mushroom|`oDeadly Mushroom``|interface/large/shop.rttex|`2You Get:`` 200 Deadly Mushroom. <CR><CR>`5Description:`` A beautiful farmable Deadly Mushroom giving 200-1400 Gems!|0|2|40000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pot_o_gems|`oPot O' Gems``|interface/large/shop.rttex|`2You Get:`` 200 Pot O' Gems. <CR><CR>`5Description:`` A beautiful farmable Pot O' Gems giving 700-2400 Gems!|0|1|190000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_banner|interface/large/titles.rttex|0|1|\nadd_button|world_lock|`oWorld Lock``|interface/large/shop.rttex|`2You Get:`` 1 World Lock.<CR><CR>`5Description:`` Become the undisputed ruler of your domain with one of these babies.  It works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.``  `wRecycles for 200 Gems.``|0|3|2000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dl|`oDiamond Lock``|interface/large/shop.rttex|`2You Get:`` 1 Diamond Lock. <CR><CR>`5Description:`` A beautiful shiny thing to lock your world!|0|4|200000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|bgl|`oBlue Gem Lock``|interface/large/shop.rttex|`2You Get:`` 1 Blue Gem Lock. <CR><CR>`5Description:`` An amazing thing to lock your world!|0|0|20000000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_banner|interface/large/titles.rttex|0|0|\nadd_button|9818|" + items[9818].ori_name + "|interface/large/store_buttons/store_gtps.rttex|`2You Get:`` 1 " + items[9818].ori_name + "<CR><CR>`5Description:`` " + items[9818].description + "|2|7|300000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|9822|" + items[9822].ori_name + "|interface/large/store_buttons/store_gtps.rttex|`2You Get:`` 1 " + items[9822].ori_name + "<CR><CR>`5Description:`` " + items[9822].description + "|2|12|300000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|9824|" + items[9824].ori_name + "|interface/large/store_buttons/store_gtps.rttex|`2You Get:`` 1 " + items[9824].ori_name + "<CR><CR>`5Description:`` " + items[9824].description + "|2|8|300000|0|||-1|-1||-1|-1||1||||||0|\nadd_banner|interface/large/titles.rttex|0|3|\nadd_button|valentines|`oValentine's Goodies``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 5 Golden Booty Chests and 1 Valentine's Card.<CR><CR>`5Description:`` Contains 5 Golden Booty Chests and a bonus Valentine's Card to share the love. Smash the Golden Booty Chests to find a random assortment of Valentine's surprises.|0|4|7500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|wishing_well|`oWell of Love``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` 1 Well of Love.<CR><CR>`5Description:`` This Well of Love grants you the one best item out of a stack of Golden Booty Chests. Once the well is full it will provide Pure Love Essence that increases the chance of getting a Golden Heart Crystal when opening Golden Booty Chests, Super Golden Booty Chests and Heartstones.|0|0|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|valentines_weather|`oWeather Machine - Valentine's``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:``1 Weather Machine - Valentine's.<CR><CR>`5Description:`` Love is in the air! Send hearts sailing through pink and fluffy skies with this adorable weather machine and everyone will know what a romantic you are! `5It's a perma-item, is never lost when destroyed.``|0|5|10000|0|||-1|-1||-1|-1||1||||||0|0|";
	string featured = "";
	string extra = "\nadd_button|fairy_light_wings|`oFairy Light Wings``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` Fairy Light Wings. <CR><CR>`5Description:`` Not only do these wings let you fly, they also light up as your make your way across town!|2|5|250000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|radical|`oRadical Rider``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` 1 Radical Rider. <CR><CR>`5Description:`` Totally Radical! Scoot across worlds with ease while looking stylish and ever so slightyl smug! Great for a /dance|0|3|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rift_wings|`oRift Wings``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Rift Wings. <CR><CR>`5Description:`` Rip a hole in the fabric of reality with these amazing Waings!|1|5|500000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rift_cape|`oRift Cape``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Rift Cape. <CR><CR>`5Description:`` Rip a hole in the fabric of reality with this amazing Cape! Create two unique looks and use a rift in time and space to change between them. Wrench yourself to customise the Cape. This item is available to buy for 2 days only and then will become available from a new Winterfest system afterwards. To avoid refund fraud, this item has been made untradeable until April 10th, 2021.|0|5|500000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|cosmic_cape|`oCosmic Cape ``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Cosmic Cape. <CR><CR>`5Description:`` The cosmic energy is even messing with our store! This Cosmic Cape can only be purchased during Night of the Comet! It grants you the power to double jump, as well as having a very tiny chance of finding whatever leftover Comet Dust inside blocks you break, even when it's not Night of the Comet.|0|6|200000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pineapple_aura|`oPineapple Aura``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` Pineapple Aura. <CR><CR>`5Description:`` Shine like the mighty pineapple! Pineapples are not known for their iridescent qualities normally, so you know this one is special!|0|7|450000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|hooves|`oHooves of Cernunnos``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 Hooves of Cernunnos. <CR><CR>`5Description:`` Will the wild in every step you take! Roots form and wither at your command!|0|4|100000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pegasus_lance|`oPegasus Lance``|interface/large/store_buttons/store_buttons36.rttex|`2You Get:`` 1 Pegasus Lance. <CR><CR>`5Description:`` A fine, feathery, lance. Made from the finest... checks notes... Horse feathers! To avoid refund fraud, this item has been made untradeble until November 3rd, 2021.|0|0|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|one_winged_angel|`oOne Winged Angel``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` One Winged Angel. <CR><CR>`5Description:`` This single wing is a symbol for all those who strive to overcome adversity, no matter what the odds|1|0|190000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ponytail|`oPowerful Ponytail Hair ``|interface/large/store_buttons/store_buttons30.rttex|`2You Get:`` 1 Powerful Ponytail Hair. <CR><CR>`5Description:``  powerful hairstyle that's punching above its weight! Bleached platinum white for perfect preparation to apply hair dye and personalise to you heart's desire.|0|3|100000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|riding_raven|`oRiding Raven``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Riding Raven. <CR><CR>`5Description:`` Only the darkest magic could breed a raven so massive that you could ride on it. And Growganoth only permits such magic during Halloween Week, so buy this now before Halloween is over! Riding on this bird gives you the ability to double jump. Only available for purchase during Halloween Week!|0|1|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zombie_horse|`oZombie Horse``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Zombie Horse. <CR><CR>`5Description:`` A zombified flaming horse to terrorize the town with! With hooves of flame, this fiery steed is perfect for the spooky season! Only available for purchase during Halloween Week.|1|3|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|1180|`oSpiritual Resonator``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Spiritual Resonator. <CR><CR>`5Description:`` Worm on the head, where it sends out signals into the great beyond, attracting friendly spirits. The ghost that follows you around when you wear this has a special ability - if you wear a pet leash on your wrist at the same time, the ghost will replace the pet, but imitate its abilities|0|0|40000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|apocalypse_scythe|`oApocalypse Scythe``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Apocalypse Scythe. <CR><CR>`5Description:`` Stolen from one of the four riders of the Apocalypse, this deadly blade is able to slice open the veil between life and death.|0|4|250000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|bumblebee|`oRiding Bumblebee``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Riding Bumblebee. <CR><CR>`5Description:`` Bumblebees are very large. Probably not so large that you can ride them, but this is a video game! Riding on this bee gives you the ability to double-jump. Only available for purchase during Easter Week!|0|0|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|balloon_bunny|`oBalloon Bunny``|interface/large/store_buttons/store_buttons26.rttex|`2You Get:`` 1 Balloon Bunny. <CR><CR>`5Description:`` Bunny bunny bunny balloon balloon balloon bunny balloon bunny balloon bunny bunny balloon balloon! You may have guessed it... this is a Balloon Bunny! With a great balloon, comes great reasons to throw balloon bunny hats at fellow Growtopians! Only available for purchase during Easter Week!|0|5|250000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ouroboros_charm|`oOuroboros Charm``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` Ouroboros Charm. <CR><CR>`5Description:`` The endless loop of life and death, personified and celebrated. Is it a charm or is it a curse?|0|3|350000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zraei|`oZraei's Dragoscarf``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Zraei's Dragoscarf. <CR><CR>`5Description:`` April 2017: Dragoscarf! This dragon clings to you, granting extra punch damage, but only if you don't have it from another source. This item can only be purchased this month! It will never return, and cannot be obtained any other way! It is tradeable, though. There is a link in the /news if you'd like to see a short clip of the item in action before purchasing.|0|5|200000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|2214|`oIce Horse``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1  Ice Horse. <CR><CR>`5Description:`` You're probably gonna wish you had spent extra for the seat heater option with this particular ride. But it's faster than walking. Sponsored by @Aimster.|0|2|40000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|snow_husky|`oSnow Husky``|interface/large/store_buttons/store_buttons25.rttex|`2You Get:`` 1 Snow Husky. <CR><CR>`5Description:`` Who wouldn't want this adorable ball of snuggly goodness following them around! This Snow Husky will be your friend forever!|0|5|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|polar_bear|`oPolar Bear Leash``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Polar Bear Leash. <CR><CR>`5Description:`` If you look out your window and see this guy, you are looking south. Or at a zoo. Or at somebody playing Growtopia.|0|3|40000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11466|`oAura Antlers``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Aura Antlers. <CR><CR>`5Description:`` A pair of enchanted antlers that glow as you punch! To avoid refund fraud, this item has been made untradeable until May 2st, 2022.|4|5|750000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10170|`oAqua Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Aqua Wings. <CR><CR>`5Description:`` Cause a splash with these Aqua Wings! They are so realistic, even a few fish have managed ro sneak into them... they are flying fish now!|0|0|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10182|`oMusical Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Musical Wings. <CR><CR>`5Description:`` Musical wings for marauding Maestros! Wrench yourself to set a tune with these equipped, then walk along to play back the tune! It's how Beethoven would have composed music if Growtopia had existed all those years ago... probably.|0|2|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10180|`oParty Plume Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Party Plume Wings. <CR><CR>`5Description:`` A wing with some serious plumage! Surprise and dazzle Growtopians with this vibrant display of color and feathers. The Peacock has to be one of nature's biggest show offs, now you can be as well as you take to the dancefloor with your party plume!|0|3|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10178|`oGrowtopia Fried Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Growtopia Fried Wings. <CR><CR>`5Description:`` Wings to make your tummy rumble! These deep fried wings are literally straight from the oven! Covered in a golden breadcrumb made with a secret mix of Growtopia herbs and spices, cooked to create the perfect balance between flavor and aerodynamics!|0|1|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|10188|`oGhoulish Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Ghoulish Wings. <CR><CR>`5Description:`` Get your Ghoul on! A mystery gas surrounds you and elevates you skyward... not sure where this gas comes from and it's probably best not to know!|1|1|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|neon_wings|`oNeon Wings``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Neon Wings. <CR><CR>`5Description:`` Light up the town in style! Don’t question how neon lights make you fly, just go with the glow and touch the sky!|1|2|200000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11290|`oRobot Lord Cape``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Robot Lord Cape. <CR><CR>`5Description:`` The famous cape of the Robot Lord, whether its just walking or punching, see why this cape is considered the most powerful by many!|3|3|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11302|`oSacred Scarf``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Sacred Scarf. <CR><CR>`5Description:`` The finest silk was once weaved for a great goddess but now it adorns your shoulders.|4|3|200000|0|||-1|-1||-1|-1||1||||||0||0|0|\nadd_button|11288|`oWyvern Wings``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Wyvern Wings. <CR><CR>`5Description:`` Not only can you jump to the heavens with these luxurious wings... you can also walk with them! To avoid refund fraud, this item has been made untradeable until February 17th, 2022.|1|4|1000000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11294|`oLucid Wings``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Lucid Wings. <CR><CR>`5Description:`` These are a pair of wings you would only see in your (lucid) dreams!|0|3|350000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11594|`oRiding Rabbid``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Riding Rabbid. <CR><CR>`5Description:`` Unknown information - unreleased item|1|0|250000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11626|`oMythic Tiger Crown``|interface/large/store_buttons/store_buttons38.rttex|`2You Get:`` 1 Mythic Tiger Crown.<CR><CR>`5Description:`` Summon the power of the White Tiger of the West with this glorious crown!|3|0|350000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11158|`oZodiac Ring``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1  Zodiac Ring. <CR><CR>`5Description:`` Harness the power of the Zodiac! This ring pulls galaxies into its core. It use that galactic power to summon Zodiac symbols, which change depending on the current Zodiac sign.|3|0|300000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|zodiac|`oZodiac Wings``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Zodiac Wings. <CR><CR>`5Description:`` The power of the Zodiac fills your body. The 12 signs align perfectly and allow you to not only reach for the stars but jump amongst them as well! When jumping a Zodiac sign bursts onto the screen, these change with the actual Zodiac Calendar. Note: These are only available until the end of PAW Week.|0|4|300000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|5190|`oNyan Hat``|game/store_gtps.rttex|`2You Get:`` `#Rare`` `2Nyan Hat``.<CR><CR>`5Description:`` `#Rare`` `2Nyan Hat`` NYAN NYAN NYAN NYAN NYAN!|0|2|500000|0|||-1|-1||-1|-1||1||||||0|0|";
	gamepacket_t p;
	p.Insert("OnStoreRequest");
	if (tab == "tab1" || tab == "tab1_1" || tab == "tab1_2" || tab == "tab1_3" || tab == "tab1_4") p.Insert("set_description_text|Welcome to the `2Growtopia Store``! Select the item you'd like more info on.`o `wWant to get `5Supporter`` status? Any Gem purchase (or `520000`` Gems earned with free `5Tapjoy`` offers) will make you one. You'll get new skin colors, the `5Recycle`` tool to convert unwanted items into Gems, and more bonuses!\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/btn_shop2.rttex||1|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/btn_shop2.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/btn_shop2.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/btn_shop2.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/btn_shop2.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/btn_shop2.rttex||0|2|0|0||||-1|-1|||0|0|" + gemsshop + featured + ""/*"\nadd_button|summer_pack|`oBeach Blast Bingo!``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:``Beach Blast, Summer Surprise and 100 Fireworks. <CR><CR>`5Description:`` It's hot out there! Don't you want to go to the beach? Now you can make your own beach with a Beach Blast device and the 100 Fireworks needed to power it. The Beach Blast creates a brand new world set up as a beach, full of cool new Summer items. As a bonus, you'll get a Summer Surprise too! (Available during Summerfest week only)|0|7|5000|0|||-1|-1||-1|-1||1||||||0|0|"*/"" + a + (tab == "tab1_1" ? "\nselect_item|gems_rain" : "\n") + "\n|0|0|\n");
	else if (tab == "tab2" || tab == "tab2_1") p.Insert("set_description_text|`2Locks And Stuff!``  Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/btn_shop2.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/btn_shop2.rttex||1|1|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/btn_shop2.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/btn_shop2.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/btn_shop2.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/btn_shop2.rttex||0|2|0|0||||-1|-1|||0|0|" + (pInfo(peer)->inv.size() < 246 ? "\nadd_button|upgrade_backpack|`0Upgrade Backpack`` (`w10 Slots``)|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 10 Additional Backpack Slots.<CR><CR>`5Description:`` Sewing an extra pocket onto your backpack will allow you to store `$10`` additional item types.  How else are you going to fit all those toilets and doors?|0|1|" + to_string(100 * ((((pInfo(peer)->inv.size() - 17) / 10) * ((pInfo(peer)->inv.size() - 17) / 10)) + 1)) + "|0|||-1|-1||-1|-1||1||||||0|0|" : "") + "\nadd_button|clothes|`oClothes Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 3 Randomly Wearble Items.<CR><CR>`5Description:`` Why not look the part? Some may even have special powers...|0|0|25|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rare_clothes|`oRare Clothes Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 3 Randomly Chosen Wearbale Items.<CR><CR>`5Description:`` Enjoy the garb of kings! Some may even have special powers...|0|1|250|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|transmutation_device|`oTransmutabooth``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Transmutabooth.<CR><CR>`5Description:`` Behold! A wondrous technological achievement from the innovative minds at GrowTech, the Transmutabooth allows you to merge clothing items, transferring the visual appearance of one onto another in the same slot! If you've ever wanted your Cyclopean Visor to look like Shades (while keeping its mod), now you can!|0|7|25000|0|||-1|-1||-1|-1||1||||||0|0|"*/""/*\nadd_button|contact_lenses|`oContact Lens Pack``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 20 Random Contact Lens Colors.<CR><CR>`5Description:`` Need a colorful new look? This pack includes 20 random Contact Lens colors (and may include Contact Lens Cleaning Solution, to return to your natural eye color)!|0|7|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|eye_drops|`oEye Drop Pack``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 `#Rare Bathroom Mirror`` and 10 random Eye Drop Colors.<CR><CR>`5Description:`` Need a fresh new look?  This pack includes a 10 random Eye Drop Colors (may include Eye Cleaning Solution, to leave your eyes sparkly clean)!|0|6|30000|0|||-1|-1||-1|-1||1||||||0|0|*/"\nadd_button|nyan_hat|`oTurtle Hat``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Turtle Hat.<CR><CR>`5Description:`` It's the greatest hat ever. It bloops out bubbles as you run! `4Not available any other way!``|0|2|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|tiny_horsie|`oTiny Horsie``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Tiny Horsie.<CR><CR>`5Description:`` Tired of wearing shoes? Wear a Tiny Horsie instead! Or possibly a large dachshund, we're not sure. Regardless, it lets you run around faster than normal, plus you're on a horse! `4Not available any other way!``|0|5|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|star_ship|`oPleiadian Star Ship``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 Pleiadian Star Ship.<CR><CR>`5Description:`` Float on, my brother. It's all groovy. This star ship can't fly, but you can still zoom around in it, leaving a trail of energy rings and moving at enhanced speed. Sponsored by Pleiadian. `4Not available any other way!``|0|3|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dragon_hand|`oDragon Hand``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Dragon Hand.<CR><CR>`5Description:`` Call forth the dragons of legend!  With the Dragon Hand, you will command your own pet dragon. Instead of punching blocks or players, you can order your dragon to incinerate them! In addition to just being awesome, this also does increased damage, and pushes other players farther. `4Not available any other way!``|0|1|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|corvette|`oLittle Red Corvette``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Little Red Corvette.<CR><CR>`5Description:`` Cruise around the neighborhood in style with this sweet convertible. It moves at enhanced speed and leaves other Growtopians in your dust. `4Not available any other way!``|0|1|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|stick_horse|`oStick Horse``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Stick Horse.<CR><CR>`5Description:`` Nobody looks cooler than a person bouncing along on a stick with a fake horse head attached. NOBODY. `4Not available any other way!``|0|3|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ambulance|`oAmbulance``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Ambulance.<CR><CR>`5Description:`` Rush to the scene of an accident while lawyers chase you in this speedy rescue vehicle. `4Not available any other way!``|0|3|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|raptor|`oRiding Raptor``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Riding Raptor.<CR><CR>`5Description:`` Long thought to be extinct, it turns out that these dinosaurs are actually alive and easily tamed. And riding one lets you run around faster than normal! `4Not available any other way!``|0|7|12500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|owl|`oMid-Pacific Owl``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Mid-Pacific Owl.<CR><CR>`5Description:`` This owl is a bit lazy - if you stop moving around, he'll land on your head and fall asleep. Dedicated to the students of the Mid-Pacific Institute. `4Not available any other way!``|0|1|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|unicorn|`oUnicorn Garland``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Unicorn Garland.<CR><CR>`5Description:`` Prance about in the fields with your very own pet unicorn! It shoots `1R`2A`3I`4N`5B`6O`7W`8S``. `4Not available any other way!``|0|4|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|starboard|`oStarBoard``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 StarBoard.<CR><CR>`5Description:`` Hoverboards are here at last! Zoom around Growtopia on this brand new model, which is powered by fusion energy (that means stars spit out of the bottom). Moves faster than walking. Sponsored by Miwsky, Chudy, and Dawid. `4Not available any other way!``|0|1|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|motorcycle|`oGrowley Motorcycle``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Growley Motorcycle.<CR><CR>`5Description:`` The coolest motorcycles available are Growley Dennisons. Get a sporty blue one today! It even moves faster than walking, which is pretty good for a motorcycle. `4Not available any other way!``|0|6|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|monkey_on_back|`oMonkey On Your Back``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Monkey On Your Back.<CR><CR>`5Description:`` Most people work really hard to get rid of these, but hey, if you want one, it's available! `4But not available any other way!`` Sponsored by SweGamerHD's subscribers, Kizashi, and Inforced. `#Note: This is a neck item, not a back item. He's grabbing your neck!``|0|2|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|carrot_sword|`oCarrot Sword``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Carrot Sword.<CR><CR>`5Description:`` Razor sharp, yet oddly tasty. This can carve bunny symbols into your foes! `4Not available any other way!`` Sponsored by MrMehMeh.|0|3|7500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|red_bicycle|`oRed Bicycle``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Red Bicycle.<CR><CR>`5Description:`` It's the environmentally friendly way to get around! Ride this bicycle at high speed hither and zither throughout Growtopia. `4Not available any other way!``|0|5|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fire_truck|`oFire Truck``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fire Truck.<CR><CR>`5Description:`` Race to the scene of the fire in this speedy vehicle! `4Not available any other way!``|0|2|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pet_slime|`oPet Slime``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Pet Slime.<CR><CR>`5Description:`` What could be better than a blob of greasy slime that follows you around? How about a blob of greasy slime that follows you around and spits corrosive acid, melting blocks more quickly than a normal punch? `4Not available any other way!``|0|4|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dabstep_shoes|`oDabstep Low Top Sneakers``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Dabstep Low Top Sneakers.<CR><CR>`5Description:`` Light up every footfall and move to a better beat with these dabulous shoes! When you're wearing these, the world is your dance floor! `4Not available any other way!``|0|2|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11588|`oWings of Daidalos``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Wings of Daidalos. <CR><CR>`5Description:`` Immortals Fenyx Rising! Glide through the sky with the wings crafted by the famous Daidalos himself. To avoid refund fraud, this item has been made untradeable until 6th June, 2022|4|6|1000000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11560|`oEzio``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Ezio. <CR><CR>`5Description:`` Assassin's Creed! Take the form of Ezio, the Leader of the Assassin Brotherhood, and challenge yourself as you take the Leap of Faith! To avoid refund fraud, this item has been made untradeable until 6th June, 2022|3|6|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11554|`oBodvar``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Bodvar. <CR><CR>`5Description:`` Brawlhalla! Take the form of Bodvar, The Unconquered Viking of Brawlhalla and place yourself as one of Valhalla's greatest champions! To avoid refund fraud, this item has been made untradeable until 6th June, 2022.|0|7|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11556|`oVal``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Val. <CR><CR>`5Description:`` Brawlhalla! Take the form of Val, The Weapon of Brawlhalla and solve the mysteries of Valhalla. To avoid refund fraud, this item has been made untradeable until 6th June, 2022.|1|7|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11558|`oSam Fisher``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Sam Fisher. <CR><CR>`5Description:`` Splinter Cell! Take the form of Sam Fisher, Splinter Cell's first field operative, as you covertly infiltrate new locations! To avoid refund fraud, this item has been made untradeable until 6th June, 2022.|2|7|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11562|`oPet Blood Dragon``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Pet Blood Dragon. <CR><CR>`5Description:`` Far Cry III : Blood Dragon! Take control of your own vicious Blood Dragon that fires neon lasers from its eyes!|2|6|250000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|dark|`oDark Assassin's Pack``|interface/large/store_buttons/store_buttons36.rttex|`2You Get:`` Dark Assassin's Pack. <CR><CR>`5Description:`` This pack contains The Brother Hood item, previously exclusive to the console versions of Growtopia. Also included are Dark Assassin's Vest, Cape, Trousers, Boots and Armguards!|0|3|1000000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11546|`oMood Mask``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Mood Mask. <CR><CR>`5Description:`` Happy? Angry? Curious? Wear this super advanced mask to tell the world how you're feeling!|1|6|500000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11132|`oNoodle Bowl Hat``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Noodle Bowl Hat. <CR><CR>`5Description:`` A fine bowl of steaming hot noodles to wear on your head. Caution though, these are delicious so everyone might want a slurp from it!|1|0|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11284|`oPaper Wasp Pet``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Paper Wasp Pet. <CR><CR>`5Description:`` Folded and creased to paper perfection. This wasp packs a very unique sting in its tail.|0|1|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11162|`oFinger Gun``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Finger Gun. <CR><CR>`5Description:`` To wield the finger gun, you must first become the gun. Old Growtopian Proverb|2|0|200000|0|||-1|-1||-1|-1||1||||||0|" + extra + "" + (tab == "tab2_1" ? "\nselect_item|upgrade_backpack" : "") + "\n");
	else if (tab == "tab3") {
		string second = "\nadd_button|signal_jammer|`oSignal Jammer``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Signal Jammer.<CR><CR>`5Description:`` Get off the grid! Install a `$Signal Jammer``! A single punch will cause it to whir to life, tireless hiding your world and its population from pesky snoopers - only those who know the world name will be able to enter. `5It's a perma-item, is never lost when destroyed.``|1|6|2000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|punch_jammer|`oPunch Jammer``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Punch Jammer.<CR><CR>`5Description:`` Tired of getting bashed around? Set up a Punch Jammer in your world, and people won't be able to punch each other! Can be turned on and off as needed. `5It's a perma-item, is never lost when destroyed.``|0|4|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zombie_jammer|`oZombie Jammer``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Zombie Jammer.<CR><CR>`5Description:`` Got a parkour or race that you don't want slowed down? Turn this on and nobody can be infected by zombie bites in your world. It does not prevent direct infection by the g-Virus itself though. `5It's a perma-item, is never lost when destroyed.``|0|5|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|surg_blast|`oSurgWorld Blast``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 SurgWorld Blast and 1 Caduceaxe.<CR><CR>`5Description:`` Your gateway to a world of medical wonders! SurgWorld is a place of care and healing, with all kinds of interesting blocks, top tips on how to treat people with surgery, and an increased chance of getting maladies while you work! Also comes with 1 Caduceaxe to extract Vaccine Drops from blocks. `6Warning:`` May break when extracting vaccine.|0|2|10000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|starship_blast|`oImperial Starship Blast``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Imperial Starship Blast.<CR><CR>`5Description:`` Command your very own Starship and explore the cosmos! This blast contains one of 3 possible Imperial ship types - which will you get? Note: Each Starship comes with a full tank of gas, an Imperial Helm - Mk. I, Imperial Reactor - Mk. I and an Imperial Viewscreen - Mk. I, so you'll be all set for your adventure among the stars! Note: A Starship also comes with an assortment of space-age blocks!|0|1|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|surg_blast|`oSurgWorld Blast``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 SurgWorld Blast and 1 Caduceaxe.<CR><CR>`5Description:`` Your gateway to a world of medical wonders! SurgWorld is a place of care and healing, with all kinds of interesting blocks, top tips on how to treat people with surgery, and an increased chance of getting maladies while you work! Also comes with 1 Caduceaxe to extract Vaccine Drops from blocks. `6Warning:`` May break when extracting vaccine.|0|2|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|bountiful_blast|`oBountiful Blast``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Bountiful Blast.<CR><CR>`5Description:`` Enter a world of fertile soil, cheerful sunshine and lush green hills, and bountiful new trees! This blast is your ticket to a different kind of farming!|0|3|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|thermo_blast|`oThermonuclear Blast``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Thermonuclear Blast.<CR><CR>`5Description:`` This supervillainous device will blast you to a new world that has been scoured completely empty - it contains nothing but Bedrock and a White Door. Remember: When using this, you are creating a NEW world by typing in a new name. It would be irresponsible to let you blow up an entire existing world.|0|5|15000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|1402|`oThermonuclear Blast``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Thermonuclear Blast.<CR><CR>`5Description:`` This supervillainous device will blast you to a new world that has been scoured completely empty - it contains nothing but Bedrock and a White Door. Remember: When using this, you are creating a NEW world by typing in a new name. It would be irresponsible to let you blow up an entire existing world.|0|5|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|antigravity_generator|`oAntigravity Generator``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Antigravity Generator.<CR><CR>`5Description:`` Disables gravity in your world when activated! Well, it reduces gravity, and lets everybody jump as much as they want! `5It's a perma-item - never lost when destroyed! `4Not available any other way!````|0|3|225000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|building_blocks_machine|`oBuilding Blocks Machine``|interface/large/store_buttons/store_buttons26.rttex|`2You Get:`` 1 Building Blocks Machine.<CR><CR>`5Description:`` Eager to add some new building materials to your construction stockpile? Tired of collecting them from random worlds and weirdos? Well, pop this beauty in your world and it'll start cranking out awesome blocks in no time! Contains the `5RARE Creepy Baby Block and Digital Dirt`` amongst a heap of other new blocks! Careful, though - blocks don't just come from nothing, and this machine will eventually run out of power once it makes a bunch!|0|3|8000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|builders_lock|`oBuilder's Lock``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Builders Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles. Wrench the lock to limit it - it can either only allow building, or only allow breaking! `5It's a perma-item, is never lost when destroyed.``|0|2|50000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|builders_lock|`oBuilder's Lock``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Builders Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles. Wrench the lock to limit it - it can either only allow building, or only allow breaking! `5It's a perma-item, is never lost when destroyed.``|0|2|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_sunny|`oWeather Machine - Sunny``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Sunny.<CR><CR>`5Description:`` You probably don't need this one... but if you ever have a desire to turn a sunset or desert world back to normal, grab a Sunny Weather Machine to restore the default Growtopia sky! `5It's a perma-item, is never lost when destroyed.``|0|5|500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_night|`oWeather Machine - Night``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Night.<CR><CR>`5Description:`` You might not call it weather, but we do! This will turn the background of your world into a lovely night scene with stars and moon. `5It's a perma-item, is never lost when destroyed.``|0|6|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_arid|`oWeather Machine - Arid``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Arid.<CR><CR>`5Description:`` Want your world to look like a cartoon desert? This will turn the background of your world into a desert scene with all the trimmings. `5It's a perma-item, is never lost when destroyed.``|0|7|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_rainy|`oWeather Machine - Rainy City``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Weather Machine - Rainy City.<CR><CR>`5Description:`` This will turn the background of your world into a dark, rainy city scene complete with sound effects. `5It's a perma-item, is never lost when destroyed.``|0|5|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_warp|`oWeather Machine - Warp Speed``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Weather Machine - Warp Speed.<CR><CR>`5Description:`` This Weather Machine will launch your world through space at relativistic speeds, which will cause you to age more slowly, as well as see stars flying by rapidly in the background. `5It's a perma-item, is never lost when destroyed.``|0|3|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|mars_blast|`oMars Blast``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Mars Blast.<CR><CR>`5Description:`` Blast off to Mars!  This powerful rocket ship will launch you to a new world set up like the surface of Mars, with a special martian sky background, and unique terrain not found elsewhere in the solar system. Mars even has lower gravity than Growtopia normally does! Remember: When using this, you are creating a NEW world by typing in a new name. You can't convert an existing world to Mars, that would be dangerous.|0|7|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|undersea_blast|`oUndersea Blast``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Undersea Blast.<CR><CR>`5Description:`` Explore the ocean!  This advanced device will terraform a new world set up like the bottom of the ocean, with a special ocean background, and special blocks like Seaweed, Coral, Jellyfish, Sharks, and maybe a special surprise... Remember, by using this you are creating a NEW world by typing in a new name. You can't convert an existing world to an ocean, that would be dangerous.|0|7|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|cave_blast|`oCave Blast``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Cave Blast.<CR><CR>`5Description:`` This explosive device will punch a hole in the ground, giving you a dark cavern to explore. There are even rumors of treasure and the entrance to ancient mines, hidden deep in the caves... but make sure you bring a World Lock. The blasted world is not locked when it's created, so lock it before somebody shows up! Remember: When using this, you are creating a NEW world by typing in a new name. You can't convert an existing world to a cave, that would be dangerous.|0|2|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_stuff|`oWeather Machine - Stuff``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Weather Machine - Stuff.<CR><CR>`5Description:`` This is the most fun weather imaginable - Choose any item from your inventory, adjust some settings, and watch it rain down from the sky! Or up, if you prefer reversing the gravity. `5It's a perma-item, is never lost when destroyed.``|0|6|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_jungle|`oWeather Machine - Jungle``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Weather Machine - Jungle.<CR><CR>`5Description:`` This weather machine will turn the background of your world into a steamy jungle. `5It's a perma-item, is never lost when destroyed.``|0|5|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|weather_backgd|`oWeather Machine - Background``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Weather Machine - Background.<CR><CR>`5Description:`` This amazing device can scan any Background Block, and will make your entire world look like it's been filled with that block. Also handy for hiding music notes! `5It's a perma-item, is never lost when destroyed.``|0|1|150000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|digital_rain_weather|`oWeather Machine - Digital Rain``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 1 Weather Machine - Digital Rain.<CR><CR>`5Description:`` Take the grow pill, and we'll show you how deep the rabbit hole goes! Splash the scrolling code of creation across the skies of your worlds. They say you learn to understand it after a while... Note: You can only have one of these per world. `5It's a perma-item, is never lost when destroyed.``|0|6|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|treasure_blast|`oTreasure Blast``|interface/large/store_buttons/store_buttons26.rttex|`2You Get:`` 1 Treasure Blast.<CR><CR>`5Description:`` Enter a world of snow-capped peaks and long-forgotten mysteries! Riddles and secrets - and a ton of treasure - await those who brave this blast's blocks! Remember, when you use this, it'll create a new world by typing in a new name! No sense in searching for clues to great treasures in well-trod worlds, is there?|0|6|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|7380|`oMonochrome Blast``|interface/large/store_buttons/store_buttons24.rttex|`2You Get:`` 1 Monochrome Blast.<CR><CR>`5Description:`` Who needs colour when you have black and white? This advanced device will terraform a new world into a monochromatic marvel, with a special monochrome background, and special monochrome blocks! Includes Rare Onyx Blocks! Remember, by using this you are creating a NEW world by typing in a new name. You can't convert an existing world to a monochrome one, that would be too desaturating.|0|0|25000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|infinity_weather_machine|`oInfinity Weather Machine``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Infinity Weather Machine.<CR><CR>`5Description:`` Imagine being able to predict the weather?! Well, with the Infinity Weather Machine you can! Add multiple Weather Machines to this machine and have them play on a loop, like a weather mix tape, kind of!|0|3|25000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|snowy|`oSnowy``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Weather Machine - Snowy. <CR><CR>`5Description:`` Winter is coming. This will turn the background of your world into a snowy mountain scene with snowflakes constantly drifting down. Only available for purchase during WinterFest! It's a perma-item, is never lost when destroyed.|0|2|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|paddy|`oWeather Machine - St. Paddy's Day``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 Weather Machine - St. Paddy's Day. <CR><CR>`5Description:`` It's Paddy Day here in Growtopia! Celebrate in style with fiddle music, floating shamrocks, rainbows, and a pot o' gold over emerald hills. This Weather Machine will let everyone know how lucky you are!|0|7|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|10286|`oWeather Machine - Celebrity Hills``|interface/large/store_buttons/store_buttons33.rttex|`2You Get:`` 1 Weather Machine - Celebrity Hills. <CR><CR>`5Description:`` It's Thanksgiving in Growtopia! Celebrate in Celebrity Hills where dreams are made! This weather machine will let everyone know how glamorous you are! It's a perma-item, is never lost when destroyed.|1|4|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|4486|`oWeather Machine - Apocalypse``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Weather Machine - Apocalypse. <CR><CR>`5Description:`` Feeling nostalgic for the end of the world? Let's bring it back! With this weather active, somebody in your world will get infected with the g-Virus every hour, and players can kill zombies in your world, with the appropriate weapon. This sensitive technology will not function while damaged.|0|2|150000|0|||-1|-1||-1|-1||1||||||0|0|\n|0|0|\n";
		p.Insert("set_description_text|`2Item Packs!``  Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/btn_shop2.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/btn_shop2.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/btn_shop2.rttex||1|3|0|0||||-1|-1|||0|0|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/btn_shop2.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/btn_shop2.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/btn_shop2.rttex||0|2|0|0||||-1|-1|||0|0|\nadd_button|world_lock|`oWorld Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 World Lock.<CR><CR>`5Description:`` Become the undisputed ruler of your domain with one of these babies.  It works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.``  `wRecycles for 200 Gems.``|0|7|2000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|world_lock_10_pack|`oWorld Lock Pack``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 10 World Locks.<CR><CR>`5Description:`` 10-pack of World Locks. Become the undisputed ruler of up to TEN kingdoms with these babies. Each works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.`` `wEach recycles for 200 Gems.``|0|3|20000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|1796|`oDiamond Lock``|game/store_gtps.rttex|`2You Get:`` 1 Diamond Lock.<CR><CR>`5Description:`` Become the undisputed ruler of your domain with one of these babies.  It works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.``  `wRecycles for 20000 Gems.``|0|1|200000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|11550|`oBlood Dragon Lock``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Blood Dragon Lock. <CR><CR>`5Description:`` Far Cry III Blood Dragon! Place this futuristic lock and transport to the world of the Blood Dragon!|3|7|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|11586|`oPrince of Persia Lock``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Prince of Persia Lock. <CR><CR>`5Description:`` Prince of Persia Lock - unreleased lock.|4|7|150000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|small_lock|`oSmall Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Small Lock.<CR><CR>`5Description:`` Protect up to `$10`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|1|3|50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|big_lock|`oBig Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Big Lock.<CR><CR>`5Description:`` Protect up to `$48`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|1|1|200|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|huge_lock|`oHuge Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Huge Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|0|4|500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|builders_lock|`oBuilder's Lock``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Builders Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles. Wrench the lock to limit it - it can either only allow building, or only allow breaking! `5It's a perma-item, is never lost when destroyed.``|0|2|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|door_pack|`oDoor And Sign Hello Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Door and 1 Sign.<CR><CR>`5Description:`` Own your very own door and sign! This pack comes with one of each. Leave cryptic messages and create a door that can open to, well, anywhere.|0|3|7|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|door_mover|`oDoor Mover``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Door Mover.<CR><CR>`5Description:`` Unsatisfied with your world's layout?  This one-use device can be used to move the White Door to any new location in your world, provided there are 2 empty spaces for it to fit in. Disappears when used. `2Only usable on a world you have World Locked.``|0|6|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|vending_machine|`oVending Machine``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Vending Machine.<CR><CR>`5Description:`` Tired of interacting with human beings? Try a Vending Machine! You can put a stack of items inside it, set a price in World Locks, and people can buy from the machine while you sit back and rake in the profits! `5It's a perma-item, is never lost when destroyed, and it is not available any other way.``|0|6|8000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|2580|`oChange of Address``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Change of Address.<CR><CR>`5Description:`` Don't like the name of your world? You can use up one of these to trade your world's name with the name of any other world that you own. You must have a `2World Lock`` in both worlds. Go lock up that empty world with the new name you want and swap away!|0|6|20000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|digi_vend|`oDigiVend Machine``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 DigiVend Machine.<CR><CR>`5Description:`` Get with the times and go digital! This wired vending machine can connect its contents to Vending Hubs AND the multiversal economy, providing a unified shopping experience along with price checks to help you sell your goods! All that, and still no human-related hassle! Use your wrench on this to stock it with an item and set a price in World Locks. Other players will be able to buy from it! Only works in World-Locked worlds.|0|2|12000|0|||-1|-1||-1|-1||1||||||0|0|"*/""/*"\nadd_button|checkout_counter|`oVending Hub - Checkout Counter``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 Vending Hub.<CR><CR>`5Description:`` Your one-stop shop! This vending hub will collect and display (and let shoppers buy) the contents of ALL DigiVends in its row or column (wrench it to set which the direction)! Wow! Now that's a shopping experience we can all enjoy! Note: Only works in World-Locked worlds.|0|3|50000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|change_addr|`oChange of Address``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Change of Address.<CR><CR>`5Description:`` Don't like the name of your world? You can use up one of these to trade your world's name with the name of any other world that you own. You must have a `2World Lock`` in both worlds. Go lock up that empty world with the new name you want and swap away!|0|6|20000|0|||-1|-1||-1|-1||1||||||0|0|"*/"" + second);
	}
	else if (tab == "tab4") p.Insert("set_description_text|`2Awesome Items!``  Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/btn_shop2.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/btn_shop2.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/btn_shop2.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/btn_shop2.rttex||1|4|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/btn_shop2.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/btn_shop2.rttex||0|2|0|0||||-1|-1|||0|0|\nadd_button|5seed|`oSmall Seed Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Small Seed Pack.<CR><CR>`5Description:`` Contains one Small Seed Pack. Open it for `$5`` randomly chosen seeds, including 1 rare seed! Who knows what you'll get?!|1|4|50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ssp_10_pack|`oSmall Seed Pack Collection``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 10 Small Seed Packs.<CR><CR>`5Description:`` Open each one for `$5`` randomly chosen seeds apiece, including 1 rare seed per pack! Who knows what you'll get?!|0|4|500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rare_seed|`oRare Seed Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 5 Randomly Chosen Rare Seeds.<CR><CR>`5Description:`` Expect some wondrous crops with these!|1|7|500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|grow_spray|`o5-pack of Grow Spray Fertilizer``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 5 Grow Spray Fertilizers.<CR><CR>`5Description:`` Why wait?!  Treat yourself to a `$5-pack`` of amazing `wGrow Spray Fertilizer`` by GrowTech Corp.  Each bottle instantly ages a tree by `$1 hour``.|0|6|100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|deluxe_grow_spray|`oDeluxe Grow Spray``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Deluxe Grow Spray.<CR><CR>`5Description:`` GrowTech's new `$Deluxe`` `wGrow Spray`` instantly ages a tree by `$24 hours`` per bottle! That's somewhere around 25 times as much as regular Grow Spray!|0|2|450|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|5764|`oOriental Spice Spray``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 1 Oriental Spice Spray. <CR><CR>`5Description:`` Packed with rich spices and wholesome powers, this spray will speed up the growth of one tree from the Chinese New Year event by 72 hours!|0|0|2500|0|||-1|-1||-1|-1||1||||||0|\nadd_button|surg|`oSurgical Kit``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 `#Rare Heart Monitor``, 1 Hospital Bed, 5 Surg-E, 5 of each of the 13 different Surical Tools and 10 Med-a-Checks.<CR><CR>`5Description:`` Get all the tools you need to become Chief of Surgery at Growtopia General Hospital! `#Rare`` Heart Monitor that lets people know when you are online, Hospital Bed that lets you perform surgery on anybody laying (or standing) on it, Med-a-Checks to identify patients with maladies, The Train-E bot to practice on, and 5 each of the thirteen different Surgical Tools you'll need to do that surgery!|0|2|12000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fishin_pack|`oFishin' Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fishing Rod, 5 Wiggly Worms, 1 Hand Drill, 1 Nuclear Detonator,  1 `#Rare Tackle Box``, 10 Fish Tanks and 1 `#Rare Fish Tank Port`` .<CR><CR>`5Description:`` Relax and sit by the shore... this pack includes a Fishing Rod, Wiggly Worms for bait, Hand Drill, Nuclear Detonator, and a `#Rare`` Tackle Box which provides you with more free bait every two days, Fish Tanks, and a `#Rare`` Fish Tank Port to put the fish you catch into your fish tank!|0|0|10000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|bountiful_seed_pack|`oBountiful Seed Pack``|interface/large/store_buttons/store_buttons28.rttex|`2You Get:`` 1 Bountiful Seed Pack.<CR><CR>`5Description:`` Contains `$5`` randomly chosen bountiful seeds, including 1 rare seed! Who knows what you'll get?!|0|4|1000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|basic_splice|`oBasic Splicing Kit``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 10 Rock Seeds and 10 Random Seeds of Rarity 2.<CR><CR>`5Description:`` The basic seeds every farmer needs.|0|3|100|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|surgical_kit|`oSurgical Kit``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 `#Rare Heart Monitor``, 1 Hospital Bed, 1 Train-E Bot, 5 of each of the 13 different Surical Tools and 10 Med-a-Checks.<CR><CR>`5Description:`` Get all the tools you need to become Chief of Surgery at Growtopia General Hospital! `#Rare`` Heart Monitor that lets people know when you are online, Hospital Bed that lets you perform surgery on anybody laying (or standing) on it, Med-a-Checks to identify patients with maladies, The Train-E bot to practice on, and 5 each of the thirteen different Surgical Tools you'll need to do that surgery!|0|2|12000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|star_supplies|`oGalactic Goodies``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 60 Star Tools and 25 Star Fuel.<CR><CR>`5Description:`` Get all the Star Tools you need to boldly go where no Growtopian has gone! Use these to help you command a starship and seek victory in the Galactic Nexus! You'll get 5 each of the 12 Star Tools you'll need to complete missions and some bonus Star Fuel to help power a Starship!|0|0|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fishin_pack|`oFishin' Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fishing Rod, 5 Wiggly Worms, 1 Hand Drill, 1 Nuclear Detonator,  1 `#Rare Tackle Box``, 10 Fish Tanks and 1 `#Rare Fish Tank Port`` .<CR><CR>`5Description:`` Relax and sit by the shore... this pack includes a Fishing Rod, Wiggly Worms for bait, Hand Drill, Nuclear Detonator, and a `#Rare`` Tackle Box which provides you with more free bait every two days, Fish Tanks, and a `#Rare`` Fish Tank Port to put the fish you catch into your fish tank!|0|0|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_training_pack|`oFish Trainin' Pack``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 2 Fish Flakes, 2 Fish Medicine, AND 1 `#Rare Training Port``.<CR><CR>`5Description:`` Get ready to train your favorite fish! Use the Training Port to put a perfect fish into your fish tank for training!|0|7|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_flakes|`oFish Flakes``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 5 Fish Flakes.<CR><CR>`5Description:`` Every fish adores these tasty flakes! Give a pinch to your Training Fish and fill their scaly bellies with aquatic goodness! Take the guesswork out of finnicky feedings with a treat you know they'll love!|0|2|7500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_medicine|`oFish Medicine``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 Fish Medicine.<CR><CR>`5Description:`` Make a sick Training Fish bright and healthy with this healing potion. One dose is enough to make even the sickest fish all better!|0|0|1500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fish_reviver|`oFish Reviver``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 `#Rare Fish Reviver``.<CR><CR>`5Description:`` Resurrect a dead Training Fish with a revivifying zap from this `#Rare`` Fish Reviver! One dose is enough to reach beyond the veil and bring a fish back from the dead! Comes with a 100% zombie-free guarantee!|0|1|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|crime_wave|`oCrime Wave``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 5 Random Superpower Cards and 1 `#Rare Crime Wave``.<CR><CR>`5Description:`` Get powered up with random Superpower Cards, and what good would that be without a `#Rare`` Crime Wave to use them on? A Crime Wave is a one-use item that calls four villains to your world for you to battle. `6Beware:`` Villains only stick around for 24 hours once they appear.|0|5|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|silkworm|`oSilkworm``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Silk Worm.<CR><CR>`5Description:`` It's the newest cuddly pet from Growtech Pharma! Thanks to genetic engineering, you can now raise your own giant mutant silkworm. They'll eat almost any food, but don't forget to give them water too! And if they get sick, you'll need to have some Antidotes on hand. `6Warning:`` `9Silkworms are living creatures. They will not live forever! Take good care of them, and enjoy them while you can.`` `4Not available any other way``.|0|7|7000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|geiger|`oGeiger Counter``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Geiger Counter.<CR><CR>`5Description:`` With this fantabulous device, you can detect radiation around you. It bleeps red, then yellow, then green as you get closer to the source. Who knows what you might find? `4Not available any other way!``|0|1|25000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zombie_pack|`oZombie Defense Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 `#Rare Sawed-Off Shotgun``, 1 Combat Vest, 1 Zombie Stompin' Boots, 3 Traffic Barricades, 1 Military Radio, 1 Antidote, 3 Toxic Waste Barrels, 3 Biohazard Signs, 3 Tombstones and 1 `#Rare Deadly G-Virus``!.<CR><CR>`5Description:`` The zombie invasion has come! Protect yourself with all the esential zombie fighting gear and best of all, you get an Antidote to cure yourself! Also includes the deadly g-Virus itself to infect your friends with!|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ssp200|`oSmall Seed Collection Pack``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` 200 Small Seed Pack. <CR><CR>`5Description:`` Open each one for 5 randomly chosen seed apiece, including 1 rare seed per pack! Who knows what you'll get?!|1|3|4500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|arm_guy|`oWaving Inflatable Arm Guy``|interface/large/store_buttons/store_buttons35.rttex|`2You Get:`` Waving Inflatable Arm Guy. <CR><CR>`5Description:`` Great for showing everyone all the amazing things you have to offer! Also just great fun to be around.|1|2|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|pegasus_chest|`oPegasus Chest``|interface/large/store_buttons/store_buttons36.rttex|`2You Get:`` 1 Pegasus Chest. <CR><CR>`5Description:`` A chest of feathery delights! What might be inside, my fair feathered friend? Use it on yourself to find out!|1|7|25000|0|||-1|-1||-1|-1||1||||||0|\nadd_button|farmable_pack|`oFarmables Pack``|game/store_gtps.rttex|`2You Get:`` 50 Chandelier, 50 Laser Grid, 50 Pepper Tree.<CR><CR>`5Description:`` Get cheap farmables for a fair price, why not?...|0|8|1000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|zombie_pack|`oZombie Defense Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 `#Rare Sawed-Off Shotgun``, 1 Combat Vest, 1 Zombie Stompin' Boots, 3 Traffic Barricades, 1 Military Radio, 1 Antidote, 3 Toxic Waste Barrels, 3 Biohazard Signs, 3 Tombstones and 1 `#Rare Deadly G-Virus``!.<CR><CR>`5Description:`` The zombie invasion has come! Protect yourself with all the esential zombie fighting gear and best of all, you get an Antidote to cure yourself! Also includes the deadly g-Virus itself to infect your friends with!|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|boo_pack|`oB.O.O. Training Pack``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 `#Rare Spectral Goggles``, 1 Neutron Gun, 1 Neutron Pack and 10 Ghost Jars <CR><CR>`5Description:`` It looks like Growtopia is under siege by ghosts! Well, the `9Battlers Of the Otherworldly`` are hiring! You'll have to earn your uniform, but this pack includes all the tools you need to actually capture ghosts! Including `#Rare`` Spectral Goggles (all the better to see them with!)and a Neutron Pack to corral the ghosts, of course 10 Ghost Jars to catch them in.|0|4|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ectojuicer|`oEctoJuicer``|interface/large/store_buttons/store_buttons20.rttex|`2You Get:`` 1 EctoJuicer.<CR><CR>`5Description:`` Infuse your muscles with the unearthly might of the Other Side! This spectral potion gives you the strength to wring every last drop of ectoplasm from a defeated Boss Ghost, granting you an EXTRA Boss Goo after a successful banishing!|0|0|30000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|ghost_hunting|`oGhost Hunter's Pack``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` At least 5 Ghost Jars and 1 Bonus Item.<CR><CR>`5Description:`` Essentials for Ghost Hunting! Guaranteed to have at least 5x Ghost Jars, plus one or more bonus items! Prizes can include: Neutron Focus Cores, Containment Field Power Nodes, EXTRA Ghost Jars, Ghost Traps, Spirit Boards, and maybe even a Dark Spirit Board!|0|7|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|chemsynth|`oChemsynth Pack``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 `#Rare Chemsynth Processor``, 10 Chemsynth Tanks and 1 Chemsynth Replicator, 1 Chemsynth Catalyst, 1 Chemsynth Solvent, 1 Chemsynth Centrifuge, 1 Chemsynth Stirrer.<CR><CR>`5Description:`` Tired of the lousy chemicals nature has to offer? Create new synthetic ones! With a `#Rare`` Chemsynth Processor, Chemsynth Tanks, and one each of the five Chemsynth tools, you can be whipping up Synthetic Chemicals in no time. `6Warning:`` Chemsynth solving is a pretty tricky puzzle, and it costs a whole bunch of the five basic chemicals (R, G, B, P, and Y) to complete.|0|4|10000|0|||-1|-1||-1|-1||1|||||"*/"|0|0|\n");
	else if (tab == "tab5") p.Insert("set_description_text|`2Weather Machines!``  Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/btn_shop2.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/btn_shop2.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/btn_shop2.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/btn_shop2.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/btn_shop2.rttex|Tired of the same sunny sky?  We offer alternatives within...|1|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/btn_shop2.rttex||0|2|0|0||||-1|-1|||0|0|\nadd_button|race_pack|`oRacing Action Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 1 Racing Start Flag, 1 Racing End Flag, 2 Checkpoints, 2 Big Old Sideways Arrows, 1 Big Old Up Arrow, 1 Big Old Down Arrow, 1 WristBand, 1 HeadBand, 1 Sports Ball Jersey and 1 Air Robinsons.<CR><CR>`5Description:`` Get all you need to host races in your worlds! You'll win the races too, with new Air Robinsons that make you run faster!|0|7|1250|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|music_pack|`oComposer's Pack``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 20 Sheet Music: Blank, 20 Sheet Music: Piano Note, 20 Sheet Music: Bass Note, 20 Sheet Music Drums, 5 Sheet Music: Sharp Piano, 5 Sheet Music: Flat Piano, 5 Sheet Music: Flat Bass and 5 Sheet Music: Sharp Bass .<CR><CR>`5Description:`` With these handy blocks, you'll be able to compose your own music, using your World-Locked world as a sheet of music. Requires a World Lock (sold separately!).|0|0|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|school_pack|`oEducation Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 10 ChalkBoards, 3 School Desks, 20 Red Bricks, 1 Bulletin Board, 10 Pencils, 1 Growtopia Lunchbox, 1 Grey Hair Bun, 1 Apple and 1 Random School Uniform Item.<CR><CR>`5Description:`` If you want to build a school in Growtopia, here's what you need!|0|0|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dungeon_pack|`oDungeon Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 20 Grimstone, 20 Blackrock Wall, 20 Iron Bars, 3 Jail Doors, 3 Skeletons, 1 Headsman's Axe, 1 Worthless Rags. 5 Torches and a `#Rare Iron Mask!``.<CR><CR>`5Description:`` Lock up your enemies in a dank dungeon! Of course they can still leave whenever they want. But they won't want to, because it looks so cool! Iron Mask muffles your speech!|0|1|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fantasy_pack|`oFantasy Pack``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Mystical Wizard Hat Seed, 1 Wizards Robe, 1 Golden Sword, 1 Elvish Longbow, 10 Barrels, 3 Tavern Signs, 3 Treasure Chests and 3 Dragon Gates.<CR><CR>`5Description:`` Hear ye, hear ye! It's a pack of magical wonders!|0|6|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|vegas_pack|`oVegas Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 10 Neon Lights, 1 Card Block Seed, 1 `#Rare Pink Cadillac`` 4 Flipping Coins, 1 Dice Block, 1 Gamblers Visor, 1 Slot Machine, 1 Roulette Wheel and 1 Showgirl Hat, 1 Showgirl top and 1 Showgirl Leggins.<CR><CR>`5Description:`` What happens in Growtopia stays in Growtopia!|0|5|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|farm_pack|`oFarm Pack``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Cow, 1 Chicken, 10 Wheat, 10 Barn Block, 10 Red Wood Walls, 1 Barn Door, 1 Straw Hat, 1 Overalls, 1 Pitchfork, 1 Farmgirl Hair, 1 `#Rare`` `2Dear John Tractor``.<CR><CR>`5Description:`` Put the `2Grow`` in Growtopia with this pack, including a Cow you can milk, a Chicken that lays eggs and a farmer's outfit. Best of all? You get a `#Rare`` `2Dear John Tractor`` you can ride that will mow down trees!|0|0|15000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|science_pack|`oMad Science Kit``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Science Station, 1 Laboratory, 1 LabCoat, 1 Combover Hair, 1 Goggles, 5 Chemical R, 10 Chemical G, 5 Chemical Y, 5 Chemical B, 5 Chemical P and 1 `#Rare`` `2Death Ray``.<CR><CR>`5Description:`` It's SCIENCE! Defy the natural order with a Science Station that produces chemicals, a Laboratory in which to mix them and a full outfit to do so safely! You'll also get a starter pack of assorted chemicals. Mix them up! Special bonus: A `#Rare`` `2Death Ray`` to make your science truly mad!|0|3|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|city_pack|`oCity Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 10 Sidewalks, 3 Street Signs, 3 Streetlamps, 10 Gothic Building tiles, 10 Tenement Building tiles, 10 Fire Escapes, 3 Gargoyles, 10 Hedges, 1 Blue Mailbox, 1 Fire Hydrant and A `#Rare`` `2ATM Machine``.<CR><CR>`5Description:`` Life in the big city is rough but a `#Rare`` `2ATM Machine`` that dishes out gems once a day is very nice!|0|0|8000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|west_pack|`oWild West Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Cowboy Hat, 1 Cowboy Boots, 1 War Paint, 1 Face Bandana, 1 Sheriff Vest, 1 Layer Cake Dress,  1 Corset, 1 Kansas Curls, 10 Western Building 1 Saloon Doors, 5 Western Banners, 1 Buffalo, 10 Rustic Fences, 1 Campfire and 1 Parasol.<CR><CR>`5Description:`` Yippee-kai-yay! This pack includes everything you need to have wild time in the wild west! The Campfire plays cowboy music, and the `#Parasol`` lets you drift down slowly. Special bonus: A `#Rare`` `2Six Shooter`` to blast criminals with!|0|2|4000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|astro_pack|`oAstro Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Astronaut Helmet, 1 Space Suit, 1 Space Pants, 1 Moon Boots, 1 Rocket Thruster, 1 Solar Panel, 6 Space Connectors, 1 Porthole, 1 Compu Panel, 1 Forcefield and 1 `#Rare`` `2Zorbnik DNA``.<CR><CR>`5Description:`` Boldly go where no Growtopian has gone before with an entire Astronaut outfit. As a special bonus, you can have this `#Rare`` `2Zorbnik DNA`` we found on a distant planet. It doesn't do anything by itself, but by trading with your friends, you can collect 10 of them, and then... well, who knows?|0|6|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|prehistoric_pack|`oPrehistoric Pack``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Caveman Club, 1 Cave Woman Hair, 1 Caveman Hair, 1 Sabertooth Toga, 1 Fuzzy Bikini Top, 1 Fuzzy Bikni Bottom, 1 Cavewoman Outfit, 10 Cliffside, 5 Rock Platforms, 1 Cave Entrance, 3 Prehistoric Palms and 1 `#Rare Sabertooth Growtopian``.<CR><CR>`5Description:`` Travel way back in time with this pack, including full Caveman and Cavewoman outfits and `#Rare Sabertooth Growtopian`` (that's a mask of sorts). Unleash your inner monster!|0|0|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|shop_pack|`oShop Pack``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 4 Display Boxes, 1 For Sale Sign, 1 Gem Sign, 1 Exclamation Sign, 1 Shop Sign, 1 Open Sign, 1 Cash Register, 1 Mannequin and 1 Security Camera.<CR><CR>`5Description:`` Run a fancy shop with these new items! Advertise your wares with an Open/Closed Sign you can switch with a punch, a Cash Register, a Mannequin you can dress up to show off clothing, and a `#Rare`` Security Camera, which reports when people enter and take items!|0|7|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|home_pack|`oHome Pack``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Television, 4 Couches, 2 Curtains, 1 Wall Clock, 1 Microwave, 1 Meaty Apron, 1 Ducky Pants, 1 Ducky top and 1 Eggs Benedict.<CR><CR>`5Description:`` Welcome home to Growtopia! Decorate with a Television, Window Curtains, Couches, a `#Rare`` Wall Clock that actually tells time, and a Microwave to cook in. Then dress up in a Meaty Apron and Ducky Pajamas to sit down and eat Eggs Benedict, which increases the amount of XP you earn!|0|6|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|cinema_pack|`oCinema Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Clapboard, 1 Black Beret, 1 3D Glasses, 6 Theater Curtains, 6 Marquee Blocks, 1 Director's Chair, 4 Theater Seats, 6 Movie Screens, 1 Movie Camera and 1 `#Rare GHX Speaker``.<CR><CR>`5Description:`` It's movie time! Everything you need for the big screen experience including a `#Rare GHX Speaker`` that plays the score from Growtopia: The Movie.|0|2|3000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|adventure_pack|`oAdventure Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 4 Gateways to Adventure, 4 Path Markers, 1 Lazy Cobra, 1 Adventure Brazier, 4 Adventure Barriers, 1 Rope, 1 Torch, 1 Key, 1 Golden Idol, 1 `#Rare Adventuring Mustache``, 1 Explorer's Ponytail and 1 Sling Bag .<CR><CR>`5Description:`` Join Dr. Exploro and her father (also technically Dr. Exploro) as they seek out adventure! You can make your own adventure maps with the tools in this pack.|0|7|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|rockin_pack|`oRockin' Pack``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 3 `#Rare Musical Instruments`` Including A Keytar, a Bass Guitar and Tambourine, 1 Starchild Make Up, 1 Rockin' Headband, 1 Leopard Leggings, 1 Shredded Ts-Shirt, 1 Drumkit, 6 Stage Supports, 6 Mega Rock Speakers and 6 Rock n' Roll Wallpaper.<CR><CR>`5Description:`` ROCK N' ROLL!!! Play live music in-game! We Formed a Band! Growtopia makes me want to rock out.|0|0|4999|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|game_pack|`oGame Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 `#Rare Game Generator``,  4 Game Blocks, 4 Game Flags, 4 Game Graves and 4 Game Goals.<CR><CR>`5Description:`` Growtopia's not all trading and socializing! Create games for your friends with the Game Pack (and a lot of elbow grease).|0|6|50000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|superhero|`oSuperhero Pack``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Mask, 1 Shirt, 1 Boots, 1 Tights, 1 Cape, `#Rare Super Logos`` or `#Rare Utility Belt`` and 1 `2Phone Booth``.<CR><CR>`5Description:`` Battle the criminal element in Growtopia with a complete random superhero outfit including a cape that lets you double jump. Each of these items comes in one of six random colors. You also get one of 5 `#Rare`` Super Logos, which automatically match the color of any shirt you wear or a `#Rare`` Utility Belt... of course use the `2Phone Booth`` to change into your secret identity!|0|0|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|fashion_pack|`oFashion Pack``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 3 Random Clothing Items, 3 Jade Blocks and 1 `#Rare Spotlight``.<CR><CR>`5Description:`` The hottest new looks for the season are here now with 3 random Fashion Clothing (dress, shoes, or purse), Jade Blocks to pose on, and a `#Rare`` Spotlight to shine on your fabulousness.|0|0|3000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|sportsball_pack|`oSportsball Pack``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 2 Basketball Hoops, 2 Sporty Goals, 5 Stadiums, 5 Crowded Stadiums, 10 Field Grass, 1 Football Helmet, 1 Growies Cap, 1 Ref's Jersey, 1 World Cup Jersey, 1 `#Rare Sports Item`` or `#Rare Growmoji!``.<CR><CR>`5Description:`` We like sports and we don't care who knows! This pack includes everything you need to get sporty! Use the Sports Items to launch Sportsballs at each other.|0|1|10000|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|firefighter|`oFirefighter Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Yellow Helmet, 1 Yellow Jacket, 1 Yellow Pants, 1 Firemans Boots, 1 Fire Hose, and 1 `#Rare Firehouse`` .<CR><CR>`5Description:`` Rescue Growtopians from the fire! Includes a full Yellow Firefighter Outfit, Fire Hose and a `#Rare Firehouse``, which will protect your own world from fires.|0|1|5000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|steampack|`oSteampack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 10 Steam Tubes, 2 Steam Stompers, 2 Steam Organs, 2 Steam Vents, 2 Steam Valves and 1 `#Rare Steampunk Top Hat``.<CR><CR>`5Description:`` Steam! It's a wondrous new technology that lets you create paths of Steam Blocks, then jump on a Steam Stomper to launch a jet of steam through the path, triggering steam-powered devices. Build puzzles, songs, parkour challenges, and more!|0|6|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|paintbrush|`oPainter's Pack``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 `#Rare Paintbrush`` and 20 Random Colored Paint Buckets.<CR><CR>`5Description:`` Want to paint your world? This pack includes 20 buckets of random paint colors (may include Varnish, to clean up your messes)! You can paint any block in your world different colors to personalize it.|0|1|15000|0|||-1|-1||-1|-1||1||||||0|0|"/*"\nadd_button|paleo_kit|`oPaleontologist's Kit``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 5 Fossil Brushes, 1 Rock Hammer, 1 Rock Chisel, 1 Blue Hardhat and 1 `#Rare Fossil Prep Station``.<CR><CR>`5Description:`` If you want to dig up fossils, this is the kit for you! Includes everything you need! Use the prepstation to get your fossils ready for display.|0|0|10000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|robot_starter_pack|`oCyBlocks Starter Pack``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 `5Rare ShockBot`` and 10 random movement commands.<CR><CR>`5Description:`` CyBlocks Starter Pack includes one `5Rare`` ShockBot and 10 random movement commands to use with it. `5ShockBot`` is a perma-item, is never lost when destroyed.|0|6|2500|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|robot_command_pack|`oCyBlocks Command Pack``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 10 Random CyBlock Commands.<CR><CR>`5Description:`` Grants 10 random CyBlock Commands to help control your CyBots!|0|2|1000|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|robot_pack|`oCyBot Pack``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 1 `5Rare CyBot``!<CR><CR>`5Description:`` Grants one random `5Rare`` CyBot! Use CyBlock Commands to send these mechanical monsters into action! `5Note: Each CyBot is a perma-item, and will never be lost when destroyed.``|0|3|7500|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|gang_pack|`oGangland Style``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 1 Fedora, 1 Dames Fedora, 1 Pinstripe Suit with Pants, 1 Flapper Headband with Dress, 1 Cigar, 1 Tommy Gun, 1 Victola and 10 Art Deco Blocks .<CR><CR>`5Description:`` Step into the 1920's with a Complete Outfit, a Tommygun, a Victrola that plays jazz music, and 10 Art Deco Blocks. It's the whole package!|0|6|2500|0|||-1|-1||-1|-1||1||||||0|0|\n|0|0|\n");
	//else if (tab == "tab6") p.Insert("set_description_text|`2Spend your Growtokens!`` (You have `50``) You earn Growtokens from Crazy Jim and Sales-Man. Select the item you'd like more info on, or BACK to go back.\nenable_tabs|1\nadd_tab_button|main_menu|Home|interface/large/btn_shop2.rttex||0|0|0|0||||-1|-1|||0|0|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/btn_shop2.rttex||0|1|0|0||||-1|-1|||0|0|\nadd_tab_button|itempack_menu|Item Packs|interface/large/btn_shop2.rttex||0|3|0|0||||-1|-1|||0|0|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/btn_shop2.rttex||0|4|0|0||||-1|-1|||0|0|\nadd_tab_button|weather_menu|Weather Machines|interface/large/btn_shop2.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1|||0|0|\nadd_tab_button|token_menu|Growtoken Items|interface/large/btn_shop2.rttex||1|2|0|0||||-1|-1|||0|0|"/*"\nadd_button|challenge_timer|`oChallenge Timer``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Challenge Timer.<CR><CR>`5Description:`` Get more people playing your parkours with this secure prize system. You'll need a `#Challenge Start Flag`` and `#Challenge End Flag`` as well (not included). Stock prizes into the Challenge Timer, set a time limit, and watch as players race from start to end. If they make it in time, they win a prize!|0|5|-2|0|||-1|-1||-1|-1||1||||||0|0|"*/"\nadd_button|xp_potion|`oExperience Potion``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Experience Potion.<CR><CR>`5Description:`` This `#Untradeable`` delicious fizzy drink will make you smarter! 10,000 XP smarter instantly, to be exact.|0|2|-5|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|megaphone|`oMegaphone``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Megaphone.<CR><CR>`5Description:`` You like broadcasting messages, but you're not so big on spending gems? Buy a Megaphone with Growtokens! Each Megaphone can be used once to send a super broadcast to all players in the game.|0|7|-1|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|i_love_dirt_shirt|`oI love Dirt Shirt``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 I love Dirt Shirt.<CR><CR>`5Description:`` Some people like things to be clean, you're not one of them are you? This item is `#Untradeable``.|4|0|-5|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|growmoji_pack|`oGrowmoji Mystery Box``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 1 Growmoji.<CR><CR>`5Description:`` Express yourself! This mysterious box contains one of five fun growmojis you can use to spice up your chat! Which will you get?|0|1|-7|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|mini_mod|`oMini-Mod``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Mini-Mod.<CR><CR>`5Description:`` Oh no, it's a Mini-Mod! Punch him to activate (you'll want to punch him!). When activated, he won't allow anyone to drop items in your world.|0|0|-10|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|derpy_star|`oDerpy Star Block``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Derpy Star Block.<CR><CR>`5Description:`` DER IM A SUPERSTAR. This is a fairly ordinary block, except for the derpy star on it. Note: it is not permanent, and it doesn't drop seeds. So use it wisely!|0|3|-15|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|2218|`oMighty Snow Rod``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Mighty Snow Rod.<CR><CR>`5Description:`` Become the living embodiment of the winter with this deadly weapon! It blasts bricks with frost, smashing them more easily than a punch. Buy it today, before WinterFest ends and you can't get it for another year! Sponsored by iiStyloMilo, Bambam46, and MartinMan007's Subscribers.|0|4|-15|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|dirt_gun|`oBLYoshi's Free Dirt``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 BLYoshi's Free Dirt.<CR><CR>`5Description:`` \"Free\" might be stretching it, but hey, once you buy this deadly rifle, you can spew out all the dirt you want for free! Note: the dirt is launched at high velocity and explodes on impact. Sponsored by BLYoshi.|0|4|-20|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|nothingness|`oWeather Machine - Nothingness``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Weather Machine - Nothingness.<CR><CR>`5Description:`` Tired of all that fancy weather?  This machine will turn your world completely black. Yup, that's it. Not a single pixel in the background except pure blackness.|0|3|-25|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|spike_juice|`oSpike Juice``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Spike Juice.<CR><CR>`5Description:`` It's fresh squeezed, with little bits of spikes still in it! Drinking this `#Untradeable`` one-use potion will make you immune to Death Spikes and Lava for 5 seconds.|0|5|-30|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|doodad|`oDoodad``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Doodad.<CR><CR>`5Description:`` I have no idea what this thing does. It's something electronic? Maybe?|0|5|-37|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|crystal_cape|`oCrystal Cape``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Crystal Cape.<CR><CR>`5Description:`` This cape is woven of pure crystal, which makes it pretty uncomfortable. But it also makes it magical! It lets you double-jump off of an imaginary Crystal Block in mid-air. Sponsored by Edvoid20, HemeTems, and Aboge.|0|5|-45|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|focused_eyes|`oFocused Eyes``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Focused Eyes.<CR><CR>`5Description:`` This `#Untradeable`` item lets you shoot electricity from your eyes! Wear them with pride, and creepiness.|0|4|-50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|grip_tape|`oGrip Tape``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Grip Tape.<CR><CR>`5Description:`` This is handy for wrapping around the handle of a weapon or tool. It can improve your grip, as well as protect you from cold metal handles. If you aren't planning to craft a weapon that requires Grip Tape, this does you no good at all!|0|5|-50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|cat_eyes|`oCat Eyes``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Cat Eyes.<CR><CR>`5Description:`` Wow, pawesome! These new eyes are the cat's meow, and the purrfect addition to any style.|0|5|-50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|riding_cloud|`oRiding Cloud``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Riding Cloud.<CR><CR>`5Description:`` Bringing the sky to the ground! This item is `#Untradeable``.|3|1|-50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|grow_boy|`oGrowBoy``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Growboy.<CR><CR>`5Description:`` Bask in the nostalgic green screened goodness of the Growboy! A portable gaming device that packs a punch. Now you're playing with GrowPower! Note: The Growboy is `#UNTRADEABLE``.|0|2|-50|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|night_vision|`oNight Vision Goggles``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Night Vision Goggles.<CR><CR>`5Description:`` Scared of the dark? We have a solution. You can wear these goggles just to look cool, but if you also happen to have a D Battery (`4batteries not included``) on you, you will be able to see through darkness like it's not even there! Each D Battery can power your goggles for 1 minute. `2If you are in a world you own, the goggles will not require batteries!`` Note: you can't turn the goggles off without removing them, so you'll be wasting your battery if you wear them in daylight while carrying D Batteries.|0|3|-55|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|muddy_pants|`oMuddy Pants``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Muddy Pants.<CR><CR>`5Description:`` Well, this is just a pair of muddy pants. But it does come with a super secret bonus surprise that is sure to blow your mind!|0|7|-62|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|piranha|`oCuddly Piranha``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Cuddly Piranha.<CR><CR>`5Description:`` This friendly pet piranha won't stay in its bowl!  It just wants to snuggle with your face!|0|0|-75|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|tsed|`oTactical Stealth Espionage Device``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Tactical Stealth Espionage Device.<CR><CR>`5Description:`` This is Growtech's latest innovation on tactical espionage! Using the latest in scientific breakthroughs this device allows you to seamlessly disguise yourself as... a cardboard box! Note: The Tactical Stealth Espionage Device is `#UNTRADEABLE``.|0|1|-75|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|puddy_leash|`oPuddy Leash``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Puddy Leash.<CR><CR>`5Description:`` Puddy is a friendly little kitten who will follow you around forever.|0|7|-90|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|anime_action_hair|`oAnime Action Hair``|interface/large/store_buttons/store_buttons37.rttex|`2You Get:`` 1 Anime Action Hair.<CR><CR>`5Description:`` Lights, camera, ANIME ACTION HAIR! Feel the power from root to tip every time you punch! This item is `#Untradeable``.|4|1|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|golden_axe|`oGolden Pickaxe``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Golden Pickaxe.<CR><CR>`5Description:`` Get your own sparkly pickaxe! This `#Untradeable`` item is a status symbol! Oh sure, it isn't any more effective than a normal pickaxe, but it sparkles!|0|1|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|puppy_leash|`oPuppy Leash``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Puppy Leash.<CR><CR>`5Description:`` Get your own pet puppy! This little dog will follow you around forever, never wavering in her loyalty, thus making her `#Untradeable``.|0|4|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|diggers_spade|`oDigger's Spade``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Digger's Spade.<CR><CR>`5Description:`` This may appear to be a humble shovel, but in fact it is enchanted with the greatest magic in Growtopia. It can smash Dirt or Cave Background in a single hit! Unfortunately, it's worthless at digging through anything else. Note: The spade is `#UNTRADEABLE``.|0|7|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|meow_ears|`oMeow Ears``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 1 Meow Ears.<CR><CR>`5Description:`` Meow's super special ears that everyone can now get! Note: These ears are `#UNTRADEABLE``.|0|0|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|frosty_hair|`oFrosty Hair``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Frosty Hair.<CR><CR>`5Description:`` Coldplay is cold, but you can be freezing! Note: The frosty hair is `#UNTRADEABLE``.|0|0|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|zerkon_helmet|`oEvil Space Helmet``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Evil Space Helmet.<CR><CR>`5Description:`` Zerkon commands a starship too small to actually board - pah, time to rule the galaxy properly! Note: The evil space helmet is `#UNTRADEABLE``.|0|6|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|seils_magic_orb|`oSeil's Magic Orbs``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Seil's Magic Orbs.<CR><CR>`5Description:`` Seil is some kind of evil wizard, now you can be too! Note: These magic orbs are `#UNTRADEABLE``.|0|7|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|atomic_shadow_scythe|`oAtomic Shadow Scythe``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Atomic Shadow Scythe.<CR><CR>`5Description:`` AtomicShadow might actually be evil, now you can try it out! Note: The shadow scythe is `#UNTRADEABLE``.|0|5|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|poseidon_diggers_trident|`oPoseidon's Digger's Trident``|interface/large/store_buttons/store_buttons25.rttex|`2You Get:`` 1 Poseidon's Digger's Trident.<CR><CR>`5Description:`` A gift from the gods. This may appear to be a humble trident, but in fact it has the power of Poseidon himself. It can smash `8Deep Sand`` or `8Ocean Rock`` in a single hit. Unfortunately, you don't get to wield the full might of Poseidon... the trident is worthless at smashing anything else. Note: The trident is `#UNTRADEABLE``.|0|6|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|really_dangerous_pet_llama|`oReally Dangerous Pet Llama``|interface/large/store_buttons/store_buttons32.rttex|`2You Get:`` 1 Really Dangerous Pet Llama.<CR><CR>`5Description:`` This Llama is ready for anything Growtopia throws at it! Armed with a silo of Growtech Missiles, experimental Growtech hardened steel armor and a rather snazzy helmet (Llama's own) this Llama is Dangerous with a capital D! Note: This Really Dangerous Pet Llama is `#UNTRADEABLE``.|0|0|-100|0|||-1|-1||-1|-1||1||||||0|0|\nadd_button|leopard_shawl|`oSnow Leopard Shawl``|interface/large/store_buttons/store_buttons34.rttex|`2You Get:`` 1 Snow Leopard Shawl.<CR><CR>`5Description:`` Made of the finest Faux Snow Leopard Fur. This Shawl is infused with the spirit of a mighty Snow Leopard!|1|4|-100|0|||-1|-1||-1|-1||1||||||0|0|\n|0|0|\n");
	p.CreatePacket(peer);
}

string GetChTime() {
	long long int hour, cas = ch_time;
	if (cas > 60) hour = cas / 3600;
	else hour = 0;
	return "" + to_string(5 - hour) + " hours and " + to_string(59 - cas) + " minutes";
}

//memleak risk: sort challenge data

string colorshit(int count) {
	if (count == 1) return "3344281855";
	else if (count >= 2 && count < 4) return "2571208703";
	else if (count >= 4 && count < 6) return "1999858431";
	else if (count >= 6) return "2033478655";
}
void world_menu(ENetPeer* peer) {
	long long time_now = time(nullptr);
	int wa_c = 0, sa_c = 0, neta_ = 0, aa = 0;
	if (last_active_update - time_now <= 0 or active_worlds.size() < 5) {
		last_active_update = time_now + 60; // 60 tai 1min
		active_worlds.clear();
		for (int i_ = 0; i_ < worlds.size(); i_++) {
			World world_ = worlds.at(i_);
			/*	if (world_.nuked or not check_name(peer, world_.name)) {
					continue;
				}*/
			if (find(active_worlds.begin(), active_worlds.end(), world_.name) == active_worlds.end()) active_worlds.push_back(world_.name);
		}
	}
	int w_c2 = 0, s_c2 = 0, net_2 = 0, a2 = 0;
	get_players("CASINO", w_c2, s_c2, net_2, a2);

	int w_c3 = 0, s_c3 = 0, net_3 = 0, a3 = 0;
	get_players("START", w_c3, s_c3, net_3, a3);

	string recently_visited = "", c_active_worlds = "";
	int ck = 0;
	c_active_worlds = "\nadd_floater|START|" + to_string(w_c3) + "|0.6|3412738303\nadd_floater|CASINO|" + to_string(w_c2) + "|0.6|3412738303";
	for (auto it = pInfo(peer)->last_visited_worlds.rbegin(); it != pInfo(peer)->last_visited_worlds.rend(); ++it) {
		if (find(active_worlds.begin(), active_worlds.end(), *it) == active_worlds.end() && ck < 3) {
			int w_c = 0, s_c = 0, net_ = 0, a = 0;
			get_players(*it, w_c, s_c, net_, a);
			recently_visited += "\nadd_floater|" + *it + "|" + to_string(w_c) + "|0.5|3417414143";
			ck++;
		}
	} for (int i_ = 0; i_ < active_worlds.size(); i_++) {
		string name_ = active_worlds.at(i_);
		vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			if (name_ == "START" || name_ == "CASINO") continue;
			World* world_ = &worlds.at(p - worlds.begin());
			if (find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) == world_->active_jammers.end()) {
				int w_c = 0, s_c = 0, net_ = 0, a = 0;
				get_players(active_worlds.at(i_), w_c, s_c, net_, a);
				if (w_c > 0) {
					double size = 0.50;
					size -= 0.03 * w_c;
					if (size < 0.35) size = 0.35;
					c_active_worlds += "\nadd_floater|" + active_worlds.at(i_) + "|" + to_string(w_c) + "|" + to_string(size) + "|" + colorshit(w_c) + "";
				}
			}
		}
	}

	gamepacket_t p;
	p.Insert("OnRequestWorldSelectMenu");
	p.Insert("" + c_active_worlds + recently_visited + "\n");
	p.CreatePacket(peer);
	int w_c = 0, s_c = 0, net_ = 0, a = 0;
	get_players("START", w_c, s_c, net_, a);
	gamepacket_t p5;
	p5.Insert("OnConsoleMessage"), p5.Insert("Where would you like to go? (`w" + setGems(s_c * 2 - 1) + "`` online)"), p5.CreatePacket(peer);
	if (gem_event != 1 && gem_event != 0) {
		gamepacket_t p6;
		p6.Insert("OnConsoleMessage");
		p6.Insert("`3There is `c" + to_string(gem_event) + "x Extra Gems Event`3 is going on for short time!");
		p6.CreatePacket(peer);
	}
	ofstream write_new_online("online.txt");
	write_new_online << setGems(s_c * 2 - 1);
	write_new_online.close();
}
string cleanup_(string strText) {
	string temp = "";
	for (int i = 0; i < strText.size(); ++i) {
		if ((strText[i] >= 'a' && strText[i] <= 'z') || (strText[i] >= 'A' && strText[i] <= 'Z')) {
			temp = temp + strText[i];
		}
		else {
			temp = temp + " ";
		}
	}
	return temp;
}
bool has_playmod(Player* p_, string name_) {
	name_ = replace_str2(cleanup_(to_lower(name_)), " ", "_");
	vector<string> player_playmods{};
	player_playmods.push_back(items[p_->hair].playmod);
	player_playmods.push_back(items[p_->shirt].playmod);
	player_playmods.push_back(items[p_->pants].playmod);
	player_playmods.push_back(items[p_->feet].playmod);
	player_playmods.push_back(items[p_->face].playmod);
	player_playmods.push_back(items[p_->hand].playmod);
	player_playmods.push_back(items[p_->back].playmod);
	player_playmods.push_back(items[p_->mask].playmod);
	player_playmods.push_back(items[p_->necklace].playmod);
	player_playmods.push_back(items[p_->ances].playmod);
	if (p_->ghost) player_playmods.push_back("Ghost in the Shell");
	if (p_->b_s != 0) player_playmods.push_back("Duct Tape");
	for (int i_ = 0; i_ < player_playmods.size(); i_++) {
		if (player_playmods[i_].empty()) continue;
		string playmod = replace_str2(cleanup_(to_lower(player_playmods[i_])), " ", "_");
		if (playmod.find(name_) != string::npos)
			return true;
	} for (PlayMods peer_playmod : p_->playmods) {
		for (vector<string> get_ : info_about_playmods) {
			uint32_t playmod_id = atoi(get_[0].c_str());
			if (playmod_id == peer_playmod.id) {
				string playmod_name = replace_str2(cleanup_(to_lower(get_[2])), " ", "_");
				if (playmod_name.find(name_) != string::npos) {
					return true;
				}
			}
		}
	}
	return false;
}
int form_state(Player* p_) {
	int state_ = 0;
	state_ |= has_playmod(p_, "Ghost in the Shell") << 0;
	state_ |= has_playmod(p_, "double jump") << 1;
	state_ |= has_playmod(p_, "Spirit Form") << 1;
	state_ |= has_playmod(p_, "hoveration!") << 1;
	state_ |= has_playmod(p_, "aurora") << 1;
	state_ |= has_playmod(p_, "The One Ring") << 2;
	state_ |= has_playmod(p_, "Mark of Growganoth") << 4;
	state_ |= has_playmod(p_, "Halo!") << 7;
	state_ |= has_playmod(p_, "duct tape") << 13;
	state_ |= has_playmod(p_, "Lucky") << 15;
	state_ |= has_playmod(p_, "Irradiated") << 19;
	state_ |= p_->spotlight << 20;
	state_ |= p_->hs << 24;

	if (has_playmod(p_, "Lupus")) p_->surgery_type = 28;
	if (has_playmod(p_, "Moldy Guts")) p_->surgery_type = 25;
	if (has_playmod(p_, "Ecto-Bones")) p_->surgery_type = 24;
	if (has_playmod(p_, "Chaos Infection")) p_->surgery_type = 27;
	if (has_playmod(p_, "Fatty Liver")) p_->surgery_type = 26;
	if (has_playmod(p_, "Brainworms")) p_->surgery_type = 23;
	if (has_playmod(p_, "Antidote!")) {
		for (int i_ = 0; i_ < p_->playmods.size(); i_++) {
			if (p_->playmods[i_].id == 41 || p_->playmods[i_].id == 49 || p_->playmods[i_].id == 48 || p_->playmods[i_].id == 71 || p_->playmods[i_].id == 72 || p_->playmods[i_].id == 73 || p_->playmods[i_].id == 4 || p_->playmods[i_].id == 16 || p_->playmods[i_].id == 17 || p_->playmods[i_].id == 19 || p_->playmods[i_].id == 27 || p_->playmods[i_].id == 42) p_->playmods[i_].time = 1;
		}
	}
	for (PlayMods peer_playmod : p_->playmods) {
		for (vector<string> get_ : info_about_playmods) {
			uint32_t playmod_id = atoi(get_[0].c_str());
			if (playmod_id == peer_playmod.id) {
				string playmod_name = get_[2];
				if (not get_[6].empty()) {
					uint32_t special_id = atoi(get_[6].c_str());
					if (special_id != 0) {
						state_ |= true << special_id;
					}
				}
				break;
			}
		}
	}
	return state_;
}
string process_till(std::string const& s)
{
	std::string::size_type pos = s.find('/');
	if (pos != std::string::npos)
	{
		return s.substr(0, pos);
	}
	else
	{
		return s;
	}
}
int form_type_player(Player* p_) {
	int state_ = 0;
	state_ |= has_playmod(p_, "Red Winterfest Crown!") << 0;
	state_ |= has_playmod(p_, "Green Winterfest Crown!") << 1;
	state_ |= has_playmod(p_, "Silver Winterfest Crown!") << 2;
	state_ |= has_playmod(p_, "Gold Winterfest Crown!") << 3;
	if (p_->hand == 6028) state_ |= 1 << 10;
	if (p_->necklace == 6120) state_ |= 1 << 12;
	if (p_->hand == 6262) state_ |= 1 << 13;
	return state_;
}
void update_clothes(ENetPeer* peer) {
	if (pInfo(peer)->world == "") return;
	gamepacket_t p(0, pInfo(peer)->netID);
	p.Insert("OnSetClothing");
	p.Insert((float)pInfo(peer)->hair, (float)pInfo(peer)->shirt, (float)pInfo(peer)->pants); // hair shirt pants
	p.Insert((float)pInfo(peer)->feet, (float)pInfo(peer)->face, (float)pInfo(peer)->hand); // feet face hand 
	p.Insert((float)pInfo(peer)->back, (float)pInfo(peer)->mask, (float)pInfo(peer)->necklace); // back mask neck

	bool set_skin = false;
	for (PlayMods peer_playmod : pInfo(peer)->playmods) {
		if (set_skin) break;
		for (vector<string> get_ : info_about_playmods) {
			uint32_t playmod_id = atoi(get_[0].c_str());
			if (playmod_id == peer_playmod.id) {
				string playmod_name = get_[2];
				string special_id = get_[8];
				if (not special_id.empty()) {
					char* endptr = NULL;
					unsigned int skin_ = strtoll(special_id.c_str(), &endptr, 10);
					p.Insert((pInfo(peer)->ghost ? -2450 : skin_));
					set_skin = true;
				}
				break;
			}
		}
	} if (not set_skin) {
		p.Insert((pInfo(peer)->ghost ? -2450 : (has_playmod(pInfo(peer), "ninja stealth") ? 1684300950 : pInfo(peer)->skin))); // 1684300950
	}

	p.Insert((float)pInfo(peer)->ances, 0, 0); // tie kiti 2 tai nzn  
	PlayerMoving data{ pInfo(peer)->netID, 0, 0x14, 0, form_state(pInfo(peer)), 0, 0, 0, 1200, (has_playmod(pInfo(peer), "cupid's firepower") ? float(-300) : (has_playmod(pInfo(peer), "fists o' fury") ? 500 : (has_playmod(pInfo(peer), "Dragonborn") ? 500 : (has_playmod(pInfo(peer), "devouring souls") ? -300 : 200)))), (has_playmod(pInfo(peer), "speedy") ? float(310) : (has_playmod(pInfo(peer), "putt putt putt") ? 150 : (has_playmod(pInfo(peer), "fleet of foot") ? float(310) : (has_playmod(pInfo(peer), "Infected!") ? float(150) : 250)))), (has_playmod(pInfo(peer), "Floating!") ? -30 : (has_playmod(pInfo(peer), "high jump") ? float(700) : 1000)) };
	BYTE* raw = packPlayerMoving(&data);
	int e_ = 8421376 + (items[pInfo(peer)->hand].effect != 0 ? items[pInfo(peer)->hand].effect : items[pInfo(peer)->necklace].effect != 0 ? items[pInfo(peer)->necklace].effect : items[pInfo(peer)->back].effect != 0 ? items[pInfo(peer)->back].effect : items[pInfo(peer)->face].effect != 0 ? items[pInfo(peer)->face].effect : items[pInfo(peer)->mask].effect != 0 ? items[pInfo(peer)->mask].effect : items[pInfo(peer)->hair].effect != 0 ? items[pInfo(peer)->hair].effect : items[pInfo(peer)->feet].effect != 0 ? items[pInfo(peer)->feet].effect : items[pInfo(peer)->shirt].effect != 0 ? items[pInfo(peer)->shirt].effect : items[pInfo(peer)->pants].effect != 0 ? items[pInfo(peer)->pants].effect : items[pInfo(peer)->ances].effect != 0 ? items[pInfo(peer)->ances].effect : 0);
	if (pInfo(peer)->punched != 0) e_ = 8421376 + pInfo(peer)->punched;
	memcpy(raw + 1, &e_, 3); //16777218
	uint8_t e2 = (has_playmod(pInfo(peer), "build range") ? 129 : (has_playmod(pInfo(peer), "energized horn") ? 129 : 128)), e3 = (has_playmod(pInfo(peer), "punch range") ? 129 : (has_playmod(pInfo(peer), "eye beam") ? 129 : (has_playmod(pInfo(peer), "cupid's firepower") ? 129 : 128)));
	memcpy(raw + 2, &e2, 1);
	memcpy(raw + 3, &e3, 1);

	int flag = 0;
	if (has_playmod(pInfo(peer), "shrinking")) flag = 1024;
	else if (has_playmod(pInfo(peer), "GIANTASTIC!")) flag = 8192;
	memcpy(raw + 12, &flag, 4);
	float waterspeed = 125.0f;
	memcpy(raw + 16, &waterspeed, 4);
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (pInfo(currentPeer)->world == pInfo(peer)->world) {
			{
				if (pInfo(peer)->guild_id != 0) {
					uint32_t guild_id = pInfo(peer)->guild_id;
					uint32_t my_role = 0;
					vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
					if (p != guilds.end()) {
						Guild* guild_information = &guilds[p - guilds.begin()];
						for (GuildMember search_member : guild_information->guild_members) {
							if (search_member.member_name == pInfo(peer)->tankIDName) {
								my_role = search_member.role_id;
								break;
							}
						}
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnGuildDataChanged");
						p.Insert(pInfo(peer)->guild_id);
						p.Insert(79289404);
						p.Insert((65536 * guild_information->guild_mascot[0]) + guild_information->guild_mascot[1]);
						p.Insert(my_role);
						p.CreatePacket(currentPeer);
					}
				}
			}
			{
				if (pInfo(peer)->invis == false && pInfo(peer)->b_p != 0 && pInfo(peer)->b_i != 0) {
					gamepacket_t p5(0, pInfo(peer)->netID);
					p5.Insert("OnBillboardChange"), p5.Insert(pInfo(peer)->netID), p5.Insert(pInfo(peer)->b_i), p5.Insert(pInfo(peer)->b_a), p5.Insert(pInfo(peer)->b_p), p5.Insert(pInfo(peer)->b_w);
					p5.CreatePacket(currentPeer);
				}
			} {
				if (pInfo(peer)->necklace == 11818) {
					gamepacket_t p(0, pInfo(peer)->netID);
					p.Insert("OnScarfOfSeasons"), p.Insert(pInfo(peer)->i_11818_1), p.Insert(pInfo(peer)->i_11818_2), p.CreatePacket(currentPeer);
				}
			}
			{
				gamepacket_t p(0, pInfo(peer)->netID);
				p.Insert("OnFlagMay2019"), p.Insert(pInfo(peer)->flagmay);
				p.CreatePacket(currentPeer);
			}
			{
				gamepacket_t p2(0, pInfo(peer)->netID);
				p2.Insert("OnCountryState"), p2.Insert(pInfo(peer)->country + "|showGuild" + (pInfo(peer)->lvl125 ? "|maxLevel" : "") + (pInfo(peer)->donor ? "|donor" : "") + (pInfo(peer)->master ? "|master" : ""));
				p2.CreatePacket(currentPeer);
			}
			p.CreatePacket(currentPeer);
			send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			if (pInfo(peer)->netID != pInfo(currentPeer)->netID) {
				{
					if (pInfo(currentPeer)->guild_id != 0) {
						uint32_t guild_id = pInfo(currentPeer)->guild_id;
						uint32_t my_role = 0;
						vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
						if (p != guilds.end()) {
							Guild* guild_information = &guilds[p - guilds.begin()];
							for (GuildMember search_member : guild_information->guild_members) {
								if (search_member.member_name == pInfo(currentPeer)->tankIDName) {
									my_role = search_member.role_id;
									break;
								}
							}
							gamepacket_t p(0, pInfo(currentPeer)->netID);
							p.Insert("OnGuildDataChanged");
							p.Insert(pInfo(currentPeer)->guild_id);
							p.Insert(79289404);
							p.Insert((65536 * guild_information->guild_mascot[0]) + guild_information->guild_mascot[1]);
							p.Insert(my_role);
							p.CreatePacket(peer);
						}
					}
				}
				{
					if (pInfo(currentPeer)->invis == false && pInfo(currentPeer)->b_p != 0 && pInfo(currentPeer)->b_i != 0) {
						gamepacket_t p5(0, pInfo(currentPeer)->netID);
						p5.Insert("OnBillboardChange"), p5.Insert(pInfo(currentPeer)->netID), p5.Insert(pInfo(currentPeer)->b_i), p5.Insert(pInfo(currentPeer)->b_a), p5.Insert(pInfo(currentPeer)->b_p), p5.Insert(pInfo(currentPeer)->b_w);
						p5.CreatePacket(peer);
					}
				}
				{
					if (pInfo(currentPeer)->necklace == 11818) {
						gamepacket_t p(0, pInfo(currentPeer)->netID);
						p.Insert("OnScarfOfSeasons"), p.Insert(pInfo(currentPeer)->i_11818_1), p.Insert(pInfo(currentPeer)->i_11818_2), p.CreatePacket(peer);
					}
				}
				{
					gamepacket_t p(0, pInfo(currentPeer)->netID);
					p.Insert("OnFlagMay2019"), p.Insert(pInfo(currentPeer)->flagmay);
					p.CreatePacket(peer);
				}
				{
					gamepacket_t p2(0, pInfo(currentPeer)->netID);
					string title = "";
					p2.Insert("OnCountryState"), p2.Insert(pInfo(currentPeer)->country + "|showGuild" + (pInfo(currentPeer)->lvl125 ? "|maxLevel" : "") + (pInfo(currentPeer)->donor ? "|donor" : "") + (pInfo(currentPeer)->master ? "|master" : ""));
					p2.CreatePacket(peer);
				}
				gamepacket_t p(0, pInfo(currentPeer)->netID);
				p.Insert("OnSetClothing");
				p.Insert((float)pInfo(currentPeer)->hair, (float)pInfo(currentPeer)->shirt, (float)pInfo(currentPeer)->pants); // hair shirt pants
				p.Insert((float)pInfo(currentPeer)->feet, (float)pInfo(currentPeer)->face, (float)pInfo(currentPeer)->hand); // feet face hand 
				p.Insert((float)pInfo(currentPeer)->back, (float)pInfo(currentPeer)->mask, (float)pInfo(currentPeer)->necklace); // back mask neck
				bool set_skin = false;
				for (PlayMods peer_playmod : pInfo(currentPeer)->playmods) {
					if (set_skin) break;
					for (vector<string> get_ : info_about_playmods) {
						uint32_t playmod_id = atoi(get_[0].c_str());
						if (playmod_id == peer_playmod.id) {
							string playmod_name = get_[2];
							string special_id = get_[8];
							if (not special_id.empty()) {
								char* endptr = NULL;
								unsigned int skin_ = strtoll(special_id.c_str(), &endptr, 10);
								p.Insert((pInfo(currentPeer)->ghost ? -2450 : skin_));
								set_skin = true;
							}
							break;
						}
					}
				} if (not set_skin) {
					p.Insert((pInfo(currentPeer)->ghost ? -2450 : (has_playmod(pInfo(currentPeer), "ninja stealth") ? 1684300950 : pInfo(currentPeer)->skin)));
				}
				p.Insert((float)pInfo(currentPeer)->ances, 0, 0); // tie kiti 2 tai nzn   
				p.CreatePacket(peer); // kiti tau
				PlayerMoving data{ pInfo(currentPeer)->netID, 0, 0x14, 0, form_state(pInfo(currentPeer)), 0, 0, 0, 1200, (has_playmod(pInfo(currentPeer), "cupid's firepower") ? float(-300) : (has_playmod(pInfo(currentPeer), "fists o' fury") ? 500 : (has_playmod(pInfo(currentPeer), "Dragonborn") ? 500 : (has_playmod(pInfo(currentPeer), "devouring souls") ? -300 : 200)))), (has_playmod(pInfo(currentPeer), "speedy") ? float(310) : (has_playmod(pInfo(currentPeer), "putt putt putt") ? 150 : 250)), (has_playmod(pInfo(currentPeer), "Floating!") ? -30 : (has_playmod(pInfo(currentPeer), "high jump") ? float(700) : 1000)) };
				BYTE* raw_ = packPlayerMoving(&data);
				int e_ = 8421376 + (items[pInfo(currentPeer)->hand].effect != 0 ? items[pInfo(currentPeer)->hand].effect : items[pInfo(currentPeer)->necklace].effect != 0 ? items[pInfo(currentPeer)->necklace].effect : items[pInfo(currentPeer)->back].effect != 0 ? items[pInfo(currentPeer)->back].effect : items[pInfo(currentPeer)->face].effect != 0 ? items[pInfo(currentPeer)->face].effect : items[pInfo(currentPeer)->mask].effect != 0 ? items[pInfo(currentPeer)->mask].effect : items[pInfo(currentPeer)->hair].effect != 0 ? items[pInfo(currentPeer)->hair].effect : items[pInfo(currentPeer)->feet].effect != 0 ? items[pInfo(currentPeer)->feet].effect : items[pInfo(currentPeer)->shirt].effect != 0 ? items[pInfo(currentPeer)->shirt].effect : items[pInfo(currentPeer)->pants].effect != 0 ? items[pInfo(currentPeer)->pants].effect : items[pInfo(currentPeer)->ances].effect != 0 ? items[pInfo(currentPeer)->ances].effect : 0);
				if (pInfo(currentPeer)->punched != 0) e_ = 8421376 + pInfo(currentPeer)->punched;
				memcpy(raw_ + 1, &e_, 3);
				uint8_t e2 = (has_playmod(pInfo(currentPeer), "build range") ? 129 : 128), e3 = (has_playmod(pInfo(currentPeer), "punch range") ? 129 : (has_playmod(pInfo(currentPeer), "eye beam") ? 129 : (has_playmod(pInfo(currentPeer), "cupid's firepower") ? 129 : 128)));
				memcpy(raw_ + 2, &e2, 1);
				memcpy(raw_ + 3, &e3, 1);

				int flag = 0;
				if (has_playmod(pInfo(currentPeer), "shrinking")) flag = 1024;
				else if (has_playmod(pInfo(currentPeer), "GIANTASTIC!")) flag = 8192;
				memcpy(raw_ + 12, &flag, 4);
				float waterspeed = 125.0f;
				memcpy(raw_ + 16, &waterspeed, 4);
				send_raw(peer, 4, raw_, 56, ENET_PACKET_FLAG_RELIABLE);
				delete[]raw_;
			}
		}
	}
	delete[]raw;
}
void unequip_(ENetPeer* p_, const int id_) {
	if (items[id_].flagmay != 256) pInfo(p_)->flagmay = 256;
	bool stat_ = 0;
	ItemDB item_ = items[id_];
	switch (items[id_].clothType) {
	case ClothTypes::ANCES:
		if (pInfo(p_)->ances == id_)
			pInfo(p_)->ances = 0, stat_ = 1;
		break;
	case ClothTypes::BACK:
		if (pInfo(p_)->back == id_)
			pInfo(p_)->back = 0, stat_ = 1;
		break;
	case ClothTypes::FACE:
		if (pInfo(p_)->face == id_)
			pInfo(p_)->face = 0, stat_ = 1;
		break;
	case ClothTypes::FEET:
		if (pInfo(p_)->feet == id_)
			pInfo(p_)->feet = 0, stat_ = 1;
		break;
	case ClothTypes::HAIR:
		if (pInfo(p_)->hair == id_)
			pInfo(p_)->hair = 0, stat_ = 1;
		break;
	case ClothTypes::HAND:
		if (pInfo(p_)->hand == id_)
			pInfo(p_)->hand = 0, stat_ = 1;
		break;
	case ClothTypes::MASK:
		if (pInfo(p_)->mask == id_)
			pInfo(p_)->mask = 0, stat_ = 1;
		break;
	case ClothTypes::NECKLACE:
		if (pInfo(p_)->necklace == id_)
			pInfo(p_)->necklace = 0, stat_ = 1;
		break;
	case ClothTypes::PANTS:
		if (pInfo(p_)->pants == id_)
			pInfo(p_)->pants = 0, stat_ = 1;
		break;
	case ClothTypes::SHIRT:
		if (pInfo(p_)->shirt == id_)
			pInfo(p_)->shirt = 0, stat_ = 1;
		break;
	default:
		break;
	}
	if (stat_) {
		update_clothes(p_);
		packet_(p_, "action|play_sfx\nfile|audio/change_clothes.wav\ndelayMS|0");
	}
	if (stat_ and item_.on_remove != "" or id_ == 2286 and pInfo(p_)->hand == 2286 or id_ == 2204 and pInfo(p_)->hand == 2204) {
		packet_(p_, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
		if (id_ == 2204) {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Geiger Counter removed. (`$Geiger Counting`` mod removed)");
			p.CreatePacket(p_);
		}
		else if (id_ == 2286 and pInfo(p_)->geiger_ < 100) {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Geiger Counter is no longer charging! (`$Charging Geiger Counter`` mod removed)");
			p.CreatePacket(p_);
			pInfo(p_)->geiger_ = 0;
		}
		else {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert(item_.on_remove + (item_.playmod != "" ? " (`$" + item_.playmod + "`` mod removed)" : ""));
			p.CreatePacket(p_);
		}
	}
}


void cancel_trade(ENetPeer* p_, bool confirm_cancel = false, bool busy_ = false) {
	bool found = false;
	pInfo(p_)->onTrade = false;
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (pInfo(currentPeer)->world == pInfo(p_)->world) {
			if (pInfo(currentPeer)->netID == pInfo(p_)->trading_with and pInfo(p_)->netID == pInfo(currentPeer)->trading_with) {
				found = true;
				pInfo(currentPeer)->block_trade = false, pInfo(currentPeer)->accept_the_offer = false, pInfo(currentPeer)->trading_with = -1, pInfo(currentPeer)->trade_items.clear();
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					if (not confirm_cancel) {
						World* world_ = &worlds[p - worlds.begin()];
						{
							if (busy_) {
								{
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + "`` is too busy to trade!");
									p.CreatePacket(currentPeer), p.CreatePacket(p_);
								}
								gamepacket_t p;
								p.Insert("OnTextOverlay");
								p.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + "`` is too busy to trade!");
								p.CreatePacket(currentPeer), p.CreatePacket(p_);
							}
							else {
								gamepacket_t p;
								p.Insert("OnTextOverlay");
								p.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + "`` has canceled the trade");
								p.CreatePacket(currentPeer);
							}
						}
					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("`6[```4Trade canceled by " + (not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + "``!```6]``");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(currentPeer)->netID);
							p.Insert("`6[```4Trade canceled by " + (not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + "``!```6]``");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(currentPeer);
						}
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("`6[```4Trade canceled by " + (not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + "``!```6]``");
							p.CreatePacket(p_), p.CreatePacket(currentPeer);
						}
						{
							gamepacket_t p;
							p.Insert("OnTextOverlay");
							p.Insert("`6[```4Trade canceled by " + (not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + "``!```6]``");
							p.CreatePacket(p_), p.CreatePacket(currentPeer);
						}
					}
					gamepacket_t p;
					p.Insert("OnForceTradeEnd");
					p.CreatePacket(currentPeer);
					if (busy_) {
						p.CreatePacket(p_);
						pInfo(p_)->onTrade = false;
					}
				}
				pInfo(p_)->block_trade = false, pInfo(p_)->trading_with = -1, pInfo(p_)->trade_accept = false, pInfo(p_)->accept_the_offer = false, pInfo(p_)->trade_items.clear();
				return;
			}
		}
	}
	if (busy_) {
		{
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->tankIDName) + " is too busy to trade!");
			p.CreatePacket(p_);
		}
		gamepacket_t p;
		p.Insert("OnTextOverlay");
		p.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->tankIDName) + " is too busy to trade!");
		p.CreatePacket(p_);
	}
	else if (pInfo(p_)->trade_accept) {
		gamepacket_t p;
		p.Insert("OnTextOverlay");
		p.Insert("The other person left the trade!");
		p.CreatePacket(p_);
	}
	if (not found) {
		gamepacket_t p;
		p.Insert("OnForceTradeEnd");
		p.CreatePacket(p_);
		pInfo(p_)->onTrade = false;
	}
	pInfo(p_)->block_trade = false, pInfo(p_)->trading_with = -1, pInfo(p_)->trade_accept = false, pInfo(p_)->accept_the_offer = false, pInfo(p_)->trade_items.clear();
}
int modify_inventory(ENetPeer* p_, const int i_, int& c_, bool upd_inv_visuals = true, bool force_return = false) {
	if (c_ > 200 or i_ <= 0 or i_ == 112) return -1;
	if (c_ == 0) upd_inv_visuals = false;
	int ori_ = c_;
	Player* k_ = pInfo(p_);
	int last_free_ = -1;
	for (int a_ = 0; a_ < k_->inv.size(); a_++) {
		if (k_->inv[a_].id == i_) {
			if (k_->inv[a_].count + c_ <= 200) {
				if (c_ < 0 and k_->inv[a_].count + c_ < 0) return -1;
				if (k_->inv[a_].count + c_ == 0) {
					if (pInfo(p_)->b_i == k_->inv[a_].id) {
						gamepacket_t p5(0, pInfo(p_)->netID);
						p5.Insert("OnBillboardChange"), p5.Insert(pInfo(p_)->netID), p5.Insert(pInfo(p_)->b_i = 0), p5.Insert(pInfo(p_)->b_a = 0), p5.Insert(pInfo(p_)->b_p), p5.Insert(pInfo(p_)->b_w);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(p_)->world != pInfo(currentPeer)->world) continue;
							p5.CreatePacket(currentPeer);
						}
					}
					if (items[k_->inv[a_].id].blockType == BlockTypes::CLOTHING)
						unequip_(p_, k_->inv[a_].id);
					if (pInfo(p_)->flagmay == 1929) pInfo(p_)->flagmay = 256;
					if (pInfo(p_)->flagmay != 256 and items[k_->inv[a_].id].flagmay != 256) pInfo(p_)->flagmay = 256;
					k_->inv[a_].id = 0, k_->inv[a_].count = 0;
					goto s_;
				}
				k_->inv[a_].count += c_;
				if (c_ == 0) {
					c_ = k_->inv[a_].count;
					return -1;
				}
				c_ = k_->inv[a_].count;
			}
			else {
				if (force_return)
					c_ = k_->inv[a_].count;
				return -1;
			}
			goto s_;
		}
		else if (k_->inv[a_].id == 0 and last_free_ == -1) {
			last_free_ = a_;
		}
		if (a_ + 1 == k_->inv.size()) {
			if (last_free_ != -1 and c_ > 0) {
				k_->inv[last_free_].id = i_, k_->inv[last_free_].count = c_;
				goto s_;
			}
			return -1;
		}
	}
s_:
	if (upd_inv_visuals and c_ != 0) {
		PlayerMoving data_{};
		data_.packetType = 13, data_.plantingTree = i_;
		BYTE* raw = packPlayerMoving(&data_);
		raw[(ori_ < 0 ? 2 : 3)] = ori_ < 0 ? (ori_ * -1) : ori_;
		send_raw(p_, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		delete[]raw;
	}
	return 0;
}

void r_dropas_(World world_, WorldDrop drop_, int net_id = -1) {
	//if (drop_.y < 0 || drop_.x < 0 || drop_.id == 0) return;
	if (drop_.id == 745 || drop_.id == 747 || drop_.id == 749) drop_.id = 743;
	if (drop_.id == 629 || drop_.id == 631 || drop_.id == 633 || drop_.id == 635 || drop_.id == 637 || drop_.id == 639 || drop_.id == 641 || drop_.id == 643 || drop_.id == 645 || drop_.id == 647 || drop_.id == 649) drop_.id = 627;

	if (items[drop_.id].blockType != BlockTypes::FISH) {
		for (int i_ = 0; i_ < world_.drop.size(); i_++) {
			if (world_.drop[i_].id == 0) continue;
			if (abs(world_.drop[i_].y - drop_.y) <= 16 and abs(world_.drop[i_].x - drop_.x) <= 16 and world_.drop[i_].id == drop_.id and world_.drop[i_].count < 200) {
				int truksta_iki_200 = 200 - world_.drop[i_].count;
				if (drop_.count > truksta_iki_200 or world_.drop[i_].count + drop_.count <= 200) {
					int drop_atskirai = drop_.count - truksta_iki_200;
					if (world_.drop[i_].count + drop_.count <= 200) {
						world_.drop[i_].count += drop_.count;
						drop_.count = 0;
						goto update;
					}
					drop_.count = drop_atskirai;
					world_.drop[i_].count = 200;
				update:
					PlayerMoving data_{};
					data_.packetType = 14, data_.netID = -3, data_.plantingTree = world_.drop[i_].id;
					data_.x = world_.drop[i_].x, data_.y = world_.drop[i_].y;
					int32_t item = world_.drop[i_].uid;
					float val = world_.drop[i_].count;
					BYTE* raw = packPlayerMoving(&data_);
					memcpy(raw + 8, &item, 4);
					memcpy(raw + 16, &val, 4);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_.name) {
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[]raw;
					break;
				}
			}
		}
	}
	if (drop_.count != 0) {
		world_.drop.push_back(drop_);
		PlayerMoving data_{};
		data_.packetType = 14, data_.x = drop_.x, data_.y = drop_.y, data_.netID = -1, data_.plantingTree = drop_.id;
		float val = drop_.count;
		int32_t item = net_id;
		BYTE val2 = 0;
		BYTE* raw = packPlayerMoving(&data_);
		memcpy(raw + 8, &item, 4);
		memcpy(raw + 16, &val, 4);
		memcpy(raw + 1, &val2, 1);
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (pInfo(currentPeer)->world == world_.name) {
				send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			}
		}
		delete[]raw;
	}
}


void dropas_(World* world_, WorldDrop drop_, int net_id = -1) {
	//if (drop_.y < 0 || drop_.x < 0 || drop_.id == 0) return;
	if (drop_.id == 745 || drop_.id == 747 || drop_.id == 749) drop_.id = 743;
	if (drop_.id == 629 || drop_.id == 631 || drop_.id == 633 || drop_.id == 635 || drop_.id == 637 || drop_.id == 639 || drop_.id == 641 || drop_.id == 643 || drop_.id == 645 || drop_.id == 647 || drop_.id == 649) drop_.id = 627;

	if (items[drop_.id].blockType != BlockTypes::FISH) {
		for (int i_ = 0; i_ < world_->drop.size(); i_++) {
			if (world_->drop[i_].id == 0) continue;
			if (abs(world_->drop[i_].y - drop_.y) <= 16 and abs(world_->drop[i_].x - drop_.x) <= 16 and world_->drop[i_].id == drop_.id and world_->drop[i_].count < 200) {
				int truksta_iki_200 = 200 - world_->drop[i_].count;
				if (drop_.count > truksta_iki_200 or world_->drop[i_].count + drop_.count <= 200) {
					int drop_atskirai = drop_.count - truksta_iki_200;
					if (world_->drop[i_].count + drop_.count <= 200) {
						world_->drop[i_].count += drop_.count;
						drop_.count = 0;
						goto update;
					}
					drop_.count = drop_atskirai;
					world_->drop[i_].count = 200;
				update:
					PlayerMoving data_{};
					data_.packetType = 14, data_.netID = -3, data_.plantingTree = world_->drop[i_].id;
					data_.x = world_->drop[i_].x, data_.y = world_->drop[i_].y;
					int32_t item = world_->drop[i_].uid;
					float val = world_->drop[i_].count;
					BYTE* raw = packPlayerMoving(&data_);
					memcpy(raw + 8, &item, 4);
					memcpy(raw + 16, &val, 4);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[]raw;
					break;
				}
			}
		}
	}
	if (drop_.count != 0) {
		world_->drop.push_back(drop_);
		PlayerMoving data_{};
		data_.packetType = 14, data_.x = drop_.x, data_.y = drop_.y, data_.netID = -1, data_.plantingTree = drop_.id;
		float val = drop_.count;
		int32_t item = net_id;
		BYTE val2 = 0;
		BYTE* raw = packPlayerMoving(&data_);
		memcpy(raw + 8, &item, 4);
		memcpy(raw + 16, &val, 4);
		memcpy(raw + 1, &val2, 1);
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (pInfo(currentPeer)->world == world_->name) {
				send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			}
		}
		delete[]raw;
	}
}

void SendReward(ENetPeer* peer, int level) {
	int rew = 0, levels = 0;
	bool add = false, yes = false;
	switch (level) {
	case 5:
		add = true, yes = true, levels = 5;
		break;
	case 10:
		add = true, yes = true, levels = 10;
		break;
	case 40:
		pInfo(peer)->supp = 2;
		yes = true;
		break;
	case 65:
		pInfo(peer)->master = 1;
		yes = true;
		break;
	case 85:
		pInfo(peer)->donor = 1;
		yes = true;
		break;
	case 100:
		pInfo(peer)->adminLevel = -4;
		yes = true;
		enet_peer_disconnect_later(peer, 0);
		break;
	}
	if (add) {
		for (int i_ = 0; i_ < 2; i_++) { // default inv dydis
			Items itm_{};
			itm_.id = 0, itm_.count = 0;
			pInfo(peer)->inv.push_back(itm_);
		}
		send_inventory(peer);
		update_clothes(peer);
		if (levels == 5) modify_inventory(peer, 2952, rew += 1);
		else modify_inventory(peer, 9380, rew += 3);
	}
	if (yes) {
		gamepacket_t k;
		k.Insert("OnTextOverlay"), k.Insert("`2You received level reward!``"), k.CreatePacket(peer);
		packet_(peer, "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0");
	}
}
void add_guild_xp(ENetPeer* peer, int amount) {
	if (pInfo(peer)->guild_id != 0) {
		uint32_t guild_id = pInfo(peer)->guild_id;
		vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
		if (p != guilds.end()) {
			Guild* guild_information = &guilds[p - guilds.begin()];
			uint32_t max_xp = guild_lvl[guild_information->guild_level - 1][0];
			if (guild_information->guild_xp < max_xp) {
				guild_information->guild_xp += amount;
				if (guild_information->guild_xp > max_xp) guild_information->guild_xp = max_xp;
			}
		}
	}
}
void level_rewards_dialog(ENetPeer* peer) {
	gamepacket_t k;
	k.Insert("OnDialogRequest");
	k.Insert("set_default_color|`w\nadd_label_with_icon|big|`2" + server_name + " Level Rewards`|left|6336|\n"
		"add_progress_bar||small|Your Level|(" + to_string(pInfo(peer)->level) + "|125|(" + to_string(pInfo(peer)->level) + "/125)|\n"
		"add_spacer|small|\n"
		"add_textbox|`oYou can receive your level reward from here,|\n"
		"add_textbox|`olets level up and get rare rewards!|\n"
		"add_spacer|small|\n"

		"add_label_with_icon|small|`9Bronze Rewards:|left|4906|\n"
		"add_label_with_icon|small|`0Level 5: `o1x " + items[2952].name + ".|left|2952|\n"
		"add_label_with_icon|small|`0Level 11: `o5x " + items[1796].name + ".|left|1796|\n"
		"add_label_with_icon|small|`0Level 18: `o1x " + items[496].name + ".|left|496|\n"
		"add_label_with_icon|small|`0Level 24: `o1x " + items[8192].name + ".|left|8192|\n"
		"add_label_with_icon|small|`0Level 33: `o25x " + items[1486].name + ".|left|1486|\n"
		"add_label_with_icon|small|`0Level 41: `o1x " + items[6840].name + ".|left|6840|\n"
		"add_label_with_icon|small|`0Level 47: `o1x " + items[1464].name + ".|left|1464|\n"
		"add_spacer|small|\n"

		"add_label_with_icon|small|`9Silver Rewards:|left|4904|\n"
		"add_label_with_icon|small|`0Level 54: `o1x " + items[4802].name + ".|left|4802|\n"
		"add_label_with_icon|small|`0Level 60: `o1x Mentor Title.|left|9472|\n"
		"add_label_with_icon|small|`0Level 68: `o10x " + items[2480].name + ".|left|2480|\n"
		"add_label_with_icon|small|`0Level 74: `o50x " + items[1486].name + ".|left|1486|\n"
		"add_label_with_icon|small|`0Level 82: `o1x " + items[1970].name + ".|left|1970|\n"
		"add_label_with_icon|small|`0Level 88: `o1x " + items[1822].name + ".|left|1822|\n"
		"add_label_with_icon|small|`0Level 95: `o1x " + items[4956].name + ".|left|4956|\n"
		"add_spacer|small|\n"

		"add_label_with_icon|small|`9Gold Rewards:|left|4902|\n"
		"add_label_with_icon|small|`0Level 102: `o1x Grow4Good Title.|left|10866|\n"
		"add_label_with_icon|small|`0Level 105: `o1x " + items[9902].name + ".|left|9386|\n"
		"add_label_with_icon|small|`0Level 110: `o1x " + items[6802].name + ".|left|6802|\n"
		"add_label_with_icon|small|`0Level 115: `o1x Dr Title.|left|8446|\n"
		"add_label_with_icon|small|`0Level 118: `o1x " + items[1674].name + ".|left|1674|\n"
		"add_label_with_icon|small|`0Level 122: `o1x " + items[7188].name + ".|left|7188|\n"
		"add_label_with_icon|small|`0Level 125: `o1x " + items[1460].name + ".|left|1460|\n"
		"add_spacer|small|\n"
		"add_label_with_icon|small|`4NOTE: `0Always should be empty space in your backpack!|left|1494|\n"
		"add_spacer|small|\n"
		"add_quick_exit|\n"
		"end_dialog|gazzate||Close|");
	k.CreatePacket(peer);
}
void add_peer_xp(ENetPeer* peer, int amount) {
	if (pInfo(peer)->hand == 10362) amount *= 2;
	pInfo(peer)->xp += amount;
	int required = 50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2);
	if (pInfo(peer)->level <= 125) {
		if (pInfo(peer)->xp >= 50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2)) {
			pInfo(peer)->level++;
			pInfo(peer)->xp -= required;
			pInfo(peer)->gems += 500;
			{
				gamepacket_t p;
				p.Insert("OnSetBux"), p.Insert(pInfo(peer)->gems), p.Insert(0), p.Insert((pInfo(peer)->supp >= 1) ? 1 : 0);
				if (pInfo(peer)->supp >= 2) {
					p.Insert((float)33796, (float)1, (float)0);
				}
				p.CreatePacket(peer);
			}

			int c1 = 1, c5 = 5, c10 = 10, c25 = 25, c50 = 50;
			if (pInfo(peer)->level == 5) form_emoji(peer), modify_inventory(peer, 2952, c1);
			else if (pInfo(peer)->level == 11) modify_inventory(peer, 1796, c5);
			else if (pInfo(peer)->level == 18) modify_inventory(peer, 496, c1);
			else if (pInfo(peer)->level == 24) modify_inventory(peer, 8192, c1);
			else if (pInfo(peer)->level == 33) modify_inventory(peer, 1486, c25);
			else if (pInfo(peer)->level == 41) modify_inventory(peer, 6840, c1);
			else if (pInfo(peer)->level == 47) modify_inventory(peer, 1464, c1);
			else if (pInfo(peer)->level == 54) modify_inventory(peer, 4802, c1);
			else if (pInfo(peer)->level == 60) pInfo(peer)->mp = true;
			else if (pInfo(peer)->level == 68) modify_inventory(peer, 2480, c10);
			else if (pInfo(peer)->level == 74) modify_inventory(peer, 1496, c50);
			else if (pInfo(peer)->level == 82) modify_inventory(peer, 1970, c1);
			else if (pInfo(peer)->level == 88) modify_inventory(peer, 1822, c1);
			else if (pInfo(peer)->level == 95) modify_inventory(peer, 4956, c1);
			else if (pInfo(peer)->level == 102) pInfo(peer)->gp = true;
			else if (pInfo(peer)->level == 105) modify_inventory(peer, 9902, c1);
			else if (pInfo(peer)->level == 110) modify_inventory(peer, 6802, c1);
			else if (pInfo(peer)->level == 115) pInfo(peer)->drtitle = true;
			else if (pInfo(peer)->level == 118) modify_inventory(peer, 1674, c1);
			else if (pInfo(peer)->level == 122) modify_inventory(peer, 7188, c1);
			else if (pInfo(peer)->level == 125) modify_inventory(peer, 1460, c1);



			gamepacket_t p, p2;
			p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` is now level " + to_string(pInfo(peer)->level) + "!");
			p2.Insert("OnConsoleMessage"), p2.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` is now level " + to_string(pInfo(peer)->level) + "!");
			PlayerMoving data_{};
			data_.packetType = 17, data_.netID = 46, data_.YSpeed = 46, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
			BYTE* raw = packPlayerMoving(&data_);
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
				p.CreatePacket(currentPeer);
				p2.CreatePacket(currentPeer);
				send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			}
			delete[] raw;
		}
	}
}

/*string timer_h(long long int time)
{
	long long int timer = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
	int actualseconds = (time - timer) / 1000;
	string time_counted = "";
	if (actualseconds / 86400 >= 1) {
		time_counted += "" + to_string(actualseconds / (24 * 3600)) + " days, ";
		actualseconds = actualseconds % (24 * 3600);
	}
	if (actualseconds / 3600 >= 1) {
		time_counted += "" + to_string(actualseconds / 3600) + " hours, ";
		actualseconds %= 3600;
	}
	if (actualseconds / 60 >= 1) {
		time_counted += "" + to_string(actualseconds / 60) + " mins, ";
		actualseconds %= 60;
	}
	time_counted += "" + to_string(actualseconds) + " secs";
	return time_counted;
}

void save_clash_leaderboard() {
	vector<pair<int, string>> topPlayer = topclash;
	sort(topPlayer.begin(), topPlayer.end());
	reverse(topPlayer.begin(), topPlayer.end());
	topPlayer.resize((topPlayer.size() >= 100 ? 100 : topPlayer.size()));
	json j;
	ofstream o("db/clash/leaderboard.json");
	if (!o.is_open()) ("lb " + GetLastError());
	if (topPlayer.size() != 0) j["list"] = topPlayer;
	o << j << endl;
}
void update_clash_leaderboard() {
	vector<pair<int, string>> topPlayer = topclash;
	top_clash_list = "";
	sort(topPlayer.begin(), topPlayer.end());
	reverse(topPlayer.begin(), topPlayer.end());
	topPlayer.resize((topPlayer.size() >= 100 ? 100 : topPlayer.size()));
	for (uint8_t i = 0; i < topPlayer.size(); i++) {
		try {
			string username = topPlayer[i].second;
			int value = topPlayer[i].first;
			top_clash_list += "\nadd_smalltext|`o#" + to_string(i + 1) + ": " + username + ", Score: " + setGems(value) + "|left|";
		}
		catch (exception) {
			return;
		}
	}
	if (top_clash_list == "") top_clash_list = "\nadd_smalltext|The list should update in few minutes.|\nadd_spacer|small|";
}
void add_clash_point(ENetPeer* peer)
{
	int point = (pInfo(peer)->hand == 6932 ? 12 : pInfo(peer)->hand == 6256 ? 6 : pInfo(peer)->hand == 6254 ? 4 : 0);
	std::string fileName = "db/clash/solo/" + pInfo(peer)->tankIDName + "_.json";
	std::ifstream checkFileExistsStream(fileName);
	if (checkFileExistsStream.good()) {
		ifstream ifs(fileName);
		int am = 0;
		if (ifs.is_open()) {
			json j;
			ifs >> j;
			am = j["points"].get<int>();
		}
		ofstream o(fileName);
		json j;
		j["points"] = point + am;
		o << j << endl;
		pInfo(peer)->clash_contri += point;
		o.close();
	}
	else {
		std::ofstream createFile(fileName);
		if (createFile.is_open()) {
			json j;
			j["points"] = point;
			createFile << j << endl;
			createFile.close();
		}
	}
	update_clash_leaderboard();
	save_clash_leaderboard();
}*/

void stop_fishing(ENetPeer* peer, bool fail, string error) {
	if (pInfo(peer)->fishing_used != 0) {
		gamepacket_t p, p2;
		p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
		p2.Insert("OnConsoleMessage");
		if (error == "") {
			if (pInfo(peer)->last_fish_catch + pInfo(peer)->fish_seconds < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) p.Insert("There was nothing on the line!"), p2.Insert("There was nothing on the line!");
			else {
				bool fish = false, fullinv = false;
				add_peer_xp(peer, items[pInfo(peer)->fishing_used].rarity);
				int giveitem = items[pInfo(peer)->fishing_used].randomitem[rand() % items[pInfo(peer)->fishing_used].randomitem.size()], c_ = 1;
				vector<int> list;
				if (pInfo(peer)->hand == 10262) {
					for (int i__ = 0; i__ < items[pInfo(peer)->fishing_used].randomitem.size(); i__++) if (items[items[pInfo(peer)->fishing_used].randomitem[i__]].blockType == BlockTypes::FISH) list.push_back(items[pInfo(peer)->fishing_used].randomitem[i__]);
					giveitem = list[rand() % list.size()];
				}
				if (items[giveitem].blockType == BlockTypes::FISH) fish = true, c_ = rand() % items[giveitem].fish_max_lb + 1;
				PlayerMoving data_{};
				data_.x = pInfo(peer)->f_x * 32, data_.y = pInfo(peer)->f_y * 32, data_.packetType = 19, data_.plantingTree = 500, data_.punchX = giveitem, data_.punchY = pInfo(peer)->netID;
				int32_t to_netid = pInfo(peer)->netID;
				BYTE* raw = packPlayerMoving(&data_);
				raw[3] = 5;
				memcpy(raw + 8, &to_netid, 4);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
					send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
				delete[] raw;
				if (fish) for (int i_ = 0, remove = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == giveitem) fullinv = true;
				int give = 1;
				if (fullinv == false && fish == false && modify_inventory(peer, giveitem, give) == 0) {
				}
				else fullinv = true;
				if (fullinv || fish) {
					string name_ = pInfo(peer)->world;
					vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
					if (p != worlds.end()) {
						World* world_ = &worlds[p - worlds.begin()];
						WorldDrop drop_block_{};
						drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17, drop_block_.id = giveitem, drop_block_.count = c_, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
				}
				pInfo(peer)->fishing_quest++;
				//add_clash_point(peer);
				p.Insert("You caught a `2" + (fish ? to_string(c_) + " lb. " : "") + "" + items[giveitem].name + "!``"), p2.Insert("You caught a `2" + (fish ? to_string(c_) + " lb. " : "") + "" + items[giveitem].name + "!``");
			}
		}
		else p.Insert(error), p2.Insert(error);
		pInfo(peer)->fishing_used = 0, pInfo(peer)->last_fish_catch = 0;
		FishMoving data_{};
		data_.stopped_fishing = 2, data_.netID = pInfo(peer)->netID, data_.x = pInfo(peer)->f_x, data_.y = pInfo(peer)->f_y;
		BYTE* raw = packFishMoving(&data_);
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
			send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		}
		delete[] raw;
		p.CreatePacket(peer), p2.CreatePacket(peer);
	}
}

void equip_clothes(ENetPeer* p_, int item) {
	int c_ = 0;
	modify_inventory(p_, item, c_);
	if (c_ == 0) return;
	if (pInfo(p_)->ances == item or pInfo(p_)->back == item
		or pInfo(p_)->feet == item or pInfo(p_)->face == item
		or pInfo(p_)->hair == item or pInfo(p_)->hand == item
		or pInfo(p_)->mask == item or pInfo(p_)->necklace == item
		or pInfo(p_)->pants == item or pInfo(p_)->shirt == item) {
		if (pInfo(p_)->flagmay == 1929) pInfo(p_)->flagmay = 256;
		if (pInfo(p_)->flagmay != 256 and items[item].flagmay != 256) pInfo(p_)->flagmay = 256;
		unequip_(p_, item);
	}
	else {
		if (items[item].flagmay != 256 and items[item].flagmay != 1929312) pInfo(p_)->flagmay = items[item].flagmay;
		ClothTypes type_ = items[item].clothType;
		if (type_ == ClothTypes::ANCES)
			pInfo(p_)->ances = item;
		else if (type_ == ClothTypes::BACK)
			pInfo(p_)->back = item;
		else if (type_ == ClothTypes::FEET)
			pInfo(p_)->feet = item;
		else if (type_ == ClothTypes::FACE)
			pInfo(p_)->face = item;
		else if (type_ == ClothTypes::HAIR)
			pInfo(p_)->hair = item;
		else if (type_ == ClothTypes::HAND)
			pInfo(p_)->hand = item;
		else if (type_ == ClothTypes::MASK)
			pInfo(p_)->mask = item;
		else if (type_ == ClothTypes::NECKLACE)
			pInfo(p_)->necklace = item;
		else if (type_ == ClothTypes::PANTS)
			pInfo(p_)->pants = item;
		else if (type_ == ClothTypes::SHIRT)
			pInfo(p_)->shirt = item;
		if (items[item].on_equip != "") {
			gamepacket_t p;
			p.Insert("OnConsoleMessage"), p.Insert(items[item].on_equip + (items[item].playmod != "" ? " (`$" + items[item].playmod + "`` mod added)" : "")), p.CreatePacket(p_);
		}
		packet_(p_, "action|play_sfx\nfile|audio/change_clothes.wav\ndelayMS|0");
		update_clothes(p_);
		if (pInfo(p_)->fishing_used != 0)stop_fishing(p_, true, "Sit still if you wanna fish!");
		if (item == 3172 && has_playmod(pInfo(p_), "Malpractice")) {
			for (int i_ = 0; i_ < pInfo(p_)->playmods.size(); i_++) if (pInfo(p_)->playmods[i_].id == 88) pInfo(p_)->playmods[i_].time = 1;
			gamepacket_t p, p2;
			p.Insert("OnConsoleMessage"), p.Insert("`2Your briefs have stunned the judge!``"), p.CreatePacket(p_);
			p2.Insert("OnTalkBubble"), p2.Insert(pInfo(p_)->netID), p2.Insert("`2Your briefs have stunned the judge!``"), p2.CreatePacket(p_);
			int remove = -1;
			modify_inventory(p_, 3172, remove);
		}
	}
}

int alloc_(World* world_, WorldBlock* block_) {
	if (items[block_->fg].blockType == SEED) return 0;
	if (items[block_->fg].vipentrance) {
		return (block_->admins.size() * 4) + 99;
	}
	else if (items[block_->fg].blockType == BlockTypes::LOCK) {
		if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
			return (block_->admins.size() * 4) + 99;
		}
		return (world_->admins.size() * 4) + 99;
	}
	return 99;
}

int r_alloc_(World world_, WorldBlock block_) {
	if (items[block_.fg].blockType == SEED) return 0;
	if (items[block_.fg].vipentrance) {
		return (block_.admins.size() * 4) + 99;
	}
	else if (items[block_.fg].blockType == BlockTypes::LOCK) {
		if (block_.fg == 202 or block_.fg == 204 or block_.fg == 206 or block_.fg == 4994) {
			return (block_.admins.size() * 4) + 99;
		}
		return (world_.admins.size() * 4) + 99;
	}
	return 99;
}

int form_visual(BYTE*& blc, WorldBlock block_, World world_, ENetPeer* peer, bool case_ = true, bool show = false, int x1 = -1, int y1 = -1) {
	uint32_t ySize = world_.blocks.size() / 100, xSize = world_.blocks.size() / ySize, square = world_.blocks.size();
	if (not case_) {
		memcpy(blc, &block_.fg, 2);
		memcpy(blc + 2, &block_.bg, 2);
		memcpy(blc + 4, &block_.flags, 4);
	}
	if (items[block_.fg].donation || items[block_.fg].mailbox || block_.fg == 3918 || block_.fg == 3928 || block_.fg == 3922) {
		//int test_ = block_.id != 0 ? 0x00400000 : block_.flags;
		int test_ = (show ? (block_.flags | 0x00400000) : block_.flags); // jeigu kazkas yra tada 0x00400000;
		memcpy(blc + 4, &test_, 4);
		BYTE btype = 12;
		memcpy(blc + 8, &btype, 1);
		if (case_) {
			blc += 8;
			return 8;
		}
	}
	else if (items[block_.fg].bulletin_board || items[block_.fg].storage_box || items[block_.fg].mailbox) {
		BYTE btype = 6;
		memcpy(blc + 8, &btype, 1);
		if (case_) {
			blc += 8;
			return 8;
		}
	}
	else if (items[block_.fg].xeno) {
		BYTE btype = 53;
		memcpy(blc + 8, &btype, 1);
		if (case_) {
			blc += 9;
			return 9;
		}
	}
	else if (items[block_.fg].bunny_egg) {
		BYTE btype = 15;
		memcpy(blc + 8, &btype, 1);
		memcpy(blc + 9, &block_.bunny_egg_progress, 4);
		if (case_) {
			blc += 5;
			return 5;
		}
	}
	else if (items[block_.fg].dshelf) {
		BYTE btype = 43;
		memcpy(blc + 8, &btype, 1);
		memcpy(blc + 9, &block_.shelf_1, 4);
		memcpy(blc + 13, &block_.shelf_2, 4);
		memcpy(blc + 17, &block_.shelf_3, 4);
		memcpy(blc + 21, &block_.shelf_4, 4);
		if (case_) {
			blc += 17;
			return 17;
		}
	}
	else if (items[block_.fg].heart_monitor) {
		BYTE btype = 11;
		memcpy(blc + 8, &btype, 1);
		string monitoriaus_tekstas = block_.heart_monitor;
		{
			uint32_t ijungtas = -1;
			for (int i = 0; i < monitors.size(); i++) {
				if (monitors[i].x == x1 and monitors[i].y == y1) {
					ijungtas = monitors[i].active;
					break;
				}
			}
			memcpy(blc + 9, &ijungtas, 4);
			int state_of_block = block_.flags | 0x00400000;
			if (ijungtas) memcpy(blc + 4, &state_of_block, 4);
		}
		uint32_t dydis = uint32_t(monitoriaus_tekstas.size());
		memcpy(blc + 13, &dydis, 2);
		memcpy(blc + 15, monitoriaus_tekstas.c_str(), dydis);
		if (case_) {
			blc += 7 + dydis;
			return 7 + dydis;
		}
	}
	else if (items[block_.fg].trickster) {
		BYTE btype = 52;
		memcpy(blc + 8, &btype, 1);
		if (case_) {
			blc += 1;
			return 1;
		}
	}
	else if (items[block_.fg].vall_mount) {
		BYTE btype = 47;
		memcpy(blc + 8, &btype, 1);
		uint32_t sk = 0;
		memcpy(blc + 9, &sk, 4);
		if (case_) {
			blc += 8;
			return 8;
		}
	}
	else if (items[block_.fg].portrait) {
		BYTE btype = 48;
		memcpy(blc + 8, &btype, 1);
		string sign_tekstas = block_.txt;
		uint32_t dydis = uint32_t(sign_tekstas.size());
		memcpy(blc + 9, &dydis, 2);
		memcpy(blc + 11, sign_tekstas.c_str(), dydis);
		if (block_.portrait.c_skin == 0 and block_.portrait.c_face == 0 and block_.portrait.c_head == 0 and block_.portrait.c_hair == 0) {

		}
		else {
			memcpy(blc + 11 + dydis, &block_.portrait.c_expression, 4);
			memcpy(blc + 19 + dydis, &block_.portrait.c_hair_colour, 4);
			memcpy(blc + 23 + dydis, &block_.portrait.c_skin, 4);
			memcpy(blc + 27 + dydis, &block_.portrait.c_face, 2);
			memcpy(blc + 29 + dydis, &block_.portrait.c_head, 2);
			memcpy(blc + 31 + dydis, &block_.portrait.c_hair, 2);
		}
		if (case_) {
			blc += 7 + 15 + 3 + dydis;
			return 7 + 15 + 3 + dydis;
		}
	}
	else if (items[block_.fg].easel) {
		BYTE btype = 0x23;
		memcpy(blc + 8, &btype, 1);
		memcpy(blc + 9, &block_.id, 4);
		string sign_tekstas = block_.txt;
		uint32_t dydis = uint32_t(sign_tekstas.size());
		memcpy(blc + 13, &dydis, 2);
		memcpy(blc + 15, sign_tekstas.c_str(), dydis);
		if (case_) {
			blc += 7 + dydis;
			return 7 + dydis;
		}
	}
	else if (items[block_.fg].mannequin) {
		BYTE btype = 14;
		memcpy(blc + 8, &btype, 1);
		string sign_tekstas = block_.txt;
		uint32_t dydis = uint32_t(sign_tekstas.size());
		memcpy(blc + 9, &dydis, 2);
		memcpy(blc + 11, sign_tekstas.c_str(), dydis);
		memcpy(blc + 16 + dydis, &block_.mannequin.c_hair, 2);
		memcpy(blc + 18 + dydis, &block_.mannequin.c_shirt, 2);
		memcpy(blc + 20 + dydis, &block_.mannequin.c_pants, 2);
		memcpy(blc + 22 + dydis, &block_.mannequin.c_feet, 2);
		memcpy(blc + 24 + dydis, &block_.mannequin.c_head, 2);
		memcpy(blc + 26 + dydis, &block_.mannequin.c_hand, 2);
		memcpy(blc + 28 + dydis, &block_.mannequin.c_back, 2);
		memcpy(blc + 30 + dydis, &block_.mannequin.c_mask, 2);
		memcpy(blc + 32 + dydis, &block_.mannequin.c_neck, 2);
		if (case_) {
			blc += 26 + dydis;
			return 26 + dydis;
		}
	}
	else if (items[block_.fg].vipentrance) {
		BYTE btype = 44;
		memcpy(blc + 8, &btype, 1);
		vector<int> vip_members;
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (pInfo(currentPeer)->world == world_.name or currentPeer == peer) {
				if (block_.limit_admins or find(block_.admins.begin(), block_.admins.end(), pInfo(currentPeer)->tankIDName) != block_.admins.end() or pInfo(currentPeer)->tankIDName == world_.owner_name or world_.owner_name.empty()) {
					vip_members.push_back(pInfo(currentPeer)->id);
				}
			}
		}
		uint32_t sk = vip_members.size();
		memcpy(blc + 14, &sk, 1);
		for (int i = 0; i < vip_members.size(); i++) {
			memcpy(blc + 18 + (i * 4), &vip_members[i], 4);
		}
		if (case_) {
			blc += 10 + (sk * 4);
			return 10 + (sk * 4);
		}
	}

	else if (items[block_.fg].timer) {
		BYTE btype = 45;
		memcpy(blc + 8, &btype, 1);
		if (case_) {
			blc += 1;
			return 1;
		}
	}
	else if (items[block_.fg].trans) {
		BYTE btype = 19;
		memcpy(blc + 8, &btype, 1);
		if (case_) {
			blc += 19;
			return 19;
		}
	}
	else if (items[block_.fg].infinitymachine) {
		BYTE btype = 19;
		memcpy(blc + 8, &btype, 1);
		if (case_) {
			blc += 19;
			return 19;
		}
	}
	else if (items[block_.fg].spirit) {
		BYTE btype = 41;
		memcpy(blc + 8, &btype, 1);
		uint32_t sk = block_.c_;
		memcpy(blc + 9, &sk, 4);
		if (case_) {
			blc += 5;
			return 5;
		}
	}
	else if (items[block_.fg].charger) {
		int test_ = block_.id != 0 ? 0x00400000 : block_.flags;
		memcpy(blc + 4, &test_, 4);
		BYTE btype = 57;
		memcpy(blc + 8, &btype, 1);
		long long time_ = time(nullptr);
		uint16_t sk = (block_.planted - time_ <= 0 ? 3600 : 3600 - (block_.planted - time_));
		memcpy(blc + 9, &sk, 2);
		if (case_) {
			blc += 5;
			return 5;
		}
	}
	else if (items[block_.fg].magplant or items[block_.fg].item_sucker) {
		switch (block_.fg) {
		case 5638: // magplant
		{
			uint8_t magnetronas_ijungtas = block_.magnetron ? 1 : 0;
			uint8_t active_ = block_.enabled ? 1 : 0;
			uint32_t block_id = block_.id;
			uint32_t item_count = block_.pr;
			uint32_t kiek_telpa = 5000;
			BYTE btype = 62;
			memcpy(blc + 8, &btype, 1);
			memcpy(blc + 9, &block_id, 4);
			memcpy(blc + 13, &item_count, 4);
			memcpy(blc + 17, &active_, 1);
			memcpy(blc + 18, &magnetronas_ijungtas, 1);
			memcpy(blc + 20, &kiek_telpa, 2);
			if (case_) {
				blc += 15;
				return 15;
			}
			break;
		}
		case 6948: case 6946:
		{
			int max_telpa = 1500;
			int active_ = block_.enabled ? 1 : 0;
			int block_id = block_.id;
			int item_count = block_.pr;
			BYTE btype = 62;
			memcpy(blc + 8, &btype, 1);
			memcpy(blc + 9, &block_id, 4);
			memcpy(blc + 13, &item_count, 4);
			memcpy(blc + 17, &active_, 4);
			memcpy(blc + 21, &max_telpa, 4);
			if (case_) {
				blc += 15;
				return 15;
			}
			break;
		}
		case 6950: case 6952:
		{
			int actually_active = block_.pr > 0 ? 1 : 0;
			int amount_of_gems = block_.pr;
			int block_id = block_.id;
			int is_enabled = block_.enabled ? 1 : 0;
			BYTE btype = (block_.fg == 6950 ? 70 : 69);
			memcpy(blc + 8, &btype, 1);
			memcpy(blc + 9, &actually_active, 4);
			memcpy(blc + 13, &amount_of_gems, 4);
			memcpy(blc + 17, &block_id, 4);
			memcpy(blc + 21, &is_enabled, 4);
			if (case_) {
				blc += 13;
				return 13;
			}
		}
		}
	}
	else {
		switch (items[block_.fg].blockType) {
		case BlockTypes::CRYSTAL:
		{
			BYTE btype = 20;
			memcpy(blc + 8, &btype, 1);
			string text = "";
			int l_ = (int)text.size();
			memcpy(blc + 9, &l_, 2);
			memcpy(blc + 11, text.c_str(), l_);
			if (case_) {
				blc += 3 + l_;
				return 3 + l_;
			}
			break;
		}
		case BlockTypes::WEATHER:
		{
			switch (block_.fg) {
			case 3694:
			{
				BYTE btype = 0x28;
				memcpy(blc + 8, &btype, 1);
				int rgb = (block_.b << 24) | (block_.g << 16) | (block_.r << 8);
				memcpy(blc + 9, &rgb, 4);
				if (case_) {
					blc += 5;
					return 5;
				}
				break;
			}
			case 5000:
			{
				BYTE btype = 40;
				memcpy(blc + 8, &btype, 1);
				uint32_t item_id = (block_.id != 0 ? block_.id : 14);
				memcpy(blc + 9, &item_id, 4);
				if (case_) {
					blc += 5;
					return 5;
				}
				break;
			}
			case 3832:
			{
				BYTE btype = 49;
				memcpy(blc + 8, &btype, 1);
				uint32_t item_id = (block_.id != 0 ? block_.id : 2);
				uint32_t item_gravity = block_.gravity;
				uint8_t item_status = (int)block_.spin | ((int)block_.invert << 1);
				memcpy(blc + 9, &item_id, 4);
				memcpy(blc + 13, &item_gravity, 4);
				memcpy(blc + 17, &item_status, 4);
				if (case_) {
					blc += 10;
					return 10;
				}
				break;
			}
			default:
			{
				if (items[block_.fg].ext_weather) {
					BYTE btype = 5;
					memcpy(blc + 8, &btype, 1);
					if (case_) {
						blc += 1;
						return 1;
					}
				}
			}
			}
			break;
		}
		case BlockTypes::VENDING:
		{
			uint32_t item_id = block_.id;
			uint32_t item_price = block_.pr;
			uint32_t item_count = block_.c_;
			uint32_t vend_available_wls = block_.wl;
			int visual = block_.flags | ((int)item_id == 0 ? ((int)vend_available_wls != 0 ? 0x02000000 : 0x00000000) : ((int)vend_available_wls != 0 ? 0x02410000 : 0x00410000));
			if ((int)item_price < 0 and (int)item_id != 0) {
				if ((int)item_count < ((int)item_price * -1))
					item_id = 0, item_price = 0;
				visual = block_.flags | (((int)item_count < ((int)item_price * -1)) ? ((int)vend_available_wls != 0 ? 0x02410000 : 0x00410000) : ((int)vend_available_wls != 0 ? 0x02410000 : 0x00410000));
			}
			memcpy(blc + 4, &visual, 4);
			BYTE btype = 24;
			memcpy(blc + 8, &btype, 1);
			memcpy(blc + 9, &item_id, 4);
			memcpy(blc + 13, &item_price, 4);
			if (case_) {
				blc += 9;
				return 9;
			}
			break;
		}
		case BlockTypes::DISPLAY:
		{
			BYTE btype = 23;
			memcpy(blc + 8, &btype, 1);
			uint32_t id_ = block_.id;
			memcpy(blc + 9, &id_, 4);
			if (case_) {
				blc += 5;
				return 5;
			}
			break;
		}
		case BlockTypes::PROVIDER:
		{
			BYTE btype = 9;
			memcpy(blc + 8, &btype, 1);
			uint32_t laikas = uint32_t((time(nullptr) - block_.planted <= items[block_.fg].growTime ? time(nullptr) - block_.planted : items[block_.fg].growTime));
			memcpy(blc + 9, &laikas, 4);
			if (case_) {
				blc += 5;
				return 5;
			}
			break;
		}
		case BlockTypes::RANDOM_BLOCK:
		{
			BYTE btype = 8;
			memcpy(blc + 8, &btype, 1);
			memcpy(blc + 9, &block_.roll, 1);
			if (case_) {
				blc += 2;
				return 2;
			}
			break;
		}
		case BlockTypes::LOCK:
		{
			if (block_.open_to_public) *(int*)(blc + 4) = 0x00800000;
			*(__int8*)(blc + 8) = 3;
			uint32_t world_owner_id = -1;
			{
				if (block_.fg == 202 or block_.fg == 204 or block_.fg == 206 or block_.fg == 4994) {
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (block_.owner_name == pInfo(currentPeer)->tankIDName) {
							world_owner_id = pInfo(currentPeer)->id;
						}
					}
				}
				else {
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (world_.owner_name == pInfo(currentPeer)->tankIDName) {
							world_owner_id = pInfo(currentPeer)->id;
						}
					}
				}
			}
			uint32_t admin_id = 0;
			uint32_t bpm_ = world_.music_bpm * -1; //world_.music_bpm * -1
			uint8_t world_settings = world_.disable_music_blocks ? (world_.make_music_blocks_invisible ? 12345 : 1234) : (world_.make_music_blocks_invisible ? 100 : 0);
			if (world_.rainbows and block_.fg == 4802) world_settings += 128;
			*(__int8*)(blc + 9) = world_settings;
			*(int*)(blc + 10) = world_owner_id;
			*(int*)(blc + 18) = world_.music_bpm * -1;
			uint32_t count_of_admins = 1;
			{
				if (block_.fg == 202 or block_.fg == 204 or block_.fg == 206 or block_.fg == 4994) {
					if (peer != NULL and find(block_.admins.begin(), block_.admins.end(), pInfo(peer)->tankIDName) != block_.admins.end()) {
						*(int*)(blc + 22) = pInfo(peer)->id;
						count_of_admins++;
					}
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_.name) {
							if (find(block_.admins.begin(), block_.admins.end(), pInfo(currentPeer)->tankIDName) != block_.admins.end()) {
								if (count_of_admins == 1) {
									*(int*)(blc + 22) = pInfo(currentPeer)->id;
								}
								else {
									*(int*)(blc + 22 + (count_of_admins * 4)) = pInfo(currentPeer)->id;
								}
								count_of_admins++;
							}
						}
					}
				}
				else {
					if (peer != NULL and guild_access(peer, world_.guild_id) or find(world_.admins.begin(), world_.admins.end(), pInfo(peer)->tankIDName) != world_.admins.end()) {
						*(int*)(blc + 22) = pInfo(peer)->id;
						count_of_admins++;
					}
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_.name) {
							if (guild_access(currentPeer, world_.guild_id) or find(world_.admins.begin(), world_.admins.end(), pInfo(currentPeer)->tankIDName) != world_.admins.end()) {
								if (count_of_admins == 1) {
									*(int*)(blc + 22) = pInfo(currentPeer)->id;
								}
								else {
									*(int*)(blc + 22 + (count_of_admins * 4)) = pInfo(currentPeer)->id;
								}
								count_of_admins++;
							}
						}
					}
				}
				*(int*)(blc + 14) = count_of_admins;
			}
			if (block_.fg == 5814 and world_.guild_id != 0) {
				uint32_t guild_id = world_.guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					if (not case_) {
						memcpy(blc + (count_of_admins == 1 ? 30 : 30 + ((count_of_admins - 1) * 4)) + 4, &guild_information->guild_mascot[0], 2);
						memcpy(blc + (count_of_admins == 1 ? 30 : 30 + ((count_of_admins - 1) * 4)) + 6, &guild_information->guild_mascot[1], 2);
						memcpy(blc + (count_of_admins == 1 ? 30 : 30 + ((count_of_admins - 1) * 4)) + 8, &guild_information->guild_level, 2);
						memcpy(blc + (count_of_admins == 1 ? 30 : 30 + ((count_of_admins - 1) * 4)) + 12, &guild_information->unlocked_mascot, 1);
					}
					else {
						memcpy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 4, &guild_information->guild_mascot[0], 2);
						memcpy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 6, &guild_information->guild_mascot[1], 2);
						memcpy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 8, &guild_information->guild_level, 2);
						memcpy(blc + (count_of_admins == 1 ? 22 : 22 + ((count_of_admins - 1) * 4)) + 12, &guild_information->unlocked_mascot, 1);
					}
					if (case_) {
						blc += 26 + (count_of_admins * 4);
						return 26 + (count_of_admins * 4);
					}
				}
			}
			else {
				blc += 10 + (count_of_admins * 4);
				return 10 + (count_of_admins * 4);
			}
			break;
		}
		case BlockTypes::MAIN_DOOR:
		{
			BYTE btype = 1;
			memcpy(blc + 8, &btype, 1);
			string text = "EXIT";
			int l_ = (int)text.size();
			memcpy(blc + 9, &l_, 2);
			memcpy(blc + 11, text.c_str(), l_);
			if (case_) {
				blc += 4 + l_;
				return 4 + l_;
			}
			break;
		}
		case BlockTypes::SEED:
		{
			int visual = block_.flags | 0x100000;
			memcpy(blc + 4, &visual, 4);
			BYTE data_type = 4;
			memcpy(blc + 8, &data_type, 1);
			uint32_t laikas = uint32_t((time(nullptr) - block_.planted <= items[block_.fg].growTime ? time(nullptr) - block_.planted : items[block_.fg].growTime));
			uint8_t count = uint8_t(block_.fruit);
			memcpy(blc + 9, &laikas, 4);
			memcpy(blc + 13, &count, 1);
			if (case_) {
				blc += 6;
				return 6;
			}
			break;
		}
		case BlockTypes::DOOR: case BlockTypes::PORTAL:
		{
			BYTE data_type = 1;
			memcpy(blc + 8, &data_type, 1);
			string duru_tekstas = (block_.txt.empty() ? (block_.door_destination.empty() ? "" : (block_.door_destination.find(":") != string::npos ? explode(":", block_.door_destination)[0] + "..." : block_.door_destination)) : block_.txt);
			uint32_t dydis = uint32_t(duru_tekstas.size());
			memcpy(blc + 9, &dydis, 2);
			memcpy(blc + 11, duru_tekstas.c_str(), dydis);
			uint8_t locked_ = (block_.open ? 0 : 0x08);
			memcpy(blc + 11 + dydis, &locked_, 1);
			if (case_) {
				blc += 4 + dydis;
				return 4 + dydis;
			}
			break;
		}
		case BlockTypes::SIGN:
		{
			BYTE data_type = 2;
			memcpy(blc + 8, &data_type, 1);
			string sign_tekstas = block_.txt;
			uint32_t dydis = uint32_t(sign_tekstas.size());
			memcpy(blc + 9, &dydis, 2);
			memcpy(blc + 11, sign_tekstas.c_str(), dydis);
			uint32_t nzn_kas = 0;
			memcpy(blc + 11 + dydis, &nzn_kas, 1);
			if (case_) {
				blc += 7 + dydis;
				return 7 + dydis;
			}
			break;
		}
		}
	}
	return 0;
}
void upd_lock(WorldBlock block_2, World world_, ENetPeer* peer) {
	int l_x = block_2.lock_origin % 100;
	int l_y = block_2.lock_origin / 100;
	WorldBlock block_ = world_.blocks[l_x + (l_y * 100)];
	vector<WorldBlock> shadow_copy_2 = world_.blocks;
	vector<vector<int>> locked_tiles_around_lock{};
	vector<int> new_tiles{};
	new_tiles.push_back(l_x + (l_y * 100));
	try {
		for (int i2 = 0; i2 < new_tiles.size(); i2++) {
			int s_x_ = new_tiles.at(i2) % 100, s_y_ = new_tiles.at(i2) / 100;
			if (s_x_ < 99 and shadow_copy_2.at(s_x_ + 1 + (s_y_ * 100)).locked and shadow_copy_2.at(s_x_ + 1 + (s_y_ * 100)).lock_origin == (l_x + (l_y * 100))) {
				if (not shadow_copy_2.at(s_x_ + 1 + (s_y_ * 100)).scanned) {
					shadow_copy_2.at(s_x_ + 1 + (s_y_ * 100)).scanned = true;
					new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
					locked_tiles_around_lock.push_back({ s_x_ + 1, s_y_ });
				}
			} if (s_x_ > 0 and shadow_copy_2.at(s_x_ - 1 + (s_y_ * 100)).locked and shadow_copy_2.at(s_x_ - 1 + (s_y_ * 100)).lock_origin == (l_x + (l_y * 100))) {
				if (not shadow_copy_2.at(s_x_ - 1 + (s_y_ * 100)).scanned) {
					shadow_copy_2.at(s_x_ - 1 + (s_y_ * 100)).scanned = true;
					new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
					locked_tiles_around_lock.push_back({ s_x_ - 1, s_y_ });
				}
			} if (s_y_ < 59 and shadow_copy_2.at(s_x_ + ((s_y_ + 1) * 100)).locked and shadow_copy_2.at(s_x_ + ((s_y_ + 1) * 100)).lock_origin == (l_x + (l_y * 100))) {
				if (not shadow_copy_2.at(s_x_ + ((s_y_ + 1) * 100)).scanned) {
					shadow_copy_2.at(s_x_ + ((s_y_ + 1) * 100)).scanned = true;
					new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
					locked_tiles_around_lock.push_back({ s_x_, s_y_ + 1 });
				}
			} if (s_y_ > 0 and shadow_copy_2.at(s_x_ + ((s_y_ - 1) * 100)).locked and shadow_copy_2.at(s_x_ + ((s_y_ - 1) * 100)).lock_origin == (l_x + (l_y * 100))) {
				if (not shadow_copy_2.at(s_x_ + ((s_y_ - 1) * 100)).scanned) {
					shadow_copy_2.at(s_x_ + ((s_y_ - 1) * 100)).scanned = true;
					new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
					locked_tiles_around_lock.push_back({ s_x_, s_y_ - 1 });
				}
			}
		}
	}
	catch (out_of_range) {

	}
	int lock_size = locked_tiles_around_lock.size();
	if (locked_tiles_around_lock.size() != 0) {
		PlayerMoving data_{};
		data_.packetType = 15, data_.punchX = l_x, data_.punchY = l_y, data_.characterState = 0x8;
		data_.netID = peer == NULL ? -1 : (block_.owner_name == pInfo(peer)->tankIDName ? pInfo(peer)->id : -1);
		data_.plantingTree = block_.fg;
		BYTE* raw;
		raw = packPlayerMoving(&data_, 112 + (locked_tiles_around_lock.size() * 2) + alloc_(&world_, &block_));
		int lalala = 8;
		memcpy(raw + 8, &lock_size, 2);
		memcpy(raw + 12, &lalala, 2);
		BYTE* blc = raw + 56;
		for (int i_ = 0; i_ < locked_tiles_around_lock.size(); i_++) {
			vector<int> update_tiles = locked_tiles_around_lock[i_];
			int x = update_tiles[0];
			int y = update_tiles[1];
			int sq_ = x + (y * 100);
			memcpy(blc + (i_ * 2), &sq_, 2);
			shadow_copy_2[x + (y * 100)].scanned = false;
		}
		PlayerMoving data_2{};
		data_2.packetType = 5, data_2.punchX = l_x, data_2.punchY = l_y, data_2.characterState = 0x8;
		BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(&world_, &block_));
		BYTE* blc2 = raw2 + 56;
		form_visual(blc2, block_, world_, peer, false);
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) { //fix
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (world_.name == pInfo(currentPeer)->world) {
				send_raw(currentPeer, 4, raw, 112 + (locked_tiles_around_lock.size() * 2) + alloc_(&world_, &block_), ENET_PACKET_FLAG_RELIABLE);
				send_raw(currentPeer, 4, raw2, 112 + alloc_(&world_, &block_), ENET_PACKET_FLAG_RELIABLE);
			}
		}
		delete[] raw, blc;
		delete[] raw2, blc2;
	}
	else {
		PlayerMoving data_{};
		data_.packetType = 15, data_.punchX = l_x, data_.punchY = l_y, data_.characterState = 0x8;
		data_.netID = block_.owner_name == pInfo(peer)->tankIDName ? pInfo(peer)->id : -1;
		data_.plantingTree = block_.fg;
		BYTE* raw = packPlayerMoving(&data_, 56);
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (world_.name == pInfo(currentPeer)->world) {
				send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				PlayerMoving data_2{};
				data_2.packetType = 5, data_2.punchX = l_x, data_2.punchY = l_y, data_2.characterState = 0x8;
				BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(&world_, &block_));
				BYTE* blc2 = raw2 + 56;
				form_visual(blc2, block_, world_, currentPeer, false);
				send_raw(currentPeer, 4, raw2, 112 + alloc_(&world_, &block_), ENET_PACKET_FLAG_RELIABLE);
				delete[] raw2, blc2;
			}
		}
		delete[] raw;
	}
}
void npc_set(ENetPeer* peer, int netid, int hair, int shirt, int pants, int feet, int face, int hand, int back, int hat, int a, int skincolor) {
	gamepacket_t p(0, netid);
	p.Insert("OnSetClothing");
	p.Insert((float)hair, (float)shirt, (float)pants); // hair shirt pants
	p.Insert((float)feet, (float)face, (float)hand); // feet face hand 
	p.Insert((float)back, (float)hat, (float)a);
	p.Insert(skincolor);
	p.Insert((float)0, 0, 0); // tie kiti 2 tai nzn   
	p.CreatePacket(peer);
}

void g_spawn(ENetPeer* peer, string nick, int x, int y, int netid, string country) {
	gamepacket_t ps;
	ps.Insert("OnSpawn");
	ps.Insert("spawn|avatar\nnetID|" + to_string(netid) + "\nuserID|38214\ncolrect|0|0|20|30\nposXY|" + to_string(x) + "|" + to_string(y) + "\nname|" + nick + "\ncountry|" + country + "\ninvis|0\nmstate|0\nsmstate|0"), ps.CreatePacket(peer);
}
void add_ipban(ENetPeer* peer) {
	vector<string> bans;
	ifstream ifs("db/ip.json");
	if (ifs.is_open()) {
		json j;
		ifs >> j;
		vector<string> bans2 = j["ip"];
		bans = bans2;
	}
	ipbans.push_back(pInfo(peer)->ip);
	bans.push_back(pInfo(peer)->ip);
	ofstream o("db/ip.json");
	if (!o.is_open()) return;
	json j;
	j["ip"] = bans;
	o << j << endl;
	o.close();
	pInfo(peer)->bans.push_back("`6ON:`` `#" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) + "`` `0(" + pInfo(peer)->requestedName + ") #" + to_string(pInfo(peer)->netID) + "`` IP BAN: " + pInfo(peer)->ip + " ");
}

void replaceAll(string& str, const string& from, const string& to) {
	if (from.empty())return;
	size_t start_pos = 0;
	while ((start_pos = str.find(from, start_pos)) != string::npos) {
		str.replace(start_pos, from.length(), to);
		start_pos += to.length(); // In case 'to' contains 'from', like replacing 'x' with 'yx'
	}
}

string fixchar(string name) {
	string newS;
	for (char c : name) newS += (c >= 'A' && c <= 'Z') ? c - ('A' - 'a') : c;
	string ret;
	for (int i = 0; i < newS.length(); i++) if (newS[i] == '`') i++; else ret += newS[i];
	string ret2;
	for (char c : ret) if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) ret2 += c;
	return ret2;
}

string detailMSTime(int milliseconds) {
	long hr = milliseconds / 3600000;
	milliseconds = milliseconds - 3600000 * hr;
	long min = milliseconds / 60000;
	milliseconds = milliseconds - 60000 * min;
	long sec = milliseconds / 1000;
	milliseconds = milliseconds - 1000 * sec;
	return (hr > 0 ? to_string(hr) + ":" : "") + to_string(min) + ":" + (sec >= 10 ? to_string(sec) + "." : "0" + to_string(sec) + ".") + to_string(milliseconds / 10);
}

inline void farmer_reward_show(ENetPeer* peer) {
	string prize = "";
	vector<int> list{ 98, 228, 1746, 1778, 1830, 5078, 1966, 6948, 6946, 4956 };
	for (int i = 0, lvl = 0; i < list.size(); i++) {
		bool ok = (i == 9 ? true : false);
		if (find(pInfo(peer)->t_p.begin(), pInfo(peer)->t_p.end(), lvl += 5) != pInfo(peer)->t_p.end()) {
			prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Farmer Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`r(Unlocked) " + (list[i] == 228 || list[i] == 1746 || list[i] == 1778 ? "200" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`r(Unlocked) Unique Farmer's Flag and skin! - Show off your mastery with a flag beside your name``|left|7064|" : "") + "\nadd_spacer|small|";
		}
		else if (pInfo(peer)->t_lvl >= lvl) {
			prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Farmer Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 228 || list[i] == 1746 || list[i] == 1778 ? "200" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Farmer's Flag and skin! - Show off your mastery with a flag beside your name``|left|7064|" : "") + "\nadd_small_font_button|t_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
		}
		else if (pInfo(peer)->t_lvl < lvl) {
			prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Farmer Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`s(Locked) " + (list[i] == 228 || list[i] == 1746 || list[i] == 1778 ? "200" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`s(Locked) Unique Farmer's Flag and skin! - Show off your mastery with a flag beside your name``|left|7064|" : "");
		}
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|Farmer Rewards|left|7064|\nadd_spacer|small|\nadd_textbox|`9Harvest your trees and receive awesome Farmer Rewards everyday by leveling up``|left|" + prize + "\nadd_player_info|`oFarmer``|" + to_string(pInfo(peer)->t_lvl) + "|" + to_string(pInfo(peer)->t_xp) + "|" + to_string(100 * ((pInfo(peer)->t_lvl * pInfo(peer)->t_lvl) + 2)) + "|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
	p.CreatePacket(peer);
}
inline void builder_reward_show(ENetPeer* peer) {
	string prize = "";
	vector<int> list{ 6896, 5212, 6948, 1068, 1966, 1836, 5080, 10754, 1874, 6946 };
	for (int i = 0, lvl = 0; i < list.size(); i++) {
		bool ok = (i == 9 ? true : false);
		if (find(pInfo(peer)->bb_p.begin(), pInfo(peer)->bb_p.end(), lvl += 5) != pInfo(peer)->bb_p.end()) {
			prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Builder Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`r(Unlocked) " + (list[i] == 5212 ? "1" : "") + "" + (list[i] == 1068 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`r(Unlocked) Unique Builder's Flag and skin! - Show off your mastery with a flag beside your name``|left|7070|" : "") + "\nadd_spacer|small|";
		}
		else if (pInfo(peer)->bb_lvl >= lvl) {
			prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Builder Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 5212 ? "1" : "") + "" + (list[i] == 1068 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`w(Unlocked) Unique Builder's Flag and skin! - Show off your mastery with a flag beside your name``|left|7070|" : "") + "\nadd_small_font_button|b_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
		}
		else if (pInfo(peer)->bb_lvl < lvl) {
			prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Builder Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`s(Locked) " + (list[i] == 5212 ? "1" : "") + "" + (list[i] == 1068 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|" + (ok ? "\nadd_label_with_icon|small|`s(Locked) Unique Builder's Flag and skin! - Show off your mastery with a flag beside your name``|left|7070|" : "");
		}
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|Builder Rewards|left|7070|\nadd_spacer|small|\nadd_textbox|`9Keep breaking blocks and achieve awesome rewards everyday by leveling up``|left|" + prize + "\nadd_player_info|`oBuilder``|" + to_string(pInfo(peer)->bb_lvl) + "|" + to_string(pInfo(peer)->bb_xp) + "|" + to_string(100 * ((pInfo(peer)->bb_lvl * pInfo(peer)->bb_lvl) + 2)) + "|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
	p.CreatePacket(peer);
}
inline void provider_reward_show(ENetPeer* peer) {
	string prize = "";
	vector<int> list{ 1008,1044,872,10450,870,5084,876,6950,6952,1674 };
	for (int i = 0, lvl = 0; i < list.size(); i++) {
		if (find(pInfo(peer)->p_p.begin(), pInfo(peer)->p_p.end(), lvl += 5) != pInfo(peer)->p_p.end()) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Provider Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`r(Unlocked) " + (list[i] == 1008 ? "5" : list[i] == 1044 ? "50" : list[i] == 872 ? "200" : list[i] == 10450 ? "3" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_spacer|small|";
		else if (pInfo(peer)->p_lvl >= lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Provider Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 1008 ? "5" : list[i] == 1044 ? "50" : list[i] == 872 ? "200" : list[i] == 10450 ? "3" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_small_font_button|p_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
		else if (pInfo(peer)->p_lvl < lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Provider Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`s(Locked) " + (list[i] == 1008 ? "5" : list[i] == 1044 ? "50" : list[i] == 872 ? "200" : list[i] == 10450 ? "3" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|";
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|Provider Rewards|left|866|\nadd_spacer|small|\nadd_textbox|`9A provider is a non-solid foreground block which can be harvested periodically (time depends on the provider) for an item. Harvest your providers and earn awesome rewards by leveling up!``|left|" + prize + "\nadd_player_info|`oProvider``|" + to_string(pInfo(peer)->p_lvl) + "|" + to_string(pInfo(peer)->p_xp) + "|" + to_string(75 * ((pInfo(peer)->p_lvl * pInfo(peer)->p_lvl) + 2)) + "|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
	p.CreatePacket(peer);
}
inline void geiger_reward_show(ENetPeer* peer) {
	string prize = "";
	vector<int> list{ 4654,262,826,828,9712,3146,2266,5072,5070,9716 };
	for (int i = 0, lvl = 0; i < list.size(); i++) {
		if (find(pInfo(peer)->g_p.begin(), pInfo(peer)->g_p.end(), lvl += 5) != pInfo(peer)->g_p.end()) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Geiger Hunting Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`r(Unlocked) " + (list[i] == 262 || list[i] == 826 || list[i] == 828 ? "50" : list[i] == 3146 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_spacer|small|";
		else if (pInfo(peer)->g_lvl >= lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Geiger Hunting Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 262 || list[i] == 826 || list[i] == 828 ? "50" : list[i] == 3146 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_small_font_button|g_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
		else if (pInfo(peer)->g_lvl < lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Geiger Hunting Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`s(Locked) " + (list[i] == 262 || list[i] == 826 || list[i] == 828 ? "50" : list[i] == 3146 ? "10" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|";
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|small|Geiger Hunting Rewards|left|2204|\nadd_spacer|small|\nadd_textbox|`9Once the player stands for a few moments on the source of radioactivity, the item they found will be added into their inventory. Hunt the items with your geiger and claim your prizes for leveling up!``|left|" + prize + "\nadd_player_info|`oGeiger Hunting``|" + to_string(pInfo(peer)->g_lvl) + "|" + to_string(pInfo(peer)->g_xp) + "|" + to_string(5 * ((pInfo(peer)->g_lvl * pInfo(peer)->g_lvl) + 2)) + "|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
	p.CreatePacket(peer);
}
inline void fishing_reward_show(ENetPeer* peer) {
	string prize = "";
	vector<int> list{ 3010, 3018, 3020, 3044, 5740, 3042, 3098, 3100, 3040, 10262 };
	for (int i = 0, lvl = 0; i < list.size(); i++) {
		if (find(pInfo(peer)->ff_p.begin(), pInfo(peer)->ff_p.end(), lvl += 5) != pInfo(peer)->ff_p.end()) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Fishing Hunting Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`r(Unlocked) " + (list[i] == 3018 ? "200" : list[i] == 3020 || list[i] == 3098 ? "25" : list[i] == 3044 || list[i] == 3218 ? "50" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_spacer|small|";
		else if (pInfo(peer)->ff_lvl >= lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Fishing Hunting Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 3018 ? "200" : list[i] == 3020 || list[i] == 3098 ? "25" : list[i] == 3044 || list[i] == 3218 ? "50" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_small_font_button|f_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
		else if (pInfo(peer)->ff_lvl < lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Fishing Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`s(Locked) " + (list[i] == 3018 ? "200" : list[i] == 3020 || list[i] == 3098 ? "25" : list[i] == 3044 || list[i] == 3218 ? "50" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|";
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|Fishing Rewards|left|7072|\nadd_spacer|small|\nadd_textbox|`9In Growtopia, fishing can be done by using bait on water while holding a Fishing Rod. The result from fishing can either be Fish or some random items that are obtainable through fishing.``|left|" + prize + "\nadd_player_info|`oFishing``|" + to_string(pInfo(peer)->ff_lvl) + "|" + to_string(pInfo(peer)->ff_xp) + "|" + to_string(5 * ((pInfo(peer)->ff_lvl * pInfo(peer)->ff_lvl) + 2)) + "|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
	p.CreatePacket(peer);
}
inline void surgery_reward_show(ENetPeer* peer) {
	string prize = "";
	vector<int> list{ 6900, 6982, 2002, 6212, 3172, 9068, 6912, 10836, 3130, 8284 };
	for (int i = 0, lvl = 0; i < list.size(); i++) {
		if (find(pInfo(peer)->surg_p.begin(), pInfo(peer)->surg_p.end(), lvl += 5) != pInfo(peer)->surg_p.end()) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Surgeon Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`r(Unlocked) " + (list[i] == 6212 ? "50" : list[i] == 3172 || list[i] == 6912 ? "25" : list[i] == 10836 ? "100" : list[i] == 2002 ? "1" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_spacer|small|";
		else if (pInfo(peer)->s_lvl >= lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Surgeon Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`w(Unlocked) " + (list[i] == 6212 ? "50" : list[i] == 3172 || list[i] == 6912 ? "25" : list[i] == 10836 ? "100" : list[i] == 2002 ? "1" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|\nadd_small_font_button|s_claimreward" + to_string(i + 1) + "|Claim Reward|noflags|0|0|";
		else if (pInfo(peer)->s_lvl < lvl) prize += "\nadd_smalltext|`w#" + to_string(i + 1) + ": Reach Surgeon Level " + to_string(lvl) + " to claim this reward:``|left|\nadd_label_with_icon|small|`s(Locked) " + (list[i] == 6212 ? "50" : list[i] == 3172 || list[i] == 6912 ? "25" : list[i] == 10836 ? "100" : list[i] == 2002 ? "1" : "") + " " + items[list[i]].name + "``|left|" + to_string(list[i]) + "|";
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|Surgeon Rewards|left|7068|\nadd_spacer|small|\nadd_textbox|`9Surgery is a feature in Growtopia that allows players to perform various types of surgeries on other players using various tools. It was first introduced in the Growtopia General Hospital update on November 21, 2013.`` `2Surgery XP is only added if the surgery was performed on a real pacient.``|left|" + prize + "\nadd_player_info|`oSurgeon``|" + to_string(pInfo(peer)->s_lvl) + "|" + to_string(pInfo(peer)->s_xp) + "|" + to_string(10 * ((pInfo(peer)->s_lvl * pInfo(peer)->s_lvl) + 2)) + "|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
	p.CreatePacket(peer);
}

void add_role_xp(ENetPeer* peer, uint8_t amount, string eventname) {
	int required = 0;
	bool levelup = false;
	int nowlevel = 0;
	if (eventname == "provider") {
		pInfo(peer)->p_xp += amount;
		required = 75 * ((pInfo(peer)->p_lvl * pInfo(peer)->p_lvl) + 2);
		if (pInfo(peer)->p_xp >= 75 * ((pInfo(peer)->p_lvl * pInfo(peer)->p_lvl) + 2)) {
			pInfo(peer)->p_lvl++;
			nowlevel = pInfo(peer)->p_lvl;
			pInfo(peer)->p_xp -= required;
			levelup = true;
		}
	}
	else if (eventname == "geiger") {
		pInfo(peer)->g_xp += amount;
		required = 5 * ((pInfo(peer)->g_lvl * pInfo(peer)->g_lvl) + 2);
		if (pInfo(peer)->g_xp >= 5 * ((pInfo(peer)->g_lvl * pInfo(peer)->g_lvl) + 2)) {
			pInfo(peer)->g_lvl++;
			nowlevel = pInfo(peer)->g_lvl;
			pInfo(peer)->g_xp -= required;
			levelup = true;
		}
	}
	else if (eventname == "farmer") {
		pInfo(peer)->t_xp += amount;
		required = 100 * ((pInfo(peer)->t_lvl * pInfo(peer)->t_lvl) + 2);
		if (pInfo(peer)->t_xp >= 100 * ((pInfo(peer)->t_lvl * pInfo(peer)->t_lvl) + 2)) {
			pInfo(peer)->t_lvl++;
			nowlevel = pInfo(peer)->t_lvl;
			pInfo(peer)->t_xp -= required;
			levelup = true;
		}
	}
	else if (eventname == "builder") {
		pInfo(peer)->bb_xp += amount;
		required = 100 * ((pInfo(peer)->bb_lvl * pInfo(peer)->bb_lvl) + 2);
		if (pInfo(peer)->bb_xp >= 100 * ((pInfo(peer)->bb_lvl * pInfo(peer)->bb_lvl) + 2)) {
			pInfo(peer)->bb_lvl++;
			nowlevel = pInfo(peer)->bb_lvl;
			pInfo(peer)->bb_xp -= required;
			levelup = true;
		}
	}
	else if (eventname == "fishing") {
		pInfo(peer)->ff_xp += amount;
		required = 5 * ((pInfo(peer)->ff_lvl * pInfo(peer)->ff_lvl) + 2);
		if (pInfo(peer)->ff_xp >= 5 * ((pInfo(peer)->ff_lvl * pInfo(peer)->ff_lvl) + 2)) {
			pInfo(peer)->ff_lvl++;
			nowlevel = pInfo(peer)->ff_lvl;
			pInfo(peer)->ff_xp -= required;
			levelup = true;
		}
	}
	else if (eventname == "surgeon") {
		pInfo(peer)->s_xp += amount;
		required = 10 * ((pInfo(peer)->s_lvl * pInfo(peer)->s_lvl) + 2);
		if (pInfo(peer)->s_xp >= 10 * ((pInfo(peer)->s_lvl * pInfo(peer)->s_lvl) + 2)) {
			pInfo(peer)->s_lvl++;
			nowlevel = pInfo(peer)->s_lvl;
			pInfo(peer)->s_xp -= required;
			levelup = true;
		}
	}
}

void send_bubble(ENetPeer* peer, int const& netID, string const& message) {
	gamepacket_t packet;
	packet.Insert("OnTalkBubble");
	packet.Insert(netID);
	packet.Insert(message);
	packet.Insert(0), packet.Insert(0);
	packet.CreatePacket(peer);
}

void daily_quest() {
	srand(time(NULL));
	string dqitems = "", eventday = "";
	struct tm newtime;
	time_t now = time(0);
	localtime_s(&newtime, &now);
	today_day = newtime.tm_mday;
	int todayday = newtime.tm_wday;
	ifstream ifs("daily_quest.json");
	if (ifs.is_open()) {
		json j;
		ifs >> j;
		item1 = j["item1"].get<int>();
		item2 = j["item2"].get<int>();
		item1c = j["item1c"].get<int>();
		item2c = j["item2c"].get<int>();
		day_ = j["day"].get<int>();
	}
	if (day_ != today_day) {
		vector<int> random_xy{ -1, 0 };
		vector<int> list{ 231,487,483,2019,427,1757,2009,281,781,329,459,1041,421,2787,2789,1043,2797,181,613,65,4983,283,553,425,4635,987,627,2017,989,61,4639,973,3523,331,265,859,433,253,339,1105,439,4567,333,677,5673,1427,5603,183,10533,5731,7223,10833,6035,6813,1113,1047,653,2811,4703,1429,847,665,485,1613,833,2025,1775,3931,429,3831,423,437,1773,4767,1299,361,667,2815,3473,301,4637,5683,2709,415,955,461,861,9389,5467,2791,2815,1803,419,2027,685,555,741,10531,5729,7221,10831,6033,6811,621,6401,1107,359,3471,855,309,1685,1449,1309,441,1111,221,1431,3065,9307,1257,1501,1109,4641,3587,1103,417,743,431,3823,2949,1131,3825,727,5379,729,187,787,5459,4785,3261,3521,2293,2309,2321,2333,5461,3721,327,247,63,3479,445,4783,299,863,8935,1451,261,1871,1499,455,9391,683,1159,551,1745,411,3005,557,687,4799,559,4643,3899,1605,9309,567,565,1154,3827,1327,1767,993,1157,563,4721,115,1423,10515,1329,6545,287,669,777,5463,1655,1599,561,4585,3413,4745,1771,2011,1161,1729,3757,3753,321,3265,3263,623,775,6397,129,4667,759,3767,1529,6543,4707,3835,1435,651,8929,569,527,3287,1595,6063,2795,1003,1731,4943,4963,597,4669,1531,1523,625,4297,599,657,571,873,3755,2969,1725,4603,1447,3267,5375,1683 };
		vector<int> list2{ 3567, 13, 57, 17, 381, 1139, 21, 101, 379, 117, 27, 23, 581, 195, 105, 191, 377, 1307, 697, 881, 167, 185, 1323, 165, 3783, 369, 25, 171, 53, 103, 179, 29, 249, 177, 1325, 337, 189, 169, 55, 223, 175, 885, 119, 3573, 199, 549, 681, 655, 107, 163, 31, 671, 889, 887, 193, 127, 1433, 173, 7631, 413, 3571, 3569, 2809, 9393, 225, 111, 109, 201, 59, 607, 285, 2029, 2013, 2015, 1611, 995, 997, 963, 1481, 219, 197, 2023, 2021, 9331, 1305, 823, 1039, 231, 487, 483, 2019, 427, 1757, 2009, 281, 781, 329, 459, 1041, 421, 2787, 2789, 1043, 2797, 181, 613, 65, 4983, 283, 553, 425, 4635, 987, 627, 2017, 989, 61, 4639, 973, 3523, 331, 265, 859, 433, 253, 339, 1105, 439, 4567, 333, 677, 5673, 1427, 5603, 183, 10533, 5731, 7223, 10833, 6035, 6813, 1113, 1047, 653, 2811, 4703, 1429, 847, 665 };
		item1 = list[rand() % list.size()] + random_xy[rand() % random_xy.size()];
		item2 = list2[rand() % list2.size()] + random_xy[rand() % random_xy.size()];
		item1c = rand() % 150 + 1;
		item2c = rand() % 150 + 1;
		day_ = today_day;
		dqitems += "" + to_string(item1c) + " " + items[item1].name + "\n" + to_string(item2c) + " " + items[item2].name + "";
		ofstream o("daily_quest.json");
		if (!o.is_open()) cout << "daily quest error " << GetLastError() << endl;
		json j;
		j["item1"] = item1;
		j["item2"] = item2;
		j["item1c"] = item1c;
		j["item2c"] = item2c;
		j["day"] = day_;
		o << j << endl;
		if (todayday == 1) eventday += ("Farming Day");
		else if (todayday == 2) eventday += ("Breaking Day");
		else if (todayday == 3) eventday += ("Geiger Day");
		else if (todayday == 4) eventday += ("Leveling Day");
		else if (todayday == 5) eventday += ("Extra Gems Day");
		else if (todayday == 6) eventday += ("Surgery Day");
		else if (todayday == 0) eventday += ("Fishing Day");
		gamepacket_t p;
		p.Insert("OnConsoleMessage"), p.Insert("`2*** The Daily Quest Update``: requires `$" + to_string(item1c) + " " + items[item1].name + "`` and `$" + to_string(item2c) + " " + items[item2].name + "``. Go tell the `5Crazy Jim``!");
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			packet_(currentPeer, "action|play_sfx\nfile|audio/cash_register.wav\ndelayMS|0");
			p.CreatePacket(currentPeer);
			pInfo(currentPeer)->AlreadyDailyQ = false;
		}
	}
}

void add_oan(ENetPeer* peer, string who, long long int seconds, string reason) {
	string path_ = "players/" + who + "_.json";
	if (_access_s(path_.c_str(), 0) == 0) {
		json r_;
		ifstream f_(path_, ifstream::binary);
		if (f_.fail()) return;
		f_ >> r_;
		f_.close();
		{
			json f_ = r_["b_t"].get<int>();
			if (seconds == 729) r_["b_s"] = (6.307e+7 * 1000);
			else if (seconds == 31)r_["b_s"] = (2.678e+6 * 1000);
			else r_["b_s"] = (seconds * 1000);
			r_["b_r"] = reason;
			r_["b_b"] = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
			r_["b_t"] = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			if (seconds == 0) {
				r_["b_t"] = 0;
				r_["b_s"] = 0;
				r_["b_r"] = "";
				r_["b_b"] = "";
				r_["b_t"] = 0;
			}
			else {
				if (seconds == 729) seconds = 6.307e+7;
				if (seconds == 31) seconds = 2.678e+6;

			}
		}
		{
			ofstream f_(path_, ifstream::binary);
			f_ << r_;
			f_.close();
		}
	}
}
void add_ban(ENetPeer* peer, long long int seconds, string reason, string bannedby) {
	if (has_playmod(pInfo(peer), "Punished!")) {
		int time_ = 0;
		for (PlayMods peer_playmod : pInfo(peer)->playmods) {
			if (peer_playmod.id == 32) {
				time_ = peer_playmod.time - time(nullptr);
				break;
			}
		}
		packet_(peer, "action|log\nmsg|>> (" + to_playmod_time(time_) + "before you can able to punish again)", "");
		return;
	}
	if (pInfo(peer)->b_t + (seconds * 1000) < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
		struct tm newtime;
		time_t now = time(0);
		localtime_s(&newtime, &now);
		//pInfo(peer)->logs.push_back("" + to_string(newtime.tm_mon + 1) + "/" + to_string(today_day) + "/2021 " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min)) + ":" + to_string(newtime.tm_sec) + " " + bannedby + " - >> Ban for " + to_string(seconds) + " seconds(" + reason + ")");
		if (reason != "Curse Wand Effect") pInfo(peer)->bans.push_back("`6ON:`` `#" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) + "`` `0(" + pInfo(peer)->requestedName + ") #" + to_string(pInfo(peer)->netID) + "`` Time: " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds") + " IP: " + pInfo(peer)->ip + " (banned by: " + bannedby + ", reason: " + reason + ") ");
		pInfo(peer)->b_s = (seconds * 1000);
		pInfo(peer)->b_r = reason;
		pInfo(peer)->b_b = bannedby;
		pInfo(peer)->b_t = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
		update_clothes(peer);
		{
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`oReality flickers as you begin to wake up. (`$Ban`` mod added, " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds") + " left)");
			p.CreatePacket(peer);
			packet_(peer, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
		}
		gamepacket_t p, p2;
		p.Insert("OnConsoleMessage");
		p.Insert((bannedby == "System" ? "`4**`` " + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) + " `4AUTO-BANNED BY SYSTEM **`` (/rules to view rules)" : "`#**`` `$The Ancients`` have used `#Ban`` on ``" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`` `#**``"));
		p2.Insert("OnConsoleMessage");
		p2.Insert("`#**`` `$The Ancient Ones`` have `4banned`` " + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`` `#**`` (`4/rules`` to see the rules!)");
		gamepacket_t p3(0, pInfo(peer)->netID);
		p3.Insert("OnPlayPositioned");
		p3.Insert("audio/keypad_hit.wav");
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (pInfo(currentPeer)->world == pInfo(peer)->world) {
				p.CreatePacket(currentPeer), p3.CreatePacket(currentPeer);
			}
			else {
				p2.CreatePacket(currentPeer);
			}
		}
		{
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`oWarning from `4System``: You've been `4BANNED`` from `wGrowtopia`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
			p.CreatePacket(peer);
			{
				gamepacket_t p;
				p.Insert("OnAddNotification");
				p.Insert("interface/atomic_button.rttex");
				p.Insert("`wWarning from `4System``: You've been `4BANNED`` from Growtopia for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
				p.Insert("audio/hub_open.wav");
				p.Insert(0);
				p.CreatePacket(peer);
			}
		}
		enet_peer_disconnect_later(peer, 0);
	}
}


void add_mute(ENetPeer* peer, int seconds, string reason, string muttedby) {
	if (has_playmod(pInfo(peer), "Punished!")) {
		int time_ = 0;
		for (PlayMods peer_playmod : pInfo(peer)->playmods) {
			if (peer_playmod.id == 32) {
				time_ = peer_playmod.time - time(nullptr);
				break;
			}
		}
		packet_(peer, "action|log\nmsg|>> (" + to_playmod_time(time_) + "before you can able to punish again)", "");
		return;
	}
	if (not has_playmod(pInfo(peer), "duct tape")) {
		PlayMods give_playmod{};
		give_playmod.id = 11;
		give_playmod.time = time(nullptr) + seconds;
		pInfo(peer)->playmods.push_back(give_playmod);
		pInfo(peer)->m_r = reason;
		update_clothes(peer);
		{
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`oDuct tape has covered your mouth! (`$Duct Tape`` mod added, " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds") + " left)");
			p.CreatePacket(peer);
		}
		gamepacket_t p;
		p.Insert("OnConsoleMessage");
		p.Insert("`#**`` `$The Gods`` have duct-taped " + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`o's mouth `#**`` (`4/rules`` to see the rules!)");
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			p.CreatePacket(currentPeer);
		}
		{
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`oWarning from `4Admin``: You've been `4duct-taped`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
			p.CreatePacket(peer);
			{
				gamepacket_t p;
				p.Insert("OnAddNotification");
				p.Insert("interface/atomic_button.rttex");
				p.Insert("`wWarning from `4Admin``: You've been `4duct-taped`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
				p.Insert("audio/hub_open.wav");
				p.Insert(0);
				p.CreatePacket(peer);
			}
		}
	}
}
void SendRespawn(ENetPeer* peer, bool kickall, int instant, bool kill = false) {
	if (pInfo(peer)->trading_with != -1) {
		cancel_trade(peer, false, true);
	}
	if (pInfo(peer)->respawn_time + 1000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() || kickall) {
		pInfo(peer)->respawn_time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
		string name_ = pInfo(peer)->world;
		vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			WorldBlock* block_ = &world_->blocks[pInfo(peer)->c_x + (pInfo(peer)->c_y * 100)];
			uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
			if (items[t_].blockType == BlockTypes::CHECKPOINT or items[t_].blockType == BlockTypes::MAIN_DOOR) {
			}
			else {
				int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize, square = (int)world_->blocks.size();
				for (int i_ = 0; i_ < square; i_++) {
					if (items[world_->blocks[i_].fg].blockType == BlockTypes::MAIN_DOOR) {
						pInfo(peer)->c_x = (i_ % xSize);
						pInfo(peer)->c_y = (i_ / xSize);
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("SetRespawnPos");
						p.Insert(i_);
						p.CreatePacket(peer);
						break;
					}
				}
			}
		}
		{
			gamepacket_t p(0, pInfo(peer)->netID);
			p.Insert("OnSetFreezeState");
			p.Insert(2);
			p.CreatePacket(peer);
		}

		{
			gamepacket_t p(0, pInfo(peer)->netID);
			p.Insert("SetRespawnPos");
			p.Insert(pInfo(peer)->c_x + (pInfo(peer)->c_y * 100));
			p.CreatePacket(peer);
		}
		{
			if (kill) {
				gamepacket_t p(0, pInfo(peer)->netID);
				p.Insert("OnKilled");
				p.CreatePacket(peer);
			}
		}
		{

			gamepacket_t p((instant == 0 ? 2000 : 100), pInfo(peer)->netID);
			p.Insert("OnSetPos");
			p.Insert(float(pInfo(peer)->c_x) * 32, float(pInfo(peer)->c_y) * 32);
			p.CreatePacket(peer);
		}
		{
			gamepacket_t p((instant == 0 ? 2020 : 100), pInfo(peer)->netID);
			p.Insert("OnPlayPositioned");
			p.Insert("audio/teleport.wav");
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->world == pInfo(peer)->world) {
					p.CreatePacket(currentPeer);
				}
			}
		}
		{
			gamepacket_t p((instant == 0 ? 2000 : 100), pInfo(peer)->netID);
			p.Insert("OnSetFreezeState");
			p.Insert(0);
			p.CreatePacket(peer);
		}
	}
}

void end_surgery(ENetPeer* peer) {
	if (pInfo(peer)->surgery_started) {
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
			if (pInfo(peer)->surged_person != "" && pInfo(peer)->surged_person == pInfo(currentPeer)->tankIDName) SendRespawn(currentPeer, true, 0, 1);
			gamepacket_t p;
			p.Insert("OnConsoleMessage"), p.Insert("`7[```w" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `4failed to save`` " + pInfo(peer)->surged_display + " from " + pInfo(peer)->surgery_name + "!`7]``"), p.CreatePacket(currentPeer);
		}
		gamepacket_t p, p2;
		p.Insert("OnConsoleMessage"), p.Insert("`4The patient has succumbed to infection.`` `4YOUR MEDICAL LICENSE IS REVOKED!``"), p.CreatePacket(peer);
		p2.Insert("OnConsoleMessage"), p2.Insert("You are not allowed to perform surgery for a while! (`$Malpractice`` mod added, `$1 hour`` left)"), p2.CreatePacket(peer);
		if (pInfo(peer)->started_type != 30) {
			PlayMods new_playmod{};
			int seconds = 3600;
			if (pInfo(peer)->pants == 3172) seconds = 0;
			if (pInfo(peer)->necklace == 8954) seconds *= 0.75;
			new_playmod.id = 88, new_playmod.time = time(nullptr) + seconds;
			pInfo(peer)->playmods.push_back(new_playmod);
			if (pInfo(peer)->pants == 3172) {
				gamepacket_t p, p2;
				p.Insert("OnConsoleMessage"), p.Insert("`2Your briefs have stunned the judge!``"), p.CreatePacket(peer);
				p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("`2Your briefs have stunned the judge!``"), p2.CreatePacket(peer);
				int remove = -1;
				modify_inventory(peer, 3172, remove);
			}
		}
		pInfo(peer)->surged_person = "";
		pInfo(peer)->surgery_started = false;
	}
}

void exit_(ENetPeer* peer, bool reset_ = false, bool del = true) {
	end_surgery(peer);
	if (pInfo(peer)->invis == false) {
		add_cctv(peer, "left", "");
		packet_(peer, "action|play_sfx\nfile|audio/door_shut.wav\ndelayMS|0");
	}
	int w_c = 0, s_c = 0, net_ = 0, r_c = 0;
	const string world_name = pInfo(peer)->world;
	pInfo(peer)->x = -1, pInfo(peer)->y = -1, pInfo(peer)->world = "";
	pInfo(peer)->geiger_x = -1, pInfo(peer)->geiger_y = -1, pInfo(peer)->spotlight = false;
	pInfo(peer)->ac_.clear();
	//vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [world_name](const World& a) { return a.name == world_name; });
	//pInfo(peer)->last_infected = 0;
	get_players(world_name, w_c, s_c, net_, r_c);
	if (r_c == 0) { /*issaugoti worlda is istrinti is atminties*/
		map<string, vector<WorldNPC>>::iterator it;
		for (it = active_npc.begin(); it != active_npc.end(); it++) {
			if (it->first == world_name) {
				active_npc.erase(it, active_npc.end());
				break;
			}
		}
		for (int i = 0; i < monitors.size(); i++) {
			if (monitors[i].world_name == world_name) {
				monitors.erase(monitors.begin() + i);
				i--;
				//break; // gali buti daugiau nei vienas
			}
		}
		save_world(world_name, true);

		/*if (p != worlds.end()) {
			__int64 id_ = p - worlds.begin();
			World* world_ = &worlds[id_];
			world_->cctv_settings.clear();
			world_->cctv.clear();
			world_->bulletin.clear();
			world_->bulletins.clear();
			world_->admins.clear();
			world_->blocks.clear();
			world_->drop.clear();
			world_->sbox1.clear();
			world_->gscan.clear();
			world_->npc.clear();
			world_->machines.clear();
			worlds.erase(worlds.begin() + id_);
			// SAVEMEM2
		}*/

	}
	else {
		bool sent = false;
		gamepacket_t p;
		p.Insert("OnRemove");
		p.Insert("netID|" + to_string(pInfo(peer)->netID) + "\n");
		gamepacket_t p2;
		p2.Insert("OnConsoleMessage");
		p2.Insert("`5<" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`` left, `w" + to_string(w_c) + "`` others here>``");
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_name) continue;
			sent = true;
			p.CreatePacket(currentPeer);
			if (w_c <= 14 and not pInfo(peer)->invis) {
				packet_(currentPeer, "action|play_sfx\nfile|audio/door_shut.wav\ndelayMS|0");
				p2.CreatePacket(currentPeer);
			}
		}
	}
	if (not reset_) world_menu(peer);
}

void create_address_world(ENetPeer* peer, string name_, string currentworld_) {
	int rm = -1;
	name_ = to_upper(name_);
	currentworld_ = to_upper(currentworld_);
	get_world(name_);
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World world_ = worlds[p - worlds.begin()];
		vector<World>::iterator p2 = find_if(worlds.begin(), worlds.end(), [currentworld_](const World& b) { return b.name == currentworld_; });
		if (p2 != worlds.end()) {
			World c_world_ = worlds[p2 - worlds.begin()];
			if (pInfo(peer)->superdev) {

			}
			else {
				if (world_.owner_name != pInfo(peer)->tankIDName || c_world_.owner_name != pInfo(peer)->tankIDName) return;
			}
			if (modify_inventory(peer, 2580, rm) == 0) {
				{
					{
						gamepacket_t p, p2, p3;
						p.Insert("OnAddNotification"), p.Insert("interface/large/jump_icon.rttex"), p.Insert("This world has just been renamed to `5" + name_ + "`` by the owner! (Please join it again)"), p.Insert("audio/gate_close.wav");
						p2.Insert("OnConsoleMessage"), p2.Insert("Ok, " + currentworld_ + " and " + name_ + " have swapped names!");
						p3.Insert("OnConsoleMessage"), p3.Insert("This world has just been renamed to `5" + name_ + "`` by the owner! (Please join it again)");
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_.name or pInfo(currentPeer)->world == c_world_.name) {
								p.CreatePacket(currentPeer);
								p2.CreatePacket(currentPeer);
								p3.CreatePacket(currentPeer);
								exit_(currentPeer, false);
							}
						}
					}
					for (int i = 0; i < worlds.size(); i++) {
						if (worlds[i].name == currentworld_ or worlds[i].name == name_) {
							save_world(worlds[i].name, false);
							worlds.erase(worlds.begin() + i);
							i--;
						}
					}
					string path_ = "worlds/" + world_.name + "_.json";
					string path_2 = "worlds/" + c_world_.name + "_.json";
					string path_4 = "worlds/t_" + world_.name + "_.json";
					string path_3 = "worlds/t_" + c_world_.name + "_.json";
					rename(path_2.c_str(), path_3.c_str()); // dabartini worlda i temp
					rename(path_.c_str(), path_4.c_str()); // i kuri keicia worlda i temp
					rename(path_3.c_str(), path_.c_str()); // temp i kuri keicia
					rename(path_4.c_str(), path_2.c_str()); // temp i dabartini
				}
			}
		}
	}
}

int ancientprice(int z) {
	switch (z) {
	case 5078: case 5080: case 5084: case 5082: case 7166:
		return -50;
	case 5126: case 5144: case 5162: case 5180: case 7168:
		return -75;
	case 5128: case 5146: case 5164: case 5182: case 7170:
		return -100;
	case 5130: case 5148: case 5166: case 5184: case 7172:
		return -125;
	case 5132: case 5150: case 5168: case 5186: case 7174:
		return -200;
	case 5134: case 5152: case 5170: case 5188: case 9212:
		return -200;
	default:
		return 0;
	}
}
string ancientdialog(ENetPeer* peer, int ril) {
	int got = 1;
	int price = abs(ancientprice(ril)), ewe = modify_inventory(peer, 1796, got);
	return "\nadd_textbox|`2- " + items[pInfo(peer)->ances].name + " (OK!)|" + (ewe >= price ? "\nadd_textbox|`2- " + to_string(price) + " Diamond Locks (OK!)" : "\nadd_textbox|`o- " + to_string(price) + " Diamond Locks (" + to_string(ewe) + "/" + to_string(price) + ")") + "|\nadd_spacer|small|\nadd_smalltext|`1The upgraded item will be untradeable|" + (ewe >= price ? "\nadd_button|ancientaltar|`0Complete the ritual" : "") + "|\nend_dialog|tolol12|Return||\nadd_quick_exit";
}

void load_surgery(ENetPeer* peer, int tool) {
	string name_ = pInfo(peer)->world;
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (tool != 0 && tool != 1296) {
			int got = 0;
			modify_inventory(peer, tool, got);
			if (got == 0) {
				end_surgery(peer);
				return;
			}
			if (pInfo(peer)->hand == 9068 && rand() % 100 < 10) {
			}
			else modify_inventory(peer, tool, got = -1);
		}
		bool has_tool = false;
		if (tool != 0) for (int i = 0; i < pInfo(peer)->available_surg_items.size(); i++) if (pInfo(peer)->available_surg_items[i] == tool) has_tool = true;
		if (tool == 0) has_tool = true;
		if (has_tool == false) {
			end_surgery(peer);
			add_ban(peer, 62985600, "Using Surgery Hacks", pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``");
			return;
		}
		int skill = pInfo(peer)->surgery_skill;
		skill += 7;
		string surgery_fail_text = "", cured = "";
		if (has_playmod(pInfo(peer), "Calm Nerves") or has_playmod(pInfo(peer), "Spicey Skills")) skill *= 2;
		else {
			if (pInfo(peer)->hand == 6252) skill += 5;
			else if (pInfo(peer)->hand == 9068) skill += 5; // chance of not using surigcal tool
			if (pInfo(peer)->necklace == 3130) skill *= 2;
		}
		if (skill >= 100) skill = 100;
		pInfo(peer)->s = rand() % 100 > (30 - skill / 4);
		if (pInfo(peer)->started_type == 30) pInfo(peer)->gems += 500;
		if (pInfo(peer)->hand == 8536 && pInfo(peer)->started_type == 27 || pInfo(peer)->started_type == 21 || pInfo(peer)->started_type == 22 || pInfo(peer)->started_type == 19 || pInfo(peer)->started_type == 18 || pInfo(peer)->started_type == 28 || pInfo(peer)->started_type == 23 || pInfo(peer)->started_type == 26 || pInfo(peer)->started_type == 24 || pInfo(peer)->started_type == 25) pInfo(peer)->s = true;
		if (tool == 999) pInfo(peer)->endtext = "giveup";
		if (tool != 0) {
			if (tool == 1258) {
				pInfo(peer)->spongUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->dirt = 0;
					cured = "mopped up the operating site.";
					pInfo(peer)->tooltext = "You mopped up the operating site.";
				}
				else
					pInfo(peer)->tooltext = "You somehow managed to eat the sponge.";
			}
			if (tool == 1260) {
				pInfo(peer)->scalpUsed += 1;
				if (pInfo(peer)->sleep == 0)
					pInfo(peer)->endtext = "You have cut the awake patient!";
				if (pInfo(peer)->incisions == pInfo(peer)->incneeded && pInfo(peer)->shattered == 0) {
					pInfo(peer)->tooltext = "You stabbed the patient in a vital organ!";
					pInfo(peer)->bleeding += 1;
					pInfo(peer)->s = false;
				}
				else {
					pInfo(peer)->incisions += 1;
					if (pInfo(peer)->s)
						pInfo(peer)->tooltext = "You've made a neat incision.";
					else
						pInfo(peer)->tooltext = "This will leave a nasty scar, but you managed to cut the right place.";
				}
			}
			if (tool == 1270) {
				pInfo(peer)->stitcUsed += 1;
				if (pInfo(peer)->s) {
					if (pInfo(peer)->incisions > 0) {
						cured = "stitched up an incision.";
						pInfo(peer)->tooltext = "You stitched up an incision.";
					}
					else if (pInfo(peer)->bleeding > 0) {
						cured = "bandaged some injuries.";
						pInfo(peer)->tooltext = "You bandaged some injuries.";
					}
					else
						pInfo(peer)->tooltext = "You tried to stitch your patient's mouth shut!.";
					if (pInfo(peer)->bleeding > 0)
						pInfo(peer)->bleeding -= 1;
					if (pInfo(peer)->incisions > 0)
						pInfo(peer)->incisions -= 1;
				}
				else
					pInfo(peer)->tooltext = "You somehow tied yourself up in stitches!";
			}
			if (tool == 1264) {
				pInfo(peer)->antisUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->site = min(pInfo(peer)->site + 20, 20);
					cured = "disinfected the operating site.";
				}
				else
					pInfo(peer)->tooltext = "You spilled antiseptic on your shoes. They are very clean now.";
			}
			if (tool == 1266) {
				pInfo(peer)->antibUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->fever -= 3;
					pInfo(peer)->tooltext = "You used antibiotics to reduce the patient's infection.";
					cured = "cured you with antibiotics.";
					if (pInfo(peer)->fever > -3)
						pInfo(peer)->antibs = true;
				}
				else {
					pInfo(peer)->fever += 1;
					pInfo(peer)->tooltext = "This is the wrong medication! The bacteria like it.";
				}
			}
			if (tool == 1268) {
				pInfo(peer)->splinUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->broken -= 1;
					cured = "splinted a broken bone.";
					pInfo(peer)->tooltext = "You splinted a broken bone.";
				}
				else
					pInfo(peer)->tooltext = "You ate a splint, good job!";
			}
			if (tool == 1262) {
				pInfo(peer)->anestUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->sleep += 10;
					cured = "falls into a deep sleep.";
					pInfo(peer)->tooltext = "The patient falls into a deep sleep.";
				}
				else
					pInfo(peer)->tooltext = "You end up inhaling all the anesthetic yourself. You feel woozy.";
			}
			if (tool == 4318) {
				pInfo(peer)->labkiUsed += 1;
				if (pInfo(peer)->s) {
					cured = "used a lab kit to discover you are suffering from " + pInfo(peer)->scantext;
					pInfo(peer)->labworked = true;
					if (pInfo(peer)->flu)
						pInfo(peer)->tooltext = "You performed lab work on the patient, and discovered they are suffering from " + pInfo(peer)->scantext;
					else
						pInfo(peer)->tooltext = "You performed lab work on the patient, and have antibiotics at the ready.";
				}
				else
					pInfo(peer)->tooltext = "You contaminated the sample.";
			}
			if (tool == 4316) {
				pInfo(peer)->ultraUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->sounded = true;
					if (pInfo(peer)->flu)
						pInfo(peer)->tooltext = "You scanned the patient , but didn't find any abnormal masses.";
					else {
						cured = "used a ultrasound to discover you are suffering from " + pInfo(peer)->scantext;
						pInfo(peer)->tooltext = "You scanned the patient with ultrasound, discovering they are suffering from " + pInfo(peer)->scantext;
					}
				}
				else
					pInfo(peer)->tooltext = "You scanned the nurse with your ultrasound!";
			}
			if (tool == 4308) {
				pInfo(peer)->pinsUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->shattered -= 1;
					pInfo(peer)->broken += 1;
					cured = "pinned a shattered bone together.";
					pInfo(peer)->tooltext = "You pinned a shattered bone together. Don't forget to splint it!";
				}
				else {
					pInfo(peer)->bleeding += 1;
					pInfo(peer)->tooltext = "You jabbed the pin through the artery!";
				}
			}
			if (tool == 4312) {
				pInfo(peer)->defibUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->heart = 0;
					cured = "used a defibrillator and shocken your life back!";
					pInfo(peer)->tooltext = "You shocked the patient back to life!";
				}
				else
					pInfo(peer)->tooltext = "You electrocuted yourself!";
			}
			if (tool == 4310) {
				pInfo(peer)->transUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->pulse = min(pInfo(peer)->pulse + 15, 40);
					cured = "tranfused several pints of blood into patient.";
					pInfo(peer)->tooltext = "You transfused several pints of blood into your patient.";
				}
				else
					pInfo(peer)->tooltext = "You spilled all of it! Kind of gross.";
			}
			if (tool == 4314) {
				pInfo(peer)->clampUsed += 1;
				if (pInfo(peer)->s) {
					pInfo(peer)->bleeding -= 1;
					cured = "clamped up some blood vessels.";
					pInfo(peer)->tooltext = "You clamped up some blood vessels.";
				}
				else
					pInfo(peer)->tooltext = "The clamp fell out of your hand, oh well.";
			}
			if (tool == 1296) {
				if (pInfo(peer)->s) {
					pInfo(peer)->fixed = true;
					cured = pInfo(peer)->postext;
					pInfo(peer)->tooltext = pInfo(peer)->postext;
				}
				else
					pInfo(peer)->tooltext = "You screwed it up! Try again.";
			}
			if (cured != "") {
				if (pInfo(peer)->surged_person != "") {
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world or pInfo(peer)->surged_person != pInfo(currentPeer)->tankIDName) continue;
						gamepacket_t p2;
						p2.Insert("OnConsoleMessage"), p2.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` " + cured), p2.CreatePacket(currentPeer);
					}
				}
				gamepacket_t p2;
				p2.Insert("OnConsoleMessage"), p2.Insert(cured), p2.CreatePacket(peer);
			}
			surgery_fail_text = pInfo(peer)->tooltext;
			// Making Glove available
			if (!pInfo(peer)->fixable && (pInfo(peer)->incisions == pInfo(peer)->incneeded) && pInfo(peer)->sounded) {
				pInfo(peer)->fixable = true;
				pInfo(peer)->tooltext += "\nadd_smalltext|`3" + pInfo(peer)->fixtext + "``|left|";
			}
			// Managing bleeding, site, dirt
			pInfo(peer)->dirt += pInfo(peer)->bleeding + pInfo(peer)->incisions;
			if (pInfo(peer)->dirt > 10)
				pInfo(peer)->dirt = 10;
			pInfo(peer)->site -= floor(pInfo(peer)->dirt / 3);
			if (pInfo(peer)->site < -25)
				pInfo(peer)->site = -25;
			if (pInfo(peer)->sleep == 0 && pInfo(peer)->incisions > 0)
				pInfo(peer)->bleeding += 1;
			if (pInfo(peer)->bleeding > 4)
				pInfo(peer)->bleeding = 4;

			// Managing temp, fever
			if (pInfo(peer)->fever < 0) {
				if (pInfo(peer)->fever > -0.06)
					pInfo(peer)->fever = 0;
				else if (!pInfo(peer)->antibs)
					pInfo(peer)->fever = (pInfo(peer)->fever - 3) / 2;
			}
			else if ((pInfo(peer)->site <= 2) && (pInfo(peer)->bleeding > 0) || (pInfo(peer)->site <= 4) && (pInfo(peer)->incisions > 0))
				pInfo(peer)->fever += 0.06;
			pInfo(peer)->temp += pInfo(peer)->fever;
			pInfo(peer)->temp = round(pInfo(peer)->temp * 100) / 100;
			if (pInfo(peer)->temp < 98.6)
				pInfo(peer)->temp = 98.6;
			pInfo(peer)->antibs = false;
			// Managing status, heart stopping
			if (((pInfo(peer)->sleep > 0) && (rand() % 100 < 5)) || (pInfo(peer)->heart > 0)) {
				pInfo(peer)->heart += 1;
			}
			else pInfo(peer)->sleep = max(pInfo(peer)->sleep - 1, 0);
			// Managing pulse
			pInfo(peer)->pulse -= pInfo(peer)->bleeding + min(pInfo(peer)->incisions, 1);
			// Checking for fail
			if (pInfo(peer)->pulse < 1 && pInfo(peer)->endtext == "")
				pInfo(peer)->endtext = "Your patient bled out!";
			else if (pInfo(peer)->temp >= 111)
				pInfo(peer)->endtext = "Your patient succumbed to infection!";
			else if (pInfo(peer)->heart == 3)
				pInfo(peer)->endtext = "You failed to resucicate your patient in time!";
			else if (pInfo(peer)->sleep > 15)
				pInfo(peer)->endtext = "You put your patient to sleep. Permanently!";
			else if ((pInfo(peer)->incisions == 0) && (pInfo(peer)->broken == 0) && (pInfo(peer)->shattered == 0) && pInfo(peer)->fixed && (pInfo(peer)->bleeding == 0) && (pInfo(peer)->temp < 101))
				pInfo(peer)->endtext = "success";

			// Tool text
			if (pInfo(peer)->s)
				pInfo(peer)->tooltext = "`3" + pInfo(peer)->tooltext + "``";
			else {
				pInfo(peer)->tooltext = "`3[```4Skill Fail (" + to_string(30 - pInfo(peer)->surgery_skill / 4) + "%)```3] `6" + pInfo(peer)->tooltext + "``";
				if (pInfo(peer)->surged_person != "") {
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world or pInfo(peer)->surged_person != pInfo(currentPeer)->tankIDName) continue;
						gamepacket_t p2;
						p2.Insert("OnConsoleMessage"), p2.Insert("[`4Skill Fail (" + to_string(30 - skill / 4) + "%)``] `6" + surgery_fail_text + "``"), p2.CreatePacket(currentPeer);
					}
				}
			}
		}

		// Diagnosed
		string diagnosed = "";
		if (!pInfo(peer)->sounded && !pInfo(peer)->flu || !pInfo(peer)->labworked && pInfo(peer)->flu)
			diagnosed += "`4The patient has not been diagnosed.``";
		else if (!pInfo(peer)->fixable || pInfo(peer)->flu || pInfo(peer)->incneeded == 0)
			diagnosed += (pInfo(peer)->pretext);
		else if (!pInfo(peer)->fixed) {
			diagnosed += (pInfo(peer)->fixtext);
		}
		else
			diagnosed += (pInfo(peer)->postext);
		// Pulse
		string pulse = "Pulse: ";
		if (pInfo(peer)->pulse < 11)
			pulse += "`4Extremely Weak``";
		else if (pInfo(peer)->pulse < 21)
			pulse += "`6Weak``";
		else if (pInfo(peer)->pulse < 31)
			pulse += "`3Steady``";
		else
			pulse += "`2Strong``";
		// Status
		string status = "Status: ";
		if (pInfo(peer)->heart > 0)
			status += "`4Heart stopped!``";
		else if (pInfo(peer)->sleep == 0)
			status += (pInfo(peer)->fixed ? "`3" : "`4") + a + "Awake``";
		else if (pInfo(peer)->sleep < 3)
			status += "`6Coming to``";
		else
			status += "`2Unconcsious``";
		// Temp
		string temp = "Temp: ";
		stringstream stream;
		stream << std::fixed << std::setprecision(1) << pInfo(peer)->temp;
		if (pInfo(peer)->temp < 100)
			temp += "`2" + stream.str() + "``";
		else if (pInfo(peer)->temp < 104)
			temp += "`3" + stream.str() + "``";
		else if (pInfo(peer)->temp < 106)
			temp += "`6" + stream.str() + "``";
		else
			temp += "`4" + stream.str() + "``";
		// Operation site
		string operation = "Operation site: ";
		if (pInfo(peer)->site < -3)
			operation += "`4Unsanitary``";
		else if (pInfo(peer)->site < -1)
			operation += "`6Unclean``";
		else if (pInfo(peer)->site < 1)
			operation += "`3Not sanitized``";
		else operation += "`2Clean``";
		// Dirt
		string dirt = "";
		if (pInfo(peer)->dirt == 10)
			dirt += "`4You can't see what you are doing!";
		else if (pInfo(peer)->dirt > 4)
			dirt += "`6It is becoming hard to see your work.";
		// Incisions
		string incisions = "Incisions: ";
		if (pInfo(peer)->incisions == 0)
			incisions += "`2" + to_string(pInfo(peer)->incisions) + "``";
		else
			incisions += "`3" + to_string(pInfo(peer)->incisions) + "``";
		// Bones
		string bones = "";
		if (pInfo(peer)->broken + pInfo(peer)->shattered > 0 && pInfo(peer)->sounded) {
			bones += "Bones: ";
			if (pInfo(peer)->broken > 0) {
				if (pInfo(peer)->broken > 2)
					bones += "`4" + to_string(pInfo(peer)->broken) + " broken``";
				else
					bones += "`6" + to_string(pInfo(peer)->broken) + " broken``";
			}
			if (pInfo(peer)->broken > 0 && pInfo(peer)->shattered > 0)
				bones += ", ";
			if (pInfo(peer)->shattered > 0) {
				if (pInfo(peer)->shattered > 2)
					bones += "`4" + to_string(pInfo(peer)->shattered) + " shattered``";
				else
					bones += "`6" + to_string(pInfo(peer)->shattered) + " shattered``";
			}
		}
		// Bleeding
		string bleeding = "";
		if (pInfo(peer)->bleeding > 0) {
			bleeding += "Patient is ";
			if (pInfo(peer)->bleeding == 1)
				bleeding += "losing blood `3slowly.``";
			else if (pInfo(peer)->bleeding == 4)
				bleeding += "losing blood `4Extremely Fast!``";
			else {
				bleeding += "losing blood `6losing blood!``";
			}
		}
		// Fever
		string fever = "";
		if (pInfo(peer)->fever > 0 && pInfo(peer)->temp > 100) {
			fever += "Patient's fever is ";
			if (pInfo(peer)->fever < 0.5)
				fever += "`3slowly rising.``";
			else if (pInfo(peer)->fever > 2)
				fever += "`4climbing fast!``";
			else {
				fever += "`6climbing!``";
			}
		}
		// Special: heart stop and cut awake
		string heart_stopped = "";
		if (pInfo(peer)->heart == 1)
			heart_stopped += "`4The patient's heart has stopped!``";
		else if (pInfo(peer)->incisions > 0 && pInfo(peer)->sleep == 0)
			heart_stopped += "`4The patient screams and flails!``";


		// pInfo(peer)->
		string tools_available = "";
		// Availability
		//1
		int have = 0;
		pInfo(peer)->available_surg_items.clear();
		if (toolavailable(peer, 1258)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1258)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1258|`$Sponge``|noflags|1258|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(1258);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//2
		if (toolavailable(peer, 1260)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1260)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1260|`$Scalpel``|noflags|1260|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(1260);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//3
		if (toolavailable(peer, 1270)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1270)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1270|`$Stitches``|noflags|1270|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(1270);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//4
		if (toolavailable(peer, 1266)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1266)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1266|`$Antibiotics``|noflags|1266|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(1266);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//5
		if (toolavailable(peer, 1264)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1264)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1264|`$Antiseptic``|noflags|1264|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(1264);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//6
		if (toolavailable(peer, 1296)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1296)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1296|`$Fix it!``|noflags|1296|1|";
			pInfo(peer)->available_surg_items.push_back(1296);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//7
		if (toolavailable(peer, 4316)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 4316)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool4316|`$Ultrasound``|noflags|4316|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(4316);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//8
		if (toolavailable(peer, 4318)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 4318)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool4318|`$Lab Kit``|noflags|4318|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(4318);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//9
		if (toolavailable(peer, 1262)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1262)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1262|`$Anesthetic``|noflags|1262|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(1262);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//10
		if (toolavailable(peer, 1268)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 1268)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool1268|`$Splint``|noflags|1268|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(1268);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		if (toolavailable(peer, 4312)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 4312)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool4312|`$Defibrillator``|noflags|4312|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(4312);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//11
		if (toolavailable(peer, 4308)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 4308)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool4308|`$Pins``|noflags|4308|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(4308);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//12
		if (toolavailable(peer, 4314)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 4314)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool4314|`$Clamp``|noflags|4314|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(4314);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";
		//13
		if (toolavailable(peer, 4310)) {
			for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == 4310)have = pInfo(peer)->inv[i_].count;
			tools_available += "\nadd_button_with_icon|tool4310|`$Transfusion``|noflags|4310|" + to_string(have) + "|";
			pInfo(peer)->available_surg_items.push_back(4310);
		}
		else tools_available += "\nadd_button_with_icon|tool0||noflags|4320||";

		if (pInfo(peer)->endtext == "") {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + (pInfo(peer)->surged_person == "" ? "Surg-E" : pInfo(peer)->surged_display) + "``|left|18|\nadd_smalltext|" + diagnosed + "|left|\nadd_smalltext|" + pulse + "    " + status + "|left|\nadd_smalltext|" + temp + "    " + operation + "|left|" + (dirt != "" ? "\nadd_smalltext|" + dirt + "|left|" : "") + "\nadd_smalltext|" + incisions + "    " + (bones != "" ? bones : "") + "|left|" + (fever != "" ? "\nadd_smalltext|" + fever + "|left|" : "") + "" + (bleeding != "" ? "\nadd_smalltext|" + bleeding + "|left|" : "") + "\nadd_spacer|small|" + (pInfo(peer)->tooltext != "" ? "\nadd_smalltext|" + pInfo(peer)->tooltext + "|left|" : "") + "" + (heart_stopped != "" ? "\nadd_spacer|small|\nadd_smalltext|" + heart_stopped + "|left|" : "") + "\ntext_scaling_string|Defibrillator|" + tools_available + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_button|tool999|Give up!|noflags|0|0|\nend_dialog|surgery|||");
			p.CreatePacket(peer);
		}
		else
		{
			if (pInfo(peer)->hand == 8536 && pInfo(peer)->started_type == 27 || pInfo(peer)->started_type == 21 || pInfo(peer)->started_type == 22 || pInfo(peer)->started_type == 19 || pInfo(peer)->started_type == 18 || pInfo(peer)->started_type == 28 || pInfo(peer)->started_type == 23 || pInfo(peer)->started_type == 26 || pInfo(peer)->started_type == 24 || pInfo(peer)->started_type == 25) {
				int remove = -1;
				modify_inventory(peer, 8536, remove);
			}
			if (pInfo(peer)->endtext == "success") {
				//grow4good(peer, false, "surgery", 1);
				pInfo(peer)->surgery_started = false;
				if (pInfo(peer)->surgery_skill < 100) pInfo(peer)->surgery_skill++;
				add_role_xp(peer, 1, "surgeon");
				pInfo(peer)->surgery_done++;
				if (pInfo(peer)->shirt == 8448 && pInfo(peer)->feet == 8550 && pInfo(peer)->hair == 8444 && pInfo(peer)->necklace == 8442 && pInfo(peer)->face == 8446 && pInfo(peer)->pants == 8450) pInfo(peer)->su_8552_1++;
				if (pInfo(peer)->su_8552_1 >= 2000 && pInfo(peer)->back == 8552) pInfo(peer)->su_8552_2++;
				if (pInfo(peer)->su_8552_1 >= 2000 && pInfo(peer)->mercy == false) {
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
					int c_ = 1;
					if (modify_inventory(peer, 8552, c_) == 0) {
						pInfo(peer)->mercy = true;
						packet_(peer, "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0");
						p.Insert("You received `2Angel of Mercy's Wings`` for completing 2,000 Surgeries while wearing Blinking Set!");
						gamepacket_t p2;
						p2.Insert("OnConsoleMessage"), p2.Insert("You received `2Dr.Title`` for completing 3,000 Surgeries while wearing Angel Of Mercy Wings!"), p2.CreatePacket(peer);
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 46, data_.YSpeed = 46, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
						BYTE* raw = packPlayerMoving(&data_);
						send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						delete[] raw;
					}
					else p.Insert("You have finished Angel of Mercy quest, but your inventory is full! Clear inventory and complete another surgery.");
					p.Insert(0), p.Insert(1), p.CreatePacket(peer);
				}
				if (pInfo(peer)->su_8552_2 >= 3000 && pInfo(peer)->drtitle == false) {
					pInfo(peer)->drtitle = true;
					packet_(peer, "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0");
					gamepacket_t p, p2;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You received `2Dr.Title`` for completing 3,000 Surgeries while wearing Angel Of Mercy Wings!"), p.Insert(0), p.Insert(1);
					p2.Insert("OnConsoleMessage"), p2.Insert("You received `2Dr.Title`` for completing 3,000 Surgeries while wearing Angel Of Mercy Wings!");
					PlayerMoving data_{};
					data_.packetType = 17, data_.netID = 46, data_.YSpeed = 46, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
					BYTE* raw = packPlayerMoving(&data_);
					send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					delete[] raw;
					p.CreatePacket(peer), p2.CreatePacket(peer);
				}
				vector<int> list{ 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 1258, 1268, 1264, 1266, 1262, 1260, 1270, 4318, 4314, 4308, 4310, 4316, 4312, 1242, 1244, 1246, 1248, 1282, 1284, 1286, 1290, 1292, 1288, 1294, 1256, 2586, 782, 3536, 764, 4176 };
				if (pInfo(peer)->started_type == 27 || pInfo(peer)->started_type == 21 || pInfo(peer)->started_type == 22 || pInfo(peer)->started_type == 19 || pInfo(peer)->started_type == 18 || pInfo(peer)->started_type == 28 || pInfo(peer)->started_type == 23 || pInfo(peer)->started_type == 26 || pInfo(peer)->started_type == 24 || pInfo(peer)->started_type == 25) list.push_back(8534);
				int prize_to_pacient = list[rand() % list.size()];
				if (rand() % 200 < 1) list.push_back(3172), list.push_back(4322), list.push_back(10774), list.push_back(11770);
				if (rand() % 450 < 1) list = { 4322 ,2976, 4080,11872, 3790, 4990, 8954, 1506, 1274, 1252, 2992, 3172, 10092, 11224, 9000, 10112, 10094 };
				if (rand() % 2 < 1) {
					if (pInfo(peer)->started_type == 27) list.push_back(8442);
					if (pInfo(peer)->started_type == 21) list.push_back(8482);
					if (pInfo(peer)->started_type == 22) list.push_back(8486);
					if (pInfo(peer)->started_type == 19) list.push_back(8480);
					if (pInfo(peer)->started_type == 18) {
						list.push_back(8478);
						if (rand() % 3 < 1) list.push_back(8488), list.push_back(8452), list.push_back(8454);
					}
					if (pInfo(peer)->started_type == 28 && rand() % 10 < 1) list.push_back(8466), list.push_back(8468), list.push_back(8494);
					if (pInfo(peer)->started_type == 23) {
						list.push_back(8444);
						if (rand() % 3 < 1) list.push_back(8492);
					}
					if (pInfo(peer)->started_type == 26) {
						list.push_back(8448);
						if (rand() % 3 < 1) list.push_back(8474), list.push_back(8476), list.push_back(8498);
					}
					if (pInfo(peer)->started_type == 24) {
						list.push_back(8450);
						if (rand() % 3 < 1) list.push_back(8470), list.push_back(8472), list.push_back(8496);
					}
					if (pInfo(peer)->started_type == 25) {
						list.push_back(8550);
						if (rand() % 3 < 1) list.push_back(8458), list.push_back(8456), list.push_back(8490);
					}
				}
				if (rand() % 5000 < 1) list = { 8284 };
				int item = list[rand() % list.size()], got = 1;
				if (item == 1290) got = 10;
				if (item == 1294 || item == 1288 || item == 1292 || item == 1258 || item == 1268 || item == 1264 || item == 1266 || item == 1262 || item == 1260 || item == 1270 || item == 4318 || item == 4314 || item == 4308 || item == 4310 || item == 4316 || item == 4312) got = 5;
				gamepacket_t p, p2, p3;
				p.Insert("OnConsoleMessage");
				if (pInfo(peer)->surged_person == "") p.Insert("Hey, somebody left " + to_string(got) + " " + items[item].ori_name + " in this patient last time they operated!");
				else p.Insert("`w" + pInfo(peer)->surged_display + "``'s parents are so glad you saved their child that they give you " + to_string(got) + " " + items[item].ori_name + "!");
				p.CreatePacket(peer);
				p3.Insert("OnConsoleMessage"), p3.Insert("`2YOU SAVED YOUR PATIENT!`"), p3.CreatePacket(peer);
				p2.Insert("OnConsoleMessage"), p2.Insert("You got " + to_string(got) + " `2" + items[item].ori_name + "`` and a `3Caduceus``!"), p2.CreatePacket(peer);
				if (pInfo(peer)->surged_person != "") {
					gamepacket_t p, p2;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`7[``" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `2cured`` `0" + pInfo(peer)->surged_display + "`` of " + pInfo(peer)->surgery_name + "`7]``"), p.Insert(0), p.Insert(0);
					p2.Insert("OnConsoleMessage"), p2.Insert("`7[``" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `2cured`` `0" + pInfo(peer)->surged_display + "`` of " + pInfo(peer)->surgery_name + "`7]``");
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
						if (pInfo(peer)->surged_person == pInfo(currentPeer)->tankIDName) {
							int give_prize = 1;
							if (modify_inventory(currentPeer, prize_to_pacient, give_prize) == 0) {
							}
							else {
								WorldDrop drop_block_{};
								drop_block_.id = prize_to_pacient, drop_block_.count = give_prize, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = pInfo(currentPeer)->x + rand() % 17, drop_block_.y = (pInfo(currentPeer)->y * 32) + rand() % 17;
							}
							gamepacket_t p3;
							p3.Insert("OnConsoleMessage"), p3.Insert("You are healed! Celebrate your good health with 100 Gems and 1 " + items[prize_to_pacient].ori_name + "!"), p3.CreatePacket(currentPeer);
							pInfo(currentPeer)->gems += 100;
							gamepacket_t p;
							p.Insert("OnSetBux"), p.Insert(pInfo(currentPeer)->gems), p.Insert(1), p.Insert((pInfo(currentPeer)->supp >= 1) ? 1 : 0);
							if (pInfo(currentPeer)->supp >= 2) p.Insert((float)33796, (float)1, (float)0);
							p.CreatePacket(currentPeer);
						}
						p.CreatePacket(currentPeer);
						p2.CreatePacket(currentPeer);
					}
				}
				int give_prize = 1;
				if (modify_inventory(peer, item, give_prize = 1) == 0) {
				}
				else {
					WorldDrop drop_block_{};
					drop_block_.id = item, drop_block_.count = give_prize = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = (pInfo(peer)->y * 32) + rand() % 17;
				}
				give_prize = 1;
				if (modify_inventory(peer, 4298, give_prize = 1) == 0) {
				}
				else {
					int has_caduc = 0;
					modify_inventory(peer, 4298, has_caduc);
					if (modify_inventory(peer, 4300, give_prize = 2) == 0 and has_caduc >= 200) modify_inventory(peer, 4298, has_caduc = -199);
				}
				pInfo(peer)->surged_person = "", pInfo(peer)->surged_display = "";
			}
			else end_surgery(peer);
		}
	}
}

bool block_access(ENetPeer* peer, World* world_, WorldBlock* block_, bool vend = false, bool admin_access = false) {
	if (world_->owner_name == pInfo(peer)->tankIDName || pInfo(peer)->dev) return true;
	if (vend) {
		if (world_->v_p) {
			if (not block_->locked && find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) != world_->admins.end()) return true;
		}
		if (block_->locked) {
			WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
			if (block2_->owner_name == pInfo(peer)->tankIDName) return true;
		}
		else if (world_->owner_name == "") return true;
	}
	else {
		if (block_->locked) {
			WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
			if (block2_->open_to_public || block2_->owner_name == pInfo(peer)->tankIDName || find(block2_->admins.begin(), block2_->admins.end(), pInfo(peer)->tankIDName) != block2_->admins.end()) return true;
		}
		else {
			if (world_->owner_name == "" || world_->open_to_public) return true;
			if (admin_access == false) if (find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) != world_->admins.end()) return true;
		}
	}
	return false;
}

void growscan_load(ENetPeer* peer, World* world_, WorldBlock* block_) {
	bool world_public = block_->spin, floating_public = block_->invert, access = block_access(peer, world_, block_);
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	if (access) {
		p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Stats``|left|6016|\nadd_spacer|small|\nadd_textbox|`wThis amazing block can show the stats for the whole world!|left\nadd_spacer|small|\nadd_textbox|`wWhich stats would you like to view?|left\nadd_button|worldBlocks|World Blocks|noflags|0|0|\nadd_button|floatingItems|Floating Items|noflags|0|0|" + (access ? "\nadd_spacer|small|\nadd_textbox|`wYou can set the stats to be usable by the public.|left\nadd_checkbox|isStatsWorldBlockUsableByPublic|World blocks is usable by public|" + a + (world_public == false ? "0" : "1") + "\nadd_checkbox|isStatsFloatingItemsUsableByPublic|Floating items is usable by public|" + (floating_public == false ? "0" : "1") : "") + "\nadd_spacer|small|\nend_dialog|statsblock|Cancel|Apply|\n");

	}
	else  p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Stats``|left|6016|\nadd_spacer|small|" + (floating_public == false and world_public == false ? "\nadd_textbox|`wYou don't have access to this block.|left" : "\nadd_textbox|`wThis amazing block can show the stats for the whole world!|left\nadd_spacer|small|\nadd_textbox|`wWhich stats would you like to view?|left") + "" + (world_public == true ? "\nadd_button|worldBlocks|World Blocks|noflags|0|0|" : "") + "" + (floating_public == true ? "\nadd_button|floatingItems|Floating Items|noflags|0|0|" : "") + "\nadd_spacer|small|\nend_dialog|statsblock|Cancel||\n");
	p.CreatePacket(peer);
}

bool setstats(ENetPeer* peer, int i, string surged, string surged_display) {
	if (pInfo(peer)->surgery_started) {
		end_surgery(peer);
		return false;
	}
	if (has_playmod(pInfo(peer), "Malpractice")) {
		gamepacket_t p;
		p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert(surged == "" ? "I know it's just a robot, but the authorities don't even trust you operating on that with your malpractice issues." : "You can't perform surgery right now."), p.CreatePacket(peer);
		return false;
	}
	if (i < 0 || i > 30) i = rand() % 30;
	pInfo(peer)->started_type = i;
	pInfo(peer)->surged_person = surged;
	pInfo(peer)->surged_display = surged_display;
	pInfo(peer)->surgery_world = pInfo(peer)->world;
	pInfo(peer)->surgery_started = true;
	pInfo(peer)->sounded = false;
	pInfo(peer)->labworked = false;
	pInfo(peer)->fixed = false;
	pInfo(peer)->fixable = false;
	pInfo(peer)->flu = false;
	pInfo(peer)->pulse = 40;
	pInfo(peer)->site = 0;
	pInfo(peer)->sleep = 0;
	pInfo(peer)->dirt = 0;
	pInfo(peer)->broken = 0;
	pInfo(peer)->shattered = 0;
	pInfo(peer)->incisions = 0;
	pInfo(peer)->bleeding = 0;
	pInfo(peer)->incneeded = 0;
	pInfo(peer)->heart = 0;
	pInfo(peer)->temp = 98.6;
	pInfo(peer)->fever = 0;
	pInfo(peer)->pretext = "";
	pInfo(peer)->fixtext = "";
	pInfo(peer)->postext = "";
	pInfo(peer)->scantext = "";
	pInfo(peer)->tooltext = "Patient is prepped for surgery.";
	pInfo(peer)->endtext = "";
	pInfo(peer)->s = true;

	pInfo(peer)->spongUsed = 0;
	pInfo(peer)->scalpUsed = 0;
	pInfo(peer)->stitcUsed = 0;
	pInfo(peer)->antibUsed = 0;
	pInfo(peer)->antisUsed = 0;
	pInfo(peer)->ultraUsed = 0;
	pInfo(peer)->labkiUsed = 0;
	pInfo(peer)->anestUsed = 0;
	pInfo(peer)->defibUsed = 0;
	pInfo(peer)->splinUsed = 0;
	pInfo(peer)->pinsUsed = 0;
	pInfo(peer)->clampUsed = 0;
	pInfo(peer)->transUsed = 0;
	pInfo(peer)->surgery_name = "";

	if (pInfo(peer)->surged_person == "") {
		string name_ = pInfo(peer)->surgery_world;
		vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_ = &worlds[p - worlds.begin()];
			WorldBlock* block_ = &world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
			if (block_->fg == 4296 || block_->fg == 8558) {
				block_->fg = 0;
				update_tile(peer, pInfo(peer)->lastwrenchx, pInfo(peer)->lastwrenchy, 0, false, true);
			}
			else return false;
		}
	}

	switch (i) {
	case 0:
		pInfo(peer)->fixed = true;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->broken = 1;
		pInfo(peer)->pretext = "Patient broke his arm.";
		pInfo(peer)->scantext = "a broken arm! You found 1 broken bone.";
		pInfo(peer)->surgery_name = "a broken arm.";
		break;
	case 1:
		pInfo(peer)->fixed = true;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->broken = 1;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->pretext = "Patient broke his leg.";
		pInfo(peer)->scantext = "a broken leg! You found 1 broken bone and 1 shattered bone.";
		pInfo(peer)->surgery_name = "a broken leg.";
		break;
	case 2:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 2.5;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->pretext = "Patient is showing signs of the bird flu.";
		pInfo(peer)->scantext = "bird flu!";
		pInfo(peer)->surgery_name = "a bird flu!";
		break;
	case 3:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->fever = 3.6;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->pretext = "Patient is showing signs of the turtle flu.";
		pInfo(peer)->scantext = "turtle flu!";
		pInfo(peer)->surgery_name = "a turtle flu!";
		break;
	case 4:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 107.6;
		pInfo(peer)->fever = 2.4;
		pInfo(peer)->pretext = "Patient is showing signs of the monkey flu.";
		pInfo(peer)->scantext = "monkey flu!";
		pInfo(peer)->surgery_name = "a monkey flu!";
		break;
	case 5:
		pInfo(peer)->sounded = true;
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->pretext = "Patient wants a nose job.";
		pInfo(peer)->fixtext = "You have cut into nasal area.";
		pInfo(peer)->postext = "You rearranged their face!";
		pInfo(peer)->surgery_name = "a nose job.";
		break;
	case 6:
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->scantext = "a lung tumor!";
		pInfo(peer)->pretext = "Patient has a tumor in their lung.";
		pInfo(peer)->fixtext = "The lungs are now exposed.";
		pInfo(peer)->postext = "You excised the tumor!";
		pInfo(peer)->surgery_name = "a lung tumor!";
		break;
	case 7:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->scantext = "a heart attack!";
		pInfo(peer)->pretext = "Patient had a heart attack.";
		pInfo(peer)->fixtext = "The heart is now exposed for operating.";
		pInfo(peer)->postext = "You grafted in some nice new arteries!";
		pInfo(peer)->surgery_name = "a heart attack!";
		break;
	case 8:
		pInfo(peer)->incneeded = 5;
		pInfo(peer)->scantext = "a brain tumor!";
		pInfo(peer)->pretext = "Patient has a brain tumor, deep inside.";
		pInfo(peer)->fixtext = "You've finally found the tumor!";
		pInfo(peer)->postext = "You excised the tumor!";
		pInfo(peer)->surgery_name = "a brain tumor!";
		break;
	case 9:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 0.6;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->scantext = "a liver infection!";
		pInfo(peer)->pretext = "Patient has a liver infection.";
		pInfo(peer)->fixtext = "You've accessed the liver.";
		pInfo(peer)->postext = "You treated the source of the infection!";
		pInfo(peer)->surgery_name = "a liver infection!";
		break;
	case 10:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->fever = 1.2;
		pInfo(peer)->scantext = "kidney failure!";
		pInfo(peer)->pretext = "Patient suffers from kidney failure.";
		pInfo(peer)->fixtext = "You now have access to the bad kidney.";
		pInfo(peer)->postext = "You popped in a fresh new kidney!";
		pInfo(peer)->surgery_name = "kidney failure!";
		break;
	case 11:
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 1.2;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->scantext = "appendicitis!";
		pInfo(peer)->pretext = "Patient suffers from appendicitis.";
		pInfo(peer)->fixtext = "You now have access to the appendix.";
		pInfo(peer)->postext = "You yanked out the appendix!";
		pInfo(peer)->surgery_name = "appendicitis!";
		break;
	case 12:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->scantext = "swallowed World Lock!";
		pInfo(peer)->pretext = "Patient has swallowed a world lock.";
		pInfo(peer)->fixtext = "You've opened the stomach.";
		pInfo(peer)->postext = "You got the lock out!";
		pInfo(peer)->surgery_name = "a swallowed World Lock!";
		break;
	case 13:
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 100.4;
		pInfo(peer)->scantext = "a herniated disc!";
		pInfo(peer)->pretext = "Patient's spine is damaged.";
		pInfo(peer)->fixtext = "You've opened up the vertebrae.";
		pInfo(peer)->postext = "You repaired the disc!";
		pInfo(peer)->surgery_name = "a herniated disc!";
		break;
	case 14:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 100.58;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->shattered = 4;
		pInfo(peer)->scantext = "broken everything! You found 4 shattered bones.";
		pInfo(peer)->pretext = "Patient was run over by a truck.";
		pInfo(peer)->fixtext = "You've found gravel in the knees.";
		pInfo(peer)->postext = "You removed the gravel!";
		pInfo(peer)->surgery_name = "a broken everything!";
		break;
	case 15:
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->pulse = 20;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->bleeding = 4;
		pInfo(peer)->scantext = "a serious head injury!";
		pInfo(peer)->pretext = "Patient has a serious head injury.";
		pInfo(peer)->fixtext = "You've opened the skull.";
		pInfo(peer)->postext = "You reduced the swelling!";
		pInfo(peer)->surgery_name = "a serious head injury!";
		break;
	case 16:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->broken = 2;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->scantext = "serious trauma! You found 2 broken bones and 1 shattered bone.";
		pInfo(peer)->pretext = "Patient suffered serious trauma with a punctured lung.";
		pInfo(peer)->fixtext = "You found the lung puncture.";
		pInfo(peer)->postext = "You repaired it.";
		pInfo(peer)->surgery_name = "a serious trauma!";
		break;
	case 17:
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->pulse = 30;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 4;
		pInfo(peer)->broken = 2;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->scantext = "massive trauma! You found 2 broken bones and 2 shattered bones.";
		pInfo(peer)->pretext = "Patient suffered massive trauma with internal bleeding.";
		pInfo(peer)->fixtext = "You found the internal bleed.";
		pInfo(peer)->postext = "You cauterized it.";
		pInfo(peer)->surgery_name = "a massive trauma!";
		break;
	case 18:
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->dirt = 15;
		pInfo(peer)->scantext = "torn punching muscle!";
		pInfo(peer)->pretext = "Patient has a torn punching muscle.";
		pInfo(peer)->fixtext = "You've accessed the arm muscles. ";
		pInfo(peer)->postext = "You patched the torn punching muscle! They should be back to punching in no time.";
		pInfo(peer)->surgery_name = "a torn punching muscle!";
		break;
	case 19:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 98.6;
		pInfo(peer)->dirt = 0;
		pInfo(peer)->fever = 0;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->scantext = "gem cuts!";
		pInfo(peer)->pretext = "Patient is bleeding from multiple gem-induced cuts.";
		pInfo(peer)->fixtext = "You've examined the wounds.";
		pInfo(peer)->postext = "You've stitches the gem cuts closed and stopped the bleeding.";
		pInfo(peer)->surgery_name = "gem cuts!";
		break;
	case 20:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->pulse = 20;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->dirt = 5;
		pInfo(peer)->scantext = "Grumbleteeth! You found 1 shattered bones.";
		pInfo(peer)->pretext = "Patient's teeth are chattering They sound angry.";
		pInfo(peer)->fixtext = "You removed grumbleteeth";
		pInfo(peer)->postext = "You've replaced the patient's angriest teeth and quited";
		pInfo(peer)->surgery_name = "Grumbleteeth!";
		break;
	case 21:
		pInfo(peer)->fixable = false;
		pInfo(peer)->temp = 98.6;
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->heart = 0;
		pInfo(peer)->fever = 1.56;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->scantext = "chicken feet! You found 2 shattered bones.";
		pInfo(peer)->pretext = "Patient feet have turned into chicken toes.";
		pInfo(peer)->fixtext = "You've insvestigated the feet.";
		pInfo(peer)->postext = "You fixed the patient feet. They look like normal blocky toes again!";
		pInfo(peer)->surgery_name = "chicken feet!";
		break;
	case 22:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 1;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->temp = 107.6;
		pInfo(peer)->fever = 1.2;
		pInfo(peer)->dirt = 2;
		pInfo(peer)->scantext = "Broken Heart! You found 2 shattered bones.";
		pInfo(peer)->pretext = "Patient suffered from a Broken Heart.";
		pInfo(peer)->fixtext = "You've revealed the heart.";
		pInfo(peer)->postext = "You've repaired the fractured in the patient's heart";
		pInfo(peer)->surgery_name = "Broken heart!";
		break;
	case 23:
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->temp = 100.58;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->fever = 0.8;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 5;
		pInfo(peer)->scantext = "brain worms! You found 1 Shattered bone.";
		pInfo(peer)->pretext = "You've exposed the brain.";
		pInfo(peer)->fixtext = "You made a neat incision.";
		pInfo(peer)->postext = "You've shut down the worm party in the patient brain and cleared away their trash.";
		pInfo(peer)->surgery_name = "brain worms!";
		break;
	case 24:
		pInfo(peer)->incneeded = 0;
		pInfo(peer)->fixable = false;
		pInfo(peer)->temp = 98.6;
		pInfo(peer)->dirt = 0;
		pInfo(peer)->broken = 6;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->bleeding = 1;
		pInfo(peer)->scantext = "ecto bones! You found 6 Broken bones and 2 Shattered bones.";
		pInfo(peer)->pretext = "You've exposed the ribs";
		pInfo(peer)->fixtext = "You made an incision";
		pInfo(peer)->postext = "You pinned down all patient major bones and dyed them back to their normal color.";
		pInfo(peer)->surgery_name = "ecto bones!";
		break;
	case 25:
		pInfo(peer)->fixable = false;
		pInfo(peer)->pulse = 20;
		pInfo(peer)->temp = 104.6;
		pInfo(peer)->fever = 1.98;
		pInfo(peer)->shattered = 1;
		pInfo(peer)->incneeded = 2;
		pInfo(peer)->scantext = "Moldy Guts! You found 1 shattered bone.";
		pInfo(peer)->pretext = "Patient suffers from Moldy Guts.";
		pInfo(peer)->fixtext = "You've openned the abdomen.";
		pInfo(peer)->postext = "You'e cleaned out the patient's internal organs and applied a light air freshener";
		pInfo(peer)->surgery_name = "Moldy Guts!";
		break;
	case 26:
		pInfo(peer)->fixable = false;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 101.6;
		pInfo(peer)->fever = 2.0;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->scantext = "fatty liver!";
		pInfo(peer)->pretext = "Patient suffered fatty liver.";
		pInfo(peer)->fixtext = "Patient poor diet has led to a high degree of fat build-up in their liver";
		pInfo(peer)->postext = "You pickup it.";
		pInfo(peer)->surgery_name = "fatty liver!";
		break;
	case 27:
		pInfo(peer)->fixed = false;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->temp = 105.6;
		pInfo(peer)->broken = 2;
		pInfo(peer)->fever = 2.6;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->scantext = "Chaos Infection! You found 2 Broken bones.";
		pInfo(peer)->pretext = "Patient suffered chaos infection.";
		pInfo(peer)->fixtext = "Patient poor diet has led to a high degree of fat build-up in their liver";
		pInfo(peer)->postext = "You removed it.";
		pInfo(peer)->surgery_name = "Chaos Infection!";
		break;
	case 28:
		pInfo(peer)->fixed = false;
		pInfo(peer)->incneeded = 4;
		pInfo(peer)->temp = 100.1;
		pInfo(peer)->broken = 2;
		pInfo(peer)->fever = 3.1;
		pInfo(peer)->sleep = 3;
		pInfo(peer)->shattered = 2;
		pInfo(peer)->dirt = 10;
		pInfo(peer)->incneeded = 3;
		pInfo(peer)->bleeding = 3;
		pInfo(peer)->scantext = "Lupus! You found 2 Broken bones.";
		pInfo(peer)->pretext = "Patient suffered lupus.";
		pInfo(peer)->fixtext = "Chance of patient tearing skin, adding one extra incision";
		pInfo(peer)->postext = "You removed it.";
		pInfo(peer)->surgery_name = "Lupus!";
		break;
	case 29:
		pInfo(peer)->fixed = true;
		pInfo(peer)->flu = true;
		pInfo(peer)->temp = 107.6;
		pInfo(peer)->fever = 2.5;
		pInfo(peer)->dirt = 6;
		pInfo(peer)->pretext = "Patient is showing signs of the COVID-19.";
		pInfo(peer)->scantext = "COVID-19!";
		pInfo(peer)->surgery_name = "a COVID-19!";
		break;
	case 30:
		pInfo(peer)->incneeded = 7;
		pInfo(peer)->temp = 102.6;
		pInfo(peer)->fever = 0.6;
		pInfo(peer)->scantext = "a Ebola! Patient is having seizure.";
		pInfo(peer)->pretext = "Patient has Ebola.";
		pInfo(peer)->fixtext = "You've finally cured the seizure!";
		pInfo(peer)->postext = "You made the pacient experience a seizure!";
		pInfo(peer)->surgery_name = "a Ebola!";
		break;
	}
	gamepacket_t p;
	p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`7[``" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` is performing surgery on " + pInfo(peer)->surged_display + "!`7]``"), p.Insert(0), p.Insert(0);
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
		p.CreatePacket(currentPeer);
	}
	load_surgery(peer, 0);
	return true;
}


void send_growscan_floating(ENetPeer* peer, string search, string type) {
	int total_floating = 0, total_rarity = 0, total_super_item = 0, total_gems = 0;
	vector<pair<int, int>> founditems;
	string name_ = pInfo(peer)->world;
	string found_list = "";
	vector<World>::iterator px = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (px != worlds.end()) {
		World* world_ = &worlds[px - worlds.begin()];
		for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
			if (world_->drop_new[i_][0] == 0) continue;
			if (world_->drop_new[i_][0] != 0 || world_->drop_new[i_][3] > 0 || world_->drop_new[i_][4] > 0) {
				if (search == "start") {
					total_floating++;
					if (items[world_->drop_new[i_][0]].rarity < 363) total_rarity += items[world_->drop_new[i_][0]].rarity * world_->drop_new[i_][1];
					else if (items[world_->drop_new[i_][0]].rarity == 999)total_super_item += world_->drop_new[i_][1];
					if (world_->drop_new[i_][0] == 112 || world_->drop_new[i_][0] == 4490) total_gems += (world_->drop_new[i_][0] == 4490 ? 1000 * world_->drop_new[i_][1] : world_->drop_new[i_][1]);
				}
				else if (type == "1" or type == "2" and items[world_->drop_new[i_][0]].blockType == BlockTypes::CLOTHING or type == "3" and items[world_->drop_new[i_][0]].blockType == BlockTypes::CONSUMABLE or type == "4" and items[world_->drop_new[i_][0]].blockType == BlockTypes::FOREGROUND or type == "5" and items[world_->drop_new[i_][0]].blockType == BlockTypes::SEED or type == "6" and items[world_->drop_new[i_][0]].blockType == BlockTypes::LOCK) {
					if (to_lower(items[world_->drop_new[i_][0]].name).find(to_lower(search)) != string::npos) {
						bool copy = true;
						for (int i = 0; i < founditems.size(); i++) {
							if (founditems[i].first == world_->drop_new[i_][0]) {
								founditems[i].second += world_->drop_new[i_][1];
								copy = false;
							}
						}
						if (copy) founditems.push_back(make_pair(world_->drop_new[i_][0], world_->drop_new[i_][1]));
					}
				}
			}
		}
		for (int i = 0; i < founditems.size(); i++) found_list += to_string(founditems[i].first) + "," + to_string(founditems[i].second) + ",";
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	if (search == "start") p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wFloating Items``|left|6016|\nadd_spacer|small|\nadd_textbox|`wTotal number in world: " + to_string(total_floating) + "|left\nadd_textbox|`wTotal floating item rarity: " + to_string(total_rarity) + "|left|\nadd_textbox|`wTotal super rare items: " + to_string(total_super_item) + "|left|\nadd_textbox|`wTotal gems: " + to_string(total_gems) + "|left|\nadd_spacer|small|\nadd_text_input|searchName|Search by Name||100|\nadd_button|search_1|Search All|noflags|0|0|\nadd_smalltext|`5Or filter search by type``|left|\nadd_button|search_2|Search Clothing|noflags|0|0|\nadd_button|search_3|Search Consumables|noflags|0|0|\nadd_button|search_4|Search Blocks and Backgrounds|noflags|0|0|\nadd_button|search_5|Search Seeds|noflags|0|0|\nadd_button|search_6|Search Locks|noflags|0|0|\nadd_button|search_1|Search Others|noflags|0|0|\nadd_spacer|small|\nadd_button|back_to_gscan|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
	else {
		if (found_list.empty()) p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wFloating Items``|left|6016|\nadd_spacer|small|\nadd_textbox|No items found.|left|\nadd_spacer|small|\nadd_button|floatingItems|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
		else p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wFloating Items``|left|6016|\nadd_spacer|small|\nadd_textbox|Press on the icon to be directed to the location of the item.|left|\nadd_spacer|small|\nadd_label_with_icon_button_list|small|`w%s : %s|left|findObject_|itemID_itemAmount|" + found_list + "\nadd_spacer|small|\nadd_button|floatingItems|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
	}
	p.CreatePacket(peer);
}

void send_growscan_worldblocks(ENetPeer* peer, string search, string type) {
	int total_block = 0, total_background = 0, total_untradeable = 0, total_super_rare_item = 0, total_rarity = 0, total_fire = 0, total_water = 0, total_earth = 0, total_air = 0;
	string name_ = pInfo(peer)->world;
	string found_list = "";
	vector<pair<int, int>> founditems;
	vector<World>::iterator px = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (px != worlds.end()) {
		World* world_ = &worlds[px - worlds.begin()];
		for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
			if (world_->blocks[i_].fg != 8 && world_->blocks[i_].fg != 6) {
				if (search == "start") {
					if (world_->blocks[i_].fg != 0) total_block++;
					if (world_->blocks[i_].bg != 0) total_background++;
					if (world_->blocks[i_].fg != 0 && items[world_->blocks[i_].fg].untradeable == 1 or world_->blocks[i_].bg != 0 && items[world_->blocks[i_].bg].untradeable == 1) total_untradeable++;
					if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].rarity >= 999 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].rarity >= 999) total_super_rare_item++;
					if (items[world_->blocks[i_].fg].rarity < 363 and items[world_->blocks[i_].fg].rarity != 999) if (world_->blocks[i_].fg != 0) total_rarity += items[world_->blocks[i_].fg].rarity;
					if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 0 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 0) total_earth++;
					if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 1 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 1) total_fire++;
					if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 2 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 2) total_air++;
					if (world_->blocks[i_].fg != 0 and items[world_->blocks[i_].fg].chi == 3 or world_->blocks[i_].bg != 0 and items[world_->blocks[i_].bg].chi == 3) total_water++;
				}
				else if (type == "1" or type == "2") {
					if (to_lower(items[world_->blocks[i_].fg].name).find(to_lower(search)) != string::npos || (type == "1" && to_lower(items[world_->blocks[i_].bg].name).find(to_lower(search)) != string::npos)) {
						if (world_->blocks[i_].fg != 0) {
							bool copy_fg = true;
							for (int i = 0; i < founditems.size(); i++) {
								if (founditems[i].first == world_->blocks[i_].fg) {
									founditems[i].second++;
									copy_fg = false;
								}
							}
							if (copy_fg) founditems.push_back(make_pair(world_->blocks[i_].fg, 1));
						}
						if (type == "1" && world_->blocks[i_].bg != 0) {
							bool copy_bg = true;
							for (int i = 0; i < founditems.size(); i++) {
								if (founditems[i].first == world_->blocks[i_].bg) {
									founditems[i].second++;
									copy_bg = false;
								}
							}
							if (copy_bg) founditems.push_back(make_pair(world_->blocks[i_].bg, 1));
						}
					}
				}
				else if (type == "3") {
					if (to_lower(items[world_->blocks[i_].bg].name).find(to_lower(search)) != string::npos) {
						if (world_->blocks[i_].bg != 0) {
							bool copy_bg = true;
							for (int i = 0; i < founditems.size(); i++) {
								if (founditems[i].first == world_->blocks[i_].bg) {
									founditems[i].second++;
									copy_bg = false;
								}
							}
							if (copy_bg) founditems.push_back(make_pair(world_->blocks[i_].bg, 1));
						}
					}
				}
				else if (type == "5") {
					if (world_->blocks[i_].fg == 2946 && world_->blocks[i_].id != 0) {
						founditems.push_back(make_pair(world_->blocks[i_].id, 1));
					}
				}
				else if (type == "4") {
					if (to_lower(items[world_->blocks[i_].fg].name).find(to_lower(search)) != string::npos || to_lower(items[world_->blocks[i_].bg].name).find(to_lower(search)) != string::npos) {
						if (world_->blocks[i_].fg != 0 && items[world_->blocks[i_].fg].untradeable == 1 or world_->blocks[i_].bg != 0 && items[world_->blocks[i_].bg].untradeable == 1) {
							if (world_->blocks[i_].fg != 0) {
								bool copy_fg = true;
								for (int i = 0; i < founditems.size(); i++) {
									if (founditems[i].first == world_->blocks[i_].fg) {
										founditems[i].second++;
										copy_fg = false;
									}
								}
								if (copy_fg) founditems.push_back(make_pair(world_->blocks[i_].fg, 1));
							}

							if (world_->blocks[i_].bg != 0) {
								bool copy_bg = true;
								for (int i = 0; i < founditems.size(); i++) {
									if (founditems[i].first == world_->blocks[i_].bg) {
										founditems[i].second++;
										copy_bg = false;
									}
								}
								if (copy_bg) founditems.push_back(make_pair(world_->blocks[i_].bg, 1));
							}
						}
					}
				}
			}
		}
		for (int i = 0; i < founditems.size(); i++) found_list += to_string(founditems[i].first) + "," + to_string(founditems[i].second) + ",";
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	if (search == "start") p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wWorld Blocks``|left|6016|\nadd_spacer|small|\nadd_label|small|`wThis world contains|left\nadd_textbox|`wBlocks: " + to_string(total_block) + "``|\nadd_textbox|`wBackgrounds: " + to_string(total_background) + "``|\nadd_textbox|`wUntradeable blocks: " + to_string(total_untradeable) + "``|left|\nadd_textbox|`wSuper rare items: " + to_string(total_super_rare_item) + "|left|\nadd_textbox|`wTotal block rarity: " + to_string(total_rarity) + "``|left|\nadd_label_with_icon|small|`wFire: " + to_string(total_fire) + "|left|6020|\nadd_label_with_icon|small|`wWater: " + to_string(total_water) + "|left|6024|\nadd_label_with_icon|small|`wEarth: " + to_string(total_earth) + "|left|6018|\nadd_label_with_icon|small|`wAir: " + to_string(total_air) + "|left|6022|\nadd_spacer|small|\nadd_text_input|searchName|Search by Name||100|\nadd_button|search_1|Search All|noflags|0|0|\nadd_smalltext|`5Or filter search by type``|left|\nadd_button|search_2|Search Blocks|noflags|0|0|\nadd_button|search_3|Search Backgrounds|noflags|0|0|\nadd_button|search_4|Search Untradeable|noflags|0|0|\nadd_button|search_5|Search Display Block|noflags|0|0|\nadd_spacer|small|\nadd_button|back_to_gscan|Back|noflags|0|0|\nend_dialog|statsblockworld|||\n");
	else {
		if (found_list.empty()) p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wWorld Blocks``|left|6016|\nadd_spacer|small|\nadd_textbox|No results found.|left|\nadd_spacer|small|\nadd_button|worldBlocks|Back|noflags|0|0|\nend_dialog|statsblock|||\n");
		else p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wWorld Blocks``|left|6016|\nadd_spacer|small|\nadd_button|worldBlocks|Back|noflags|0|0|\nadd_spacer|small|\nadd_quick_exit|\nadd_textbox|Press on the icon to be directed to the location of the item.|left|\nadd_spacer|small|\nadd_label_with_icon_button_list|small|`w%s : %s|left|findTile_|itemIDseed2tree_itemAmount|" + found_list + "\nadd_spacer|small|\nadd_button|worldBlocks|Back|noflags|0|0|\nend_dialog|statsblockworld|||\n");
	}
	p.CreatePacket(peer);
}

void cant_enter(ENetPeer* peer, string text, bool door, int delay) {
	gamepacket_t p2(delay);
	if (door) {
		gamepacket_t p(delay, pInfo(peer)->netID), p3(delay), p4(delay, pInfo(peer)->netID);
		p.Insert("OnSetFreezeState"), p.Insert(1), p.CreatePacket(peer);
		p3.Insert("OnZoomCamera"), p3.Insert((float)10000.000000), p3.Insert(1000), p3.CreatePacket(peer);
		p4.Insert("OnSetFreezeState"), p4.Insert(0), p4.CreatePacket(peer);
	}
	else {
		gamepacket_t p2;
		p2.Insert("OnFailedToEnterWorld"), p2.CreatePacket(peer);
	}
	p2.Insert("OnConsoleMessage"), p2.Insert(text), p2.CreatePacket(peer);
	pInfo(peer)->cancel_enter = true;
	return;
}
int aaa = 0;

void raymanupg(ENetPeer* peer) {
	if (pInfo(peer)->raylvl < 5) {
		string extra = "";
		int hedef = 0, nexts = 0;
		if (pInfo(peer)->raylvl == 0) extra = "\nadd_label_with_icon|small|- `wOne hit|left|2320|\nadd_label_with_icon|small|- `w3x Break Block|left|2322|\nadd_label_with_icon|small|- `w3x Place Block|left|2324|", hedef = 25000, nexts = 9772, pInfo(peer)->lastray = 5480;
		else if (pInfo(peer)->raylvl == 1) extra = "\nadd_label_with_icon|small|- `wOne hit|left|2320|\nadd_label_with_icon|small|- `w4x Break Block|left|2322|\nadd_label_with_icon|small|- `w4x Place Block|left|2324|", hedef = 50000, nexts = 9846;
		else if (pInfo(peer)->raylvl == 2) extra = "\nadd_label_with_icon|small|- `wOne hit|left|2320|\nadd_label_with_icon|small|- `w4x Break Block|left|2322|\nadd_label_with_icon|small|- `w4x Place Block|left|2324|\nadd_label_with_icon|small|- `w2x Extra XP|left|3842|", hedef = 100000, nexts = 10362;
		else if (pInfo(peer)->raylvl == 3) extra = "\nadd_label_with_icon|small|- `wOne hit|left|2320|\nadd_label_with_icon|small|- `w4x Break Block|left|2322|\nadd_label_with_icon|small|- `w4x Place Block|left|2324|\nadd_label_with_icon|small|- `w2x Extra XP|left|3842|\nadd_label_with_icon|small|- `w2x Extra Gems|left|112|", hedef = 250000, nexts = 9770;
		else return;
		gamepacket_t h;
		h.Insert("OnDialogRequest"), h.Insert("\nadd_label_with_icon|big|`5Upgrade Rayman|left|484|\nadd_spacer|small|\nadd_textbox|`oThere should be a Rayman's Fist of your own on this page. You earn xp by breaking blocks with your Rayman's Fist, and with these xp your level increases, you can strengthen your rayman with the increasing level. Other Rayman's Fists have very different powers!|\nadd_progress_bar||small|`wRayman XP|" + to_string(pInfo(peer)->raybreak) + "|" + to_string(hedef) + "|`w(" + to_string(pInfo(peer)->raybreak) + "/" + to_string(hedef) + ")|\nadd_spacer|small|\nadd_label_with_icon|small|`^(Level " + to_string(pInfo(peer)->raylvl) + ") `2" + items[nexts].name + ":|left|" + to_string(nexts) + "|\nadd_spacer|small|" + extra + "\nadd_spacer|small|\nadd_button|nextlevel_" + to_string(pInfo(peer)->raylvl + 1) + "|Upgrade to LEVEL " + to_string(pInfo(peer)->raylvl + 1) + "|\nend_dialog|upgray|Cancel||\n"), h.CreatePacket(peer);
	}
}

void join_world(ENetPeer* peer, string& name_, int spawnas_x = 0, int spawnas_y = 0, int delay = 0, bool locked = false, bool door = false) {
	pInfo(peer)->update = true;
	if (pInfo(peer)->tankIDName.empty()) return;
	if (not door) {
		if (pInfo(peer)->world_time + 300 > (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
			gamepacket_t p;
			p.Insert("OnFailedToEnterWorld"), p.CreatePacket(peer);
			return;
		}
		pInfo(peer)->world_time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
	}

	if (not check_name(name_)) return cant_enter(peer, name_, door, delay);
	//if (door == false) wipe_beach(peer);
	if (has_playmod(pInfo(peer), "Go To HELL")) name_ = "HELL";
	if (to_lower(name_).find("nigga") != string::npos || to_lower(name_).find("fuck") != string::npos || to_lower(name_).find("amcik") != string::npos || to_lower(name_).find("sikerim") != string::npos || to_lower(name_).find("porno") != string::npos || to_lower(name_).find("yarrak") != string::npos || to_lower(name_).find("zenci") != string::npos || to_lower(name_).find("seks") != string::npos || to_lower(name_).find("sex") != string::npos || to_lower(name_).find("tassak") != string::npos || to_lower(name_).find("yarak") != string::npos) name_ = "DISNEYLAND";
	World world_ = get_world(name_);
	string owner_name = world_.owner_name, user_name = (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName);
	int w_c = 0, s_c = 0, net_ = 1, r_c = 0;
	if (world_.name != pInfo(peer)->world) {
		if (world_.savealiyo) return cant_enter(peer, "Wait a few seconds!", door, delay);
		if (world_.nuked == true && pInfo(peer)->mod + pInfo(peer)->dev < 1) return cant_enter(peer, "That world is inaccessible.", door, delay);
		if (pInfo(peer)->level < world_.entry_level and (world_.owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and not pInfo(peer)->mod)) {
			if (/*!guild_access(peer, world_.guild_id) and */ find(world_.admins.begin(), world_.admins.end(), user_name) == world_.admins.end()) return cant_enter(peer, "Players lower than level " + to_string(world_.entry_level) + " can't enter " + world_.name + ".", door, delay);
		}
		for (pair<string, long long int> p : world_.bannedPlayers) {
			if (p.first == pInfo(peer)->tankIDName) if (p.second + (3600 * 1000) > (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) return cant_enter(peer, "`4Oh no!`` You've been banned from that world by its owner! Try again later after the world ban wears off.", door, delay);
		}
		get_players(world_.name, w_c, s_c, net_, r_c);
		if (w_c >= 45 and not pInfo(peer)->dev and not pInfo(peer)->mod) return cant_enter(peer, "Oops, `5" + world_.name + "`` already has `445`` people in it. Try again later.", door, delay);
	}
	uint32_t ySize = 60, xSize = 100;
	if (world_.name == pInfo(peer)->world) {
		gamepacket_t p(delay, pInfo(peer)->netID), p2(delay), p3(delay, pInfo(peer)->netID);
		p.Insert("OnSetFreezeState"), p.Insert(1), p.CreatePacket(peer);
		if (spawnas_x != 0) {
		}
		else if (not locked) {
			for (int i_ = 0; i_ < world_.blocks.size(); i_++) {
				if (items.at(world_.blocks.at(i_).fg).blockType == BlockTypes::MAIN_DOOR) {
					spawnas_x = i_ % xSize, spawnas_y = i_ / xSize;
					pInfo(peer)->c_x = spawnas_x, pInfo(peer)->c_y = spawnas_y;
					gamepacket_t p(delay, pInfo(peer)->netID);
					p.Insert("SetRespawnPos"), p.Insert(i_), p.CreatePacket(peer);
					break;
				}
			}
		}
		else {
			gamepacket_t p(delay);
			p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("The door is locked."), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
		}
		if (not locked) {
			pInfo(peer)->x = spawnas_x * 32, pInfo(peer)->y = spawnas_y * 32;
			gamepacket_t p(delay, pInfo(peer)->netID);
			p.Insert("OnSetPos"), p.Insert(float(spawnas_x) * 32, float(spawnas_y) * 32), p.CreatePacket(peer);
			if (not pInfo(peer)->invis) {
				gamepacket_t p(delay, pInfo(peer)->netID);
				p.Insert("OnPlayPositioned"), p.Insert("audio/door_open.wav"), p.CreatePacket(peer);
			}
		}
		p2.Insert("OnZoomCamera"), p2.Insert((float)10000.000000), p2.Insert(1000), p2.CreatePacket(peer);
		p3.Insert("OnSetFreezeState"), p3.Insert(0), p3.CreatePacket(peer);
		return;
	}
	else if (not pInfo(peer)->world.empty()) exit_(peer, true);
	pInfo(peer)->lock = 0;
	pInfo(peer)->world = world_.name;
	int total = 78 + world_.name.length() + world_.blocks.size() + 24 + ((8 * world_.blocks.size()) + (world_.drop.size() * 16));
	int spawn_x = 0, spawn_y = 0;
	int worldby = 0, dropby = 0;
	//	BYTE* data = (BYTE*)malloc((world_.blocks.size()*2) * sizeof(WorldBlock) + sizeof(World));
	BYTE* data = (BYTE*)malloc(world_.blocks.size() * sizeof(WorldBlock) + (sizeof(World) * 2));
	memset(data, 0, total);
	*(__int8*)(data) = 4;
	*(__int8*)(data + 4) = 4;
	*(__int8*)(data + 16) = 8;
	*(__int8*)(data + 66) = world_.name.length();
	memcpy(data + 68, world_.name.c_str(), world_.name.length());
	*(__int8*)(data + 68 + world_.name.length()) = 100;
	*(__int8*)(data + 72 + world_.name.length()) = 60;
	*(__int16*)(data + 76 + world_.name.length()) = world_.blocks.size();
	worldby = 85;
	// worldby = 80; lower 4.30
	BYTE* blc = data + worldby + world_.name.length();
	vector<vector<unsigned int>> world_locks;
	world_.active_jammers.clear();
	vector<string> world_mods;
	//vector<int> blocks;

	if (world_.blocks.size() == 0) {
		cout << "world corrupt yemis: " << world_.name << endl;
		ServerLog("Blocks size is zero WORLD: " + pInfo(peer)->world);
		enet_peer_disconnect_later(peer, 0);
		return;
	}
	for (int i_ = 0; i_ < 6000; i_++) {
		/*
		if (find(blocks.begin(), blocks.end(), world_.blocks[i_].fg) == blocks.end()) {
			blocks.push_back(world_.blocks[i_].fg);
				cout << world_.blocks[i_].fg << endl;
		}*/
		//	if (world_.blocks[i_].fg == 6950 || world_.blocks[i_].fg == 6952 || world_.blocks[i_].fg == 6954)  world_.blocks[i_].fg = 2;
		*(__int16*)(blc) = world_.blocks[i_].fg;
		*(__int16*)(blc + 2) = world_.blocks[i_].bg;
		*(__int32*)(blc + 4) = world_.blocks[i_].flags;
		if (world_.blocks.at(i_).flags & 0x00400000 && (world_.blocks.at(i_).fg == 226 || world_.blocks.at(i_).fg == 1276 || world_.blocks.at(i_).fg == 1278 || world_.blocks.at(i_).fg == 4884 || world_.blocks.at(i_).fg == 4992)) world_mods.push_back("`" + a + (world_.blocks.at(i_).fg == 226 ? "4JAMMED" : (world_.blocks.at(i_).fg == 1276 ? "2NOPUNCH" : (world_.blocks.at(i_).fg == 1278 ? "2IMMUNE" : (world_.blocks.at(i_).fg == 4884 ? "2NOWAR" : "2ANTIGRAVITY")))) + "``"), world_.active_jammers.push_back(world_.blocks.at(i_).fg);
		if (world_.blocks[i_].fg == 5638 || world_.blocks[i_].fg == 6948 || world_.blocks[i_].fg == 6946) {
			*(__int8*)(blc + 8) = 62;
			*(__int16*)(blc + 9) = world_.blocks[i_].id;
			*(__int16*)(blc + 13) = world_.blocks[i_].pr;
			*(__int8*)(blc + 17) = world_.blocks[i_].enabled;
			if (world_.blocks[i_].fg == 5638)*(__int16*)(blc + 18) = world_.blocks[i_].magnetron;
			*(__int16*)(blc + 20) = (world_.blocks[i_].fg == 5638 ? 5000 : 1500);
			blc += 15;
			total += 15;
		}
		else if (items[world_.blocks[i_].fg].actionType == -115 || world_.blocks[i_].fg == 3760 || world_.blocks[i_].fg == 6950 || world_.blocks[i_].fg == 6952 || world_.blocks[i_].fg == 6954) {
			*(__int8*)(blc + 8) = 6;
			blc += 8;
			total += 8;
		}
		/*
		else if (world_.blocks[i_].fg == 6950 || world_.blocks[i_].fg == 6952 || world_.blocks[i_].fg == 6954) {
			*(__int8*)(blc + 8) = world_.blocks[i_].fg == 6950 ? 70 : 69;
			*(__int8*)(blc + 9) = world_.blocks[i_].pr > 0 ? 1 : 0;
			*(__int16*)(blc + 13) = world_.blocks[i_].pr;
			*(__int16*)(blc + 17) = world_.blocks[i_].id;
			*(__int8*)(blc + 21) = world_.blocks[i_].enabled;
			blc += 13;
			total += 13;
		}*/
		else if (items[world_.blocks[i_].fg].easel) {
			*(__int8*)(blc + 8) = 35;
			*(__int16*)(blc + 9) = world_.blocks[i_].id;
			*(__int16*)(blc + 13) = world_.blocks[i_].txt.size();
			memcpy(blc + 15, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
			blc += 7 + world_.blocks[i_].txt.size();
			total += 7 + world_.blocks[i_].txt.size();
		}
		else if (items[world_.blocks[i_].fg].bunny_egg) {
			*(__int8*)(blc + 8) = 15;
			*(__int16*)(blc + 9) = world_.blocks[i_].bunny_egg_progress;
			blc += 5;
			total += 5;
		}
		else if (items[world_.blocks[i_].fg].dshelf) {
			*(__int8*)(blc + 8) = 43;
			*(__int16*)(blc + 9) = world_.blocks[i_].shelf_1;
			*(__int16*)(blc + 13) = world_.blocks[i_].shelf_2;
			*(__int16*)(blc + 17) = world_.blocks[i_].shelf_3;
			*(__int16*)(blc + 21) = world_.blocks[i_].shelf_4;
			blc += 17;
			total += 17;
		}
		else if (items[world_.blocks[i_].fg].fish_port) {
			*(__int8*)(blc + 8) = 63;
			blc += 1 + 4 + 8;
			total += 1 + 4 + 8;
		}
		else if (items[world_.blocks[i_].fg].timer) {
			*(__int8*)(blc + 8) = 45;
			blc += 1;
			total += 1;
		}
		else if (items[world_.blocks[i_].fg].heart_monitor) {
			*(__int8*)(blc + 8) = 11;
			{
				bool ijungtas = false;
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (fixchar(pInfo(currentPeer)->tankIDName) == fixchar(world_.blocks[i_].heart_monitor)) {
						ijungtas = 1;
						break;
					}
				}
				/*
				GlobalMonitors new_monitor;
				new_monitor.active = ijungtas;
				new_monitor.world_name = world_.name;
				new_monitor.x = i_ % 100;
				new_monitor.y = i_ / 100;
				monitors.push_back(new_monitor);*/
				if (ijungtas)*(int*)(blc + 4) = world_.blocks[i_].flags | 0x00400000;
				*(int*)(blc + 9) = ijungtas;
			}
			*(int*)(blc + 13) = world_.blocks[i_].heart_monitor.size();
			memcpy(blc + 15, world_.blocks[i_].heart_monitor.c_str(), world_.blocks[i_].heart_monitor.size());
			blc += 7 + world_.blocks[i_].heart_monitor.size();
			total += 7 + world_.blocks[i_].heart_monitor.size();
		}
		else if (items[world_.blocks[i_].fg].xeno) {
			*(__int8*)(blc + 8) = 53;
			blc += 9;
			total += 9;
		}
		else if (items[world_.blocks[i_].fg].trickster) {
			*(__int8*)(blc + 8) = 52;
			blc += 1;
			total += 1;
		}
		else if (items[world_.blocks[i_].fg].charger) {
			*(int*)(blc + 4) = (world_.blocks[i_].id != 0 ? 0x00400000 : world_.blocks[i_].flags);
			*(__int8*)(blc + 8) = 57;
			*(__int16*)(blc + 9) = (world_.blocks[i_].planted - time(nullptr) <= 0 ? 3600 : 3600 - (world_.blocks[i_].planted - time(nullptr)));
			blc += 5;
			total += 5;
		}
		else if (items[world_.blocks[i_].fg].spirit) {
			*(__int8*)(blc + 8) = 41;
			*(__int16*)(blc + 9) = world_.blocks[i_].c_;
			blc += 5;
			total += 5;
		}
		else if (items[world_.blocks[i_].fg].trans) {
			*(__int8*)(blc + 8) = 19;
			blc += 19;
			total += 19;
		}
		else if (items[world_.blocks[i_].fg].mannequin) {

			*(__int8*)(blc + 8) = 14;
			*(__int16*)(blc + 9) = world_.blocks[i_].txt.size();
			memcpy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
			*(__int16*)(blc + 16 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_hair;
			*(__int16*)(blc + 18 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_shirt;
			*(__int16*)(blc + 20 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_pants;
			*(__int16*)(blc + 22 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_feet;
			*(__int16*)(blc + 24 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_head;
			*(__int16*)(blc + 26 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_hand;
			*(__int16*)(blc + 28 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_back;
			*(__int16*)(blc + 30 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_mask;
			*(__int16*)(blc + 32 + world_.blocks[i_].txt.size()) = world_.blocks[i_].mannequin.c_neck;
			blc += 26 + world_.blocks[i_].txt.size();
			total += 26 + world_.blocks[i_].txt.size();
		}
		else if (items[world_.blocks[i_].fg].vipentrance) {
			*(__int8*)(blc + 8) = 44;
			vector<int> vip_members;
			if (world_.blocks[i_].limit_admins or find(world_.blocks[i_].admins.begin(), world_.blocks[i_].admins.end(), pInfo(peer)->tankIDName) != world_.blocks[i_].admins.end() or pInfo(peer)->tankIDName == world_.owner_name or world_.owner_name.empty()) vip_members.push_back(pInfo(peer)->id);
			*(__int16*)(blc + 14) = vip_members.size();
			for (int i = 0; i < vip_members.size(); i++) *(__int32*)(blc + 18 + (i * 4)) = vip_members[i];
			blc += 10 + (vip_members.size() * 4);
			total += 10 + (vip_members.size() * 4);
		}
		else if (items[world_.blocks[i_].fg].infinitymachine) {
			*(__int8*)(blc + 8) = 19;
			blc += 19;
			total += 19;
		}
		else if (items[world_.blocks[i_].fg].portrait) {
			*(__int8*)(blc + 8) = 48;
			*(__int16*)(blc + 9) = world_.blocks[i_].txt.size();
			memcpy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
			if (world_.blocks[i_].portrait.c_skin == 0 and world_.blocks[i_].portrait.c_face == 0 and world_.blocks[i_].portrait.c_head == 0 and world_.blocks[i_].portrait.c_hair == 0) {

			}
			else {
				*(int*)(blc + 11 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_expression;
				*(int*)(blc + 19 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_hair_colour;
				*(int*)(blc + 23 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_skin;
				*(int*)(blc + 27 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_face;
				*(int*)(blc + 29 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_head;
				*(int*)(blc + 31 + world_.blocks[i_].txt.size()) = world_.blocks[i_].portrait.c_hair;
			}
			blc += 7 + 15 + 3 + world_.blocks[i_].txt.size();
			total += 7 + 15 + 3 + world_.blocks[i_].txt.size();
		}
		else if (items[world_.blocks[i_].fg].vall_mount/*|| world_.blocks[i_].fg == 6950 || world_.blocks[i_].fg == 6952 || world_.blocks[i_].fg == 6954*/) {
			*(__int8*)(blc + 8) = 47;
			*(__int8*)(blc + 9) = 0;
			blc += 8;
			total += 8;
		}
		else if (items[world_.blocks[i_].fg].bulletin_board or items[world_.blocks[i_].fg].storage_box or items[world_.blocks[i_].fg].growscan or items[world_.blocks[i_].fg].security_camera or items[world_.blocks[i_].fg].spotlight or world_.blocks[i_].fg == 4722) {
			*(__int8*)(blc + 8) = 6;
			blc += 8;
			total += 8;
		}
		else if (world_.blocks[i_].fossil) {
			*(__int32*)(blc + 4) = world_.blocks[i_].flags;
			*(__int8*)(blc + 8) = 12;
			//blc += 0;
			//total += 0;
		}
		else {
			switch (items[world_.blocks[i_].fg].blockType) {
			case BlockTypes::WEATHER:
			{
				switch (world_.blocks[i_].fg) {
				case 3694: case 5000:
				{
					*(__int8*)(blc + 8) = 40;
					*(__int32*)(blc + 9) = (world_.blocks[i_].fg == 3694 ? (world_.blocks[i_].b << 24) | (world_.blocks[i_].g << 16) | (world_.blocks[i_].r << 8) : world_.blocks[i_].id != 0 ? world_.blocks[i_].id : 14);
					blc += 5;
					total += 5;
					break;
				}
				case 3832:
				{
					*(__int8*)(blc + 8) = 49;
					*(__int16*)(blc + 9) = (world_.blocks[i_].id != 0 ? world_.blocks[i_].id : 2);
					*(__int16*)(blc + 13) = world_.blocks[i_].gravity;
					*(__int16*)(blc + 17) = (int)world_.blocks[i_].spin | ((int)world_.blocks[i_].invert << 1);
					blc += 10;
					total += 10;
					break;
				}
				default:
				{
					if (items[world_.blocks[i_].fg].ext_weather) {
						*(__int8*)(blc + 8) = 5;
						blc += 1;
						total += 1;
					}
					break;
				}
				}
				break;
			}
			case BlockTypes::CRYSTAL:
			{
				*(__int8*)(blc + 8) = 6;
				blc += 8;
				total += 8;
				break;
			}
			case BlockTypes::VENDING:
			{
				*(int*)(blc + 9) = (world_.blocks[i_].pr < 0 and world_.blocks[i_].id != 0 && world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1) ? 0 : world_.blocks[i_].id);
				*(__int8*)(blc + 8) = 24;
				*(int*)(blc + 4) = (world_.blocks[i_].pr < 0 and world_.blocks[i_].id != 0 && world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1) ? world_.blocks[i_].flags | ((world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1)) ? (world_.blocks[i_].wl != 0 ? 0x02410000 : 0x00410000) : (world_.blocks[i_].wl != 0 ? 0x02410000 : 0x00410000)) : world_.blocks[i_].flags | (world_.blocks[i_].id == 0 ? (world_.blocks[i_].wl != 0 ? 0x02000000 : 0x00000000) : (world_.blocks[i_].wl != 0 ? 0x02410000 : 0x00410000)));
				*(int*)(blc + 13) = (world_.blocks[i_].pr < 0 and world_.blocks[i_].id != 0 && world_.blocks[i_].c_ < (world_.blocks[i_].pr * -1) ? 0 : world_.blocks[i_].pr);
				blc += 9;
				total += 9;
				break;
			}
			case BlockTypes::DISPLAY:
			{
				*(__int8*)(blc + 8) = 23;
				*(__int16*)(blc + 9) = world_.blocks[i_].id;
				blc += 5;
				total += 5;
				break;
			}
			case BlockTypes::PROVIDER:
			{
				*(__int8*)(blc + 8) = 9;
				*(__int32*)(blc + 9) = (time(nullptr) - world_.blocks[i_].planted <= items[world_.blocks[i_].fg].growTime ? time(nullptr) - world_.blocks[i_].planted : items[world_.blocks[i_].fg].growTime);
				blc += 5;
				total += 5;
				break;
			}
			case BlockTypes::RANDOM_BLOCK:
			{
				*(__int8*)(blc + 8) = 8;
				*(__int32*)(blc + 9) = world_.blocks[i_].roll;
				blc += 2;
				total += 2;
				break;
			}
			case BlockTypes::LOCK:
			{
				if (world_.blocks[i_].fg == 5814) {
					*(__int8*)(blc + 8) = 6;
					blc += 8;
					total += 8;
				}
				else {
					if (world_.blocks[i_].fg == 202 or world_.blocks[i_].fg == 204 or world_.blocks[i_].fg == 206 or world_.blocks[i_].fg == 4994) world_locks.push_back({ i_ % xSize, i_ / xSize });
					else pInfo(peer)->lock = world_.blocks[i_].fg;

					if (world_.blocks[i_].open_to_public) {
						*(int*)(blc + 4) = 0x00800000;
					}
					*(__int8*)(blc + 8) = 3;
					uint8_t world_settings = world_.disable_music_blocks ? (world_.make_music_blocks_invisible ? 12345 : 1234) : (world_.make_music_blocks_invisible ? 100 : 0);
					if (world_.rainbows and world_.blocks[i_].fg == 4802) world_settings += 128;
					*(__int16*)(blc + 9) = world_settings;
					*(int*)(blc + 10) = (world_.blocks[i_].owner_name == pInfo(peer)->tankIDName || world_.owner_name == pInfo(peer)->tankIDName ? pInfo(peer)->id : -1);
					*(__int16*)(blc + 18) = world_.music_bpm * -1;
					bool access = false;
					uint16_t count_of_admins = 1;
					{
						if (world_.blocks[i_].fg == 202 or world_.blocks[i_].fg == 204 or world_.blocks[i_].fg == 206 or world_.blocks[i_].fg == 4994) if (find(world_.blocks[i_].admins.begin(), world_.blocks[i_].admins.end(), pInfo(peer)->tankIDName) != world_.blocks[i_].admins.end())access = true;
						//if (world_.blocks[i_].fg == 5814) if (guild_access(peer, world_.guild_id))access = true;
						if (world_.owner_name != "") if (find(world_.admins.begin(), world_.admins.end(), pInfo(peer)->tankIDName) != world_.admins.end()) access = true;
						if (access) *(int*)(blc + 22) = pInfo(peer)->id, count_of_admins++;
					}
					*(__int8*)(blc + 14) = count_of_admins;
					blc += 10 + (count_of_admins * 4);
					total += 10 + (count_of_admins * 4);
				}
				break;
			}
			case BlockTypes::MAIN_DOOR:
			{
				spawn_x = (i_ % xSize) * 32, spawn_y = (i_ / xSize) * 32;
				pInfo(peer)->c_x = spawn_x / 32;
				pInfo(peer)->c_y = spawn_y / 32;
				*(__int8*)(blc + 8) = 1;
				*(__int16*)(blc + 9) = 4;
				memcpy(blc + 11, "EXIT", 4);
				blc += 8;
				total += 8;
				break;
			}
			case BlockTypes::SEED:
			{
				*(int*)(blc + 4) = 0 | 0x100000;
				*(__int8*)(blc + 8) = 4;
				*(int*)(blc + 9) = (time(nullptr) - world_.blocks[i_].planted <= items.at(world_.blocks[i_].fg).growTime ? time(nullptr) - world_.blocks[i_].planted : items.at(world_.blocks[i_].fg).growTime);
				*(__int16*)(blc + 13) = world_.blocks[i_].fruit;

				blc += 6;
				total += 6;
				break;
			}
			case BlockTypes::DONATION:case BlockTypes::MAILBOX:
			{
				*(__int32*)(blc + 4) = world_.blocks[i_].flags;
				*(__int8*)(blc + 8) = 12;
				blc += 8;
				total += 8;
				break;
			}
			case BlockTypes::DOOR: case BlockTypes::PORTAL:
			{
				string duru_tekstas = (world_.blocks[i_].txt.empty() ? (world_.blocks[i_].door_destination.empty() ? "" : (world_.blocks[i_].door_destination.find(":") != string::npos ? explode(":", world_.blocks[i_].door_destination)[0] + "..." : world_.blocks[i_].door_destination)) : world_.blocks[i_].txt);
				*(__int8*)(blc + 8) = 1;
				*(__int16*)(blc + 9) = duru_tekstas.size();
				memcpy(blc + 11, duru_tekstas.c_str(), duru_tekstas.size());
				*(__int8*)(blc + 11 + duru_tekstas.size()) = (world_.blocks[i_].open ? 0 : 0x08);
				blc += 4 + duru_tekstas.size();
				total += 4 + duru_tekstas.size();
				break;
			}
			case BlockTypes::SIGN:
			{
				*(__int8*)(blc + 8) = 2;
				*(int*)(blc + 9) = world_.blocks[i_].txt.size();
				memcpy(blc + 11, world_.blocks[i_].txt.c_str(), world_.blocks[i_].txt.size());
				*(__int16*)(blc + 11 + world_.blocks[i_].txt.size()) = 0;
				blc += 7 + world_.blocks[i_].txt.size();
				total += 7 + world_.blocks[i_].txt.size();
				break;
			}
			}
		}
		blc += 8;
	}
	blc += 12;
	// blc += 0; lower 4.30
	*(int*)(blc) = world_.drop.size();
	*(int*)(blc + 4) = world_.drop.size();
	blc += 8;
	for (int i_ = 0; i_ < world_.drop.size(); i_++) {
		*(__int16*)(blc) = world_.drop[i_].id;
		*(float*)(blc + 2) = world_.drop[i_].x;
		*(float*)(blc + 6) = world_.drop[i_].y;
		*(__int8*)(blc + 10) = world_.drop[i_].count;
		*(int*)(blc + 12) = world_.drop[i_].uid;
		blc += 16;
	}
	enet_peer_send(peer, 0, enet_packet_create(data, total, ENET_PACKET_FLAG_RELIABLE));
	delete[] data;
	if (world_locks.size() > 0) {
		vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
		if (p != worlds.end()) {
			World* world_pointer_ = &worlds[p - worlds.begin()];
			vector<WorldBlock> shadow_copy_2 = world_.blocks;
			for (vector<unsigned int> sk_ : world_locks) {
				int l_x = sk_[0];
				int l_y = sk_[1];
				WorldBlock block_ = world_.blocks[l_x + (l_y * 100)];
				block_.owner_named = block_.owner_name;
				world_pointer_->blocks[l_x + (l_y * 100)].owner_named = block_.owner_named;
				world_.blocks[l_x + (l_y * 100)].owner_named = block_.owner_name;
				vector<vector<int>> locked_tiles_around_lock{};
				vector<int> new_tiles{};
				new_tiles.push_back(l_x + (l_y * 100));
				for (int i2 = 0; i2 < new_tiles.size(); i2++) {
					int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
					if (s_x_ < 99 and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
						if (not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned) {
							shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned = true;
							new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
							locked_tiles_around_lock.push_back({ s_x_ + 1, s_y_ });
						}
					} if (s_x_ > 0 and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
						if (not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned) {
							shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned = true;
							new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
							locked_tiles_around_lock.push_back({ s_x_ - 1, s_y_ });
						}
					} if (s_y_ < 59 and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
						if (not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned) {
							shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
							new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
							locked_tiles_around_lock.push_back({ s_x_, s_y_ + 1 });
						}
					} if (s_y_ > 0 and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
						if (not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned) {
							shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
							new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
							locked_tiles_around_lock.push_back({ s_x_, s_y_ - 1 });
						}
					}
				}
				if (locked_tiles_around_lock.size() != 0) {
					PlayerMoving data_{};
					data_.packetType = 15, data_.punchX = l_x, data_.punchY = l_y, data_.characterState = 0x8;
					data_.netID = block_.owner_name == (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) ? pInfo(peer)->id : -1;
					data_.plantingTree = block_.fg;
					BYTE* raw;
					int alloc = alloc_(&world_, &block_);
					raw = packPlayerMoving(&data_, 112 + (locked_tiles_around_lock.size() * 2) + alloc);
					*(int*)(raw + 8) = locked_tiles_around_lock.size();
					*(__int8*)(raw + 12) = 8;
					BYTE* blc = raw + 56;
					for (int i_ = 0; i_ < locked_tiles_around_lock.size(); i_++) {
						vector<int> update_tiles = locked_tiles_around_lock[i_];
						int x = update_tiles[0];
						int y = update_tiles[1];
						int sq_ = x + (y * 100);
						*(int*)(blc + (i_ * 2)) = sq_;
						shadow_copy_2[x + (y * 100)].scanned = false;
					}
					send_raw(peer, 4, raw, 112 + (locked_tiles_around_lock.size() * 2) + alloc, ENET_PACKET_FLAG_RELIABLE);
					PlayerMoving data_2{};
					data_2.packetType = 5, data_2.punchX = l_x, data_2.punchY = l_y, data_2.characterState = 0x8;
					BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc);
					BYTE* blc2 = raw2 + 56;
					form_visual(blc2, block_, world_, peer, false);
					send_raw(peer, 4, raw2, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
					delete[] raw, blc, raw2, blc2;
				}
			}
		}
	}
	bool wipe = false;
	for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) {
		if (pInfo(peer)->inv[i_].id == 1424 || pInfo(peer)->inv[i_].id == 5816 || pInfo(peer)->inv[i_].id == 5640) {
			wipe = true;
			pInfo(peer)->inv[i_].id = 0;
			pInfo(peer)->inv[i_].count = 0;
			if (pInfo(peer)->inv[i_].id == 5640) pInfo(peer)->magnetron_id = 0, pInfo(peer)->magnetron_x = 0, pInfo(peer)->magnetron_y = 0;
		}
	}
	if (wipe) send_inventory(peer);
	pInfo(peer)->netID = net_;
	if (spawnas_x != 0 or spawnas_y != 0) spawn_x = spawnas_x * 32, spawn_y = spawnas_y * 32;
	pInfo(peer)->name_color = (pInfo(peer)->adminLevel >= 1 ? admincolor(pInfo(peer)->adminLevel) : (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) == world_.owner_name ? "`2" : (guild_access(peer, world_.guild_id) or find(world_.admins.begin(), world_.admins.end(), (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName)) != world_.admins.end()) ? "`^" : "`0");
	/*
	p.Insert("OnSetBux"), p.Insert(pInfo(peer)->gems), p.Insert(1), p.Insert((pInfo(peer)->supp >= 1) ? 1 : 0);
	if (pInfo(peer)->supp >= 2) p.Insert((float)33796, (float)1, (float)0);
	p.CreatePacket(peer);*/
	//memleak risk: pingcheck3
	//cout << pInfo(peer)->world << " size: " << total << endl;
	//enet_peer_ping(peer); 
	gamepacket_t p2, p3;
	p2.Insert("OnConsoleMessage"), p2.Insert("" + (pInfo(peer)->mod + pInfo(peer)->dev > 0 ? (world_.nuked ? "`0[NUKED: " + world_.n_b + "," + world_.n_t + "]`` " : "") : "") + "You have entered to `w" + world_.name + "``, " + (world_mods.size() != 0 ? "`0[``" + join(world_mods, ", ") + "`0]`` " : "") + "" + " `w" + to_string(w_c) + "`` others here and `w" + setGems(s_c * 2 - 1) + "`` online."), p2.CreatePacket(peer);
	p3.Insert("OnSetCurrentWeather");
	p3.Insert((world_.weather == 0 || world_.weather == 80 && world_.d_weather != 0 ? world_.d_weather : (world_.weather == 0 ? 80 : world_.weather)));
	p3.CreatePacket(peer);
	{
		string c_ = "spawn|avatar\nnetID|" + to_string(net_) + "\nuserID|" + to_string(pInfo(peer)->id) + "\ncolrect|0|0|20|30\nposXY|" + to_string(spawn_x) + "|" + to_string(spawn_y) + "\nname|" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + (pInfo(peer)->tankIDName.empty() ? pInfo(peer)->requestedName : pInfo(peer)->tankIDName)) + (pInfo(peer)->is_legend ? " of Legend" : "") + "``\ncountry|" + pInfo(peer)->country + "\ninvis|" + (pInfo(peer)->invis ? "1" : "0") + "\nmstate|" + (pInfo(peer)->mod or pInfo(peer)->dev ? "1" : "0") + "\nsmstate|" + (pInfo(peer)->mod or pInfo(peer)->dev ? "1" : "0") + "\nonlineID|";
		string s_ = "spawn|avatar\nnetID|" + to_string(net_) + "\nuserID|" + to_string(pInfo(peer)->id) + "\ncolrect|0|0|20|30\nposXY|" + to_string(spawn_x) + "|" + to_string(spawn_y) + "\nname|" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + (pInfo(peer)->tankIDName.empty() ? pInfo(peer)->requestedName : pInfo(peer)->tankIDName)) + (pInfo(peer)->is_legend ? " of Legend" : "") + "``\ncountry|" + pInfo(peer)->country + "\ninvis|" + (pInfo(peer)->invis ? "1" : "0") + "\nmstate|" + (pInfo(peer)->mod or pInfo(peer)->dev ? "1" : "0") + "\nsmstate|" + (pInfo(peer)->mod or pInfo(peer)->dev ? "1" : "0") + "\nonlineID|";
		gamepacket_t p;
		p.Insert("OnSpawn"), p.Insert(s_);
		{
			gamepacket_t p;
			p.Insert("OnSpawn"), p.Insert(c_ + "\ntype|local"), p.CreatePacket(peer);
		}
		gamepacket_t p57, p58;
		p57.Insert("OnTalkBubble"), p57.Insert(pInfo(peer)->netID), p57.Insert("`5<" + (not pInfo(peer)->d_name.empty() ? (pInfo(peer)->d_name.substr(0, 1) == "`" ? "" : "`w") + pInfo(peer)->d_name + "``" : pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``") + " entered, `w" + to_string(w_c) + "`` others here>``"), p57.Insert(1);
		p58.Insert("OnConsoleMessage"), p58.Insert("`5<" + (not pInfo(peer)->d_name.empty() ? (pInfo(peer)->d_name.substr(0, 1) == "`" ? "" : "`w") + pInfo(peer)->d_name + "``" : pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``") + " entered, `w" + to_string(w_c) + "`` others here>``");
		if (pInfo(peer)->world == "START" || pInfo(peer)->world == "PROMOTE") {
			if (pInfo(peer)->world == "START") {
				//g_spawn(peer, "`9GROWDICE NPC", 36 * 32, 36 * 32, 999931, "tr");
			}
		}
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_ or pInfo(peer)->tankIDName == pInfo(currentPeer)->tankIDName) continue;
			p.CreatePacket(currentPeer);
			gamepacket_t p;
			p.Insert("OnSpawn"), p.Insert("spawn|avatar\nnetID|" + to_string(pInfo(currentPeer)->netID) + "\nuserID|" + to_string(pInfo(currentPeer)->id) + "\ncolrect|0|0|20|30\nposXY|" + to_string(pInfo(currentPeer)->x) + "|" + to_string(pInfo(currentPeer)->y) + "\nname|" + (not pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->d_name : pInfo(currentPeer)->name_color + (pInfo(currentPeer)->tankIDName.empty() ? pInfo(currentPeer)->requestedName : pInfo(currentPeer)->tankIDName)) + (pInfo(currentPeer)->is_legend ? " of Legend" : "") + "``\ncountry|" + pInfo(currentPeer)->country + "\ninvis|" + (pInfo(currentPeer)->invis ? "1" : "0") + "\nmstate|" + (pInfo(currentPeer)->mod or pInfo(currentPeer)->dev ? "1" : "0") + "\nsmstate|" + (pInfo(currentPeer)->mod or pInfo(currentPeer)->dev ? "1" : "0") + "\nonlineID|"), p.CreatePacket(peer);
			if (w_c <= 14 && w_c >= 1 && pInfo(peer)->invis == false) p57.CreatePacket(currentPeer), p58.CreatePacket(currentPeer);
		}
	}
	if (not world_.owner_name.empty()) {
		if (world_.owner_named == "" && pInfo(peer)->tankIDName == world_.owner_name && world_.owner_named != pInfo(peer)->tankIDName) {
			world_.owner_named = "`o" + pInfo(peer)->tankIDName;
			if (pInfo(peer)->mod || pInfo(peer)->dev || pInfo(peer)->superdev) world_.owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName;
		}
		gamepacket_t p;
		p.Insert("OnConsoleMessage");
		p.Insert("`5[```w" + world_.name + "`` `$World Locked`` by " + (world_.owner_named == "" ? world_.owner_name : world_.owner_named) + "``" + (world_.owner_name == (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) or (guild_access(peer, world_.guild_id) or find(world_.admins.begin(), world_.admins.end(), (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName)) != world_.admins.end()) ? " `2(ACCESS GRANTED`2)``" : (world_.open_to_public ? " (`$PUBLIC``)" : "")) + "`5]``");
		p.CreatePacket(peer);
	}
	if (world_.special_event) {
		gamepacket_t p2;
		p2.Insert("OnConsoleMessage"), p2.Insert("`2" + items[world_.special_event_item].event_name + ":`` " + (items[world_.special_event_item].event_total == 1 ? "`oYou have`` `030`` `oseconds to find and grab the`` `#" + items[world_.special_event_item].name + "```o.``" : "`#" + to_string(items[world_.special_event_item].event_total) + " " + items[world_.special_event_item].name + "`` `ospawn in your world, you have`` `030`` `oseconds to collect them.``") + ""), p2.CreatePacket(peer);
	}
	{
		gamepacket_t p;
		p.Insert("OnSpawn"), p.Insert("spawn|avatar\nnetID|" + to_string(rand() % 30 + 450) + "\nuserID|288286691\ncolrect|0|0|20|30\nposXY|-32|-32\nname|`6@chris``\ncountry|us\ninvis|1\nmstate|1\nsmstate|1\nonlineID|"), p.CreatePacket(peer);
	}
	for (int i_ = 0; i_ < pInfo(peer)->last_visited_worlds.size(); i_++) {
		if (pInfo(peer)->last_visited_worlds[i_] == world_.name) {
			pInfo(peer)->last_visited_worlds.erase(pInfo(peer)->last_visited_worlds.begin() + i_);
			pInfo(peer)->last_visited_worlds.push_back(world_.name);
		}
		else if (i_ + 1 == pInfo(peer)->last_visited_worlds.size()) {
			if (pInfo(peer)->last_visited_worlds.size() + 1 > 11) {
				pInfo(peer)->last_visited_worlds.erase(pInfo(peer)->last_visited_worlds.begin());
			}
			pInfo(peer)->last_visited_worlds.push_back(world_.name);
		}
	}
	if (pInfo(peer)->last_visited_worlds.size() == 0) pInfo(peer)->last_visited_worlds.push_back(world_.name);
	if (not pInfo(peer)->invis) packet_(peer, "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0");
	if (pInfo(peer)->world == "GROWCH" && Winterfest) packet_(peer, "action|play_music\nfile|audio/mp3/tsirhc.mp3\ndelayMS|0");
	for (int i_ = 0; i_ < world_.machines.size(); i_++) {
		WorldMachines machine_ = world_.machines[i_];
		WorldBlock block_ = world_.blocks[machine_.x + (machine_.y * 100)];
		int alloc = alloc_(&world_, &block_);
		PlayerMoving data_{};
		data_.packetType = 5, data_.punchX = machine_.x, data_.punchY = machine_.y, data_.characterState = 0x8;
		BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
		BYTE* blc = raw + 56;
		form_visual(blc, block_, world_, peer, false);
		send_raw(peer, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
		delete[] raw, blc;
	}
	add_cctv(peer, "entered", "");
	if (pInfo(peer)->hair == 7102 && door == false) {
		gamepacket_t p(0, pInfo(peer)->netID);
		p.Insert("OnAction"), p.Insert("/omg"), p.CreatePacket(peer);
	}
}

void add_curse(ENetPeer* peer, int seconds, string reason, string cursedby) {
	if (not has_playmod(pInfo(peer), "Curse")) {
		PlayMods give_playmod{};
		give_playmod.id = 78;
		give_playmod.time = time(nullptr) + seconds;
		pInfo(peer)->playmods.push_back(give_playmod);
		pInfo(peer)->m_r = reason;
		update_clothes(peer);
		{
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`oYou're on the HIGHWAY TO HELL!! (`$Curse`` mod added, " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds") + " left)");
			p.CreatePacket(peer);
		}
		gamepacket_t p;
		p.Insert("OnConsoleMessage");
		p.Insert("`#**`` `$The Ancient Ones`` have been `4cursed `` " + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name)) + "`` `#**`` (`4/rules`` to see the rules!)");
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			p.CreatePacket(currentPeer);
		}
		{
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`oWarning from `4Admin``: You've been `bcursed`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
			p.CreatePacket(peer);
			{
				gamepacket_t p;
				p.Insert("OnAddNotification");
				p.Insert("interface/atomic_button.rttex");
				p.Insert("`wWarning from `4Admin``: You've been `bcursed`` for " + ((seconds / 86400 > 0) ? to_string(seconds / 86400) + " days" : (seconds / 3600 > 0) ? to_string(seconds / 3600) + " hours" : (seconds / 60 > 0) ? to_string(seconds / 60) + " minutes" : to_string(seconds) + " seconds"));
				p.Insert("audio/hub_open.wav");
				p.Insert(0);
				p.CreatePacket(peer);
			}
		}
		string namewrld = "HELL";
		join_world(peer, namewrld);
	}
}

ENetPeer* get_clicked_on(World* world_, int x_, int y_) {
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (pInfo(currentPeer)->world == world_->name and not pInfo(currentPeer)->ghost) {
			if (y_ == pInfo(currentPeer)->y / 32) {
				if (pInfo(currentPeer)->state == 0 and x_ * 32 < pInfo(currentPeer)->x and abs(x_ * 32 - pInfo(currentPeer)->x) < 32 or pInfo(currentPeer)->state == 16 and abs(x_ * 32 - pInfo(currentPeer)->x) < 32 or pInfo(currentPeer)->state != 16 and abs(x_ * 32 - pInfo(currentPeer)->x) < 20) {
					return currentPeer;
				}
			}
		}
	}
	return NULL;
}


void save_player(Player* p_, bool on_exit = true) {
	if (p_->tankIDName.empty() or p_->email.empty()) return;
	if (saving_ and p_->saved_on_close) {
		cout << "already saved" << endl;
		return;
	}
	//saveall
	struct tm newtime;
	if (p_->clash_contri > 0)
	{
		string fileName = "db/clash/solo/" + p_->tankIDName + "_.json";
		std::ifstream fileExists(fileName);
		if (fileExists.good())
		{
			ofstream ofs(fileName);
			json j;
			j["points"] = p_->clash_contri;
			ofs << j << endl;
			ofs.close();
		}
		else
		{
			std::ofstream createFile(fileName);
			if (createFile.is_open()) {
				json j;
				j["points"] = p_->clash_contri;
				createFile << j << endl;
				createFile.close();
			}
		}
	}
	time_t now = time(0);
	localtime_s(&newtime, &now);
	p_->lo = "" + to_string(newtime.tm_mon + 1) + "/" + to_string(today_day) + "/2023 " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min)) + ":" + to_string(newtime.tm_sec) + "";
	json save_, achievements_ = json::array(), friends_ = json::array(), inv_ = json::array(), visited_worlds_ = json::array(), worlds_owned_ = json::array(), playmods_ = json::array();
	save_["name"] = p_->tankIDName;
	save_["proxy"] = p_->proxy;
	save_["harvest_quest"] = p_->harvest_quest;
	save_["fishing_quest"] = p_->fishing_quest;
	save_["tracked"] = p_->tracked;
	save_["n"] = p_->n;
	save_["mod"] = p_->mod;
	save_["dev"] = p_->dev;
	save_["isNew"] = p_->isNew;
	save_["superdev"] = p_->superdev;
	save_["m_h"] = p_->m_h;
	save_["cc"] = p_->cc;
	save_["opc"] = p_->opc;
	save_["bans"] = p_->bans;
	save_["promo"] = p_->promo;
	save_["w_w"] = p_->w_w;
	save_["w_d"] = p_->w_d;
	save_["mer"] = p_->mercy;
	save_["drtt"] = p_->drtitle;
	save_["_drt"] = p_->drt;
	save_["dnr"] = p_->donor;
	save_["mst"] = p_->master;
	save_["lvl125"] = p_->lvl125;
	save_["radio"] = p_->radio;
	save_["flagset"] = p_->flagset;
	save_["skl"] = p_->surgery_skill;
	save_["sgt"] = p_->surgery_type;
	save_["sd"] = p_->surgery_done;
	save_["su1"] = p_->su_8552_1;
	save_["su2"] = p_->su_8552_2;
	save_["egg"] = p_->egg;
	save_["adminLevel"] = p_->adminLevel;
	save_["glo"] = p_->glo;
	//save_["logs"] = p_->logs;
	save_["b_t"] = p_->b_t;
	save_["b_b"] = p_->b_b;
	save_["dd"] = p_->dd;
	save_["AlreadyDailyQ"] = p_->AlreadyDailyQ;
	save_["lo"] = p_->lo;
	save_["ip"] = p_->ip;
	save_["b_s"] = p_->b_s;
	save_["b_r"] = p_->b_r;
	save_["b_ra"] = p_->b_ra;

	//winterfest
	save_["staged"] = p_->staged;
	save_["s4tb"] = p_->s4tb;

	save_["i_11818_1"] = p_->i_11818_1;
	save_["i_11818_2"] = p_->i_11818_2;
	save_["b_lvl"] = p_->b_lvl;
	save_["b_i"] = p_->b_i;
	save_["b_a"] = p_->b_a;
	save_["b_w"] = p_->b_w;
	save_["b_p"] = p_->b_p;
	save_["m_r"] = p_->m_r;
	save_["m_b"] = p_->m_b;
	save_["note"] = p_->note;
	save_["supp"] = p_->supp;
	save_["hs"] = p_->hs;
	save_["dds"] = p_->dds;
	save_["tk"] = p_->tk;
	save_["bb"] = p_->bb;
	save_["gtwl"] = p_->gtwl;
	save_["vip"] = p_->vip;
	save_["rb"] = p_->rb;
	save_["mds"] = p_->mds;
	save_["gr"] = p_->gr;
	save_["gp"] = p_->gp;
	save_["mp"] = p_->mp;
	save_["lgnd"] = p_->lgnd;
	save_["gd"] = p_->gd;
	save_["glo_p"] = p_->glo_p;
	save_["lvl_p"] = p_->lvl_p;
	save_["surg_p"] = p_->surg_p;
	save_["t_p"] = p_->t_p;
	save_["bb_p"] = p_->bb_p;
	save_["ff_p"] = p_->ff_p;
	save_["p_p"] = p_->p_p;
	save_["g_p"] = p_->g_p;
	save_["t_xp"] = p_->t_xp;
	save_["bb_xp"] = p_->bb_xp;
	save_["ff_xp"] = p_->ff_xp;
	save_["s_xp"] = p_->s_xp;
	save_["g_xp"] = p_->g_xp;
	save_["p_xp"] = p_->p_xp;
	save_["t_lvl"] = p_->t_lvl;
	save_["bb_lvl"] = p_->bb_lvl;
	save_["ff_lvl"] = p_->ff_lvl;
	save_["g_lvl"] = p_->g_lvl;
	save_["p_lvl"] = p_->p_lvl;
	save_["s_lvl"] = p_->s_lvl;
	save_["b_l"] = p_->b_l;
	save_["bp"] = p_->bp;
	save_["flagmay"] = p_->flagmay;
	save_["pass"] = p_->tankIDPass, save_["email"] = p_->email;
	save_["gems"] = p_->gems;
	save_["punch"] = p_->punch_count;
	save_["home_world"] = p_->home_world;
	save_["show_location"] = p_->show_location_;
	save_["show_notifications"] = p_->show_friend_notifications_;
	save_["xp"] = p_->xp;
	save_["d_name"] = p_->d_name;
	save_["level"] = p_->level;
	save_["skin"] = p_->skin;
	save_["geiger"] = p_->geiger_;
	save_["ghost"] = p_->ghost;
	save_["bpoi"] = p_->bpoi;
	save_["invis"] = p_->invis;
	save_["raylvl"] = p_->raylvl;
	save_["lastray"] = p_->lastray;
	save_["raybreak"] = p_->raybreak;
	save_["date"] = p_->account_created;
	save_["booty_broken"] = p_->booty_broken;
	save_["playtime"] = p_->seconds + (time(NULL) - p_->playtime);
	save_["guild_id"] = p_->guild_id;
	save_["legend"] = p_->is_legend;
	save_["roleSkin"] = p_->roleSkin;
	save_["roleIcon"] = p_->roleIcon;
	// Role Title & Skin
	save_["rSkin"] = p_->unlockRoleSkin;
	save_["rDrt"] = p_->titleDoctor;
	save_["rFst"] = p_->titleFisher;
	save_["rChf"] = p_->titleChef;
	save_["rStr"] = p_->titleStartopia;
	//mac & ip & vid & aid & pid
	save_["mac"] = p_->mac;
	save_["rid"] = p_->rid;
	save_["vid"] = p_->vid;
	save_["aid"] = p_->aid;
	save_["gid"] = p_->gid;
	save_["pid"] = p_->platformid;
	save_["wk"] = p_->wk;
	for (int i_ = 0; i_ < p_->inv.size(); i_++) {
		json item_;
		item_["i"] = p_->inv[i_].id;
		item_["c"] = p_->inv[i_].count;
		inv_.push_back(item_);
	}
	map<string, int>::iterator it;
	for (it = p_->achievements.begin(); it != p_->achievements.end(); it++) {
		json achievement_;
		achievement_["title"] = it->first;
		achievement_["progress"] = it->second;
		achievements_.push_back(achievement_);
	} for (int i_ = 0; i_ < p_->friends.size(); i_++) {
		json friend_;
		friend_["name"] = p_->friends[i_].name;
		friend_["mute"] = p_->friends[i_].mute;
		friend_["block_trade"] = p_->friends[i_].block_trade;
		friend_["last_seen"] = p_->friends[i_].last_seen;
		friends_.push_back(friend_);
	} for (int i_ = 0; i_ < p_->last_visited_worlds.size(); i_++) {
		json world_;
		world_["name"] = p_->last_visited_worlds[i_];
		visited_worlds_.push_back(world_);
	} for (int i_ = 0; i_ < p_->worlds_owned.size(); i_++) {
		json world_;
		world_["name"] = p_->worlds_owned[i_];
		worlds_owned_.push_back(world_);
	} for (int i_ = 0; i_ < p_->playmods.size(); i_++) {
		json playmod_;
		playmod_["id"] = p_->playmods[i_].id;
		playmod_["time"] = p_->playmods[i_].time;
		playmod_["user"] = p_->playmods[i_].user;
		playmods_.push_back(playmod_);
	}
	json blarneys_ = json::array();
	for (int i_ = 0; i_ < p_->completed_blarneys.size(); i_++) {
		json blarney_;
		blarney_["world"] = p_->completed_blarneys[i_][0];
		blarney_["time"] = p_->completed_blarneys[i_][1];
		blarneys_.push_back(blarney_);
	}
	save_["blarney"] = blarneys_;
	save_["playmods"] = playmods_;
	save_["worlds_owned"] = worlds_owned_;
	save_["last_worlds"] = visited_worlds_;
	save_["inv"] = inv_;
	save_["achievements"] = achievements_;
	save_["friends"] = friends_;
	save_["hair"] = p_->hair, save_["shirt"] = p_->shirt, save_["pants"] = p_->pants, save_["feet"] = p_->feet, save_["face"] = p_->face, save_["hand"] = p_->hand, save_["back"] = p_->back, save_["mask"] = p_->mask, save_["necklace"] = p_->necklace, save_["ances"] = p_->ances;
	ofstream w_("players/" + p_->tankIDName + "_.json");
	if (w_.fail()) {
		cout << "failed to save player " << p_->tankIDName << endl;
		return;
	}
	w_ << save_ << endl;
	w_.close();
	{
		if (on_exit) {
			uint32_t guild_id = p_->guild_id;
			vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				Guild* guild_information = &guilds[p - guilds.begin()];
				for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
					GuildMember* edit_member = &guild_information->guild_members[i_];
					if (edit_member->member_name == p_->tankIDName) {
						edit_member->last_online = time(NULL);
						break;
					}
				}
			}
			vector<string> friends_;
			long long time_t = time(NULL);
			for (int c_ = 0; c_ < p_->friends.size(); c_++) {
				friends_.push_back(p_->friends[c_].name);
			} for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->m_h == 1) continue;
				if (pInfo(currentPeer)->invis == true) continue;
				if (find(friends_.begin(), friends_.end(), pInfo(currentPeer)->tankIDName) != friends_.end()) {
					for (int d_ = 0; d_ < pInfo(currentPeer)->friends.size(); d_++) {
						if (pInfo(currentPeer)->friends[d_].name == p_->tankIDName) {
							pInfo(currentPeer)->friends[d_].last_seen = time_t;
							break;
						}
					}
					if (not p_->invis and not p_->m_h) {
						if (pInfo(currentPeer)->show_friend_notifications_) {
							packet_(currentPeer, "action|play_sfx\nfile|audio/friend_logoff.wav\ndelayMS|0");
							string color = "`o";
							if (p_->adminLevel >= 1) color = admincolor(p_->adminLevel);
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("`3FRIEND ALERT:`` " + color + p_->tankIDName + "`` has `4logged off``.");
							p.CreatePacket(currentPeer);
						}
					}
					friends_.erase(remove(friends_.begin(), friends_.end(), pInfo(currentPeer)->tankIDName), friends_.end());
				}
			}
			try {
				for (int c_ = 0; c_ < friends_.size(); c_++) {
					string path_ = "players/" + friends_.at(c_) + "_.json";
					//if (exists(path_)) {
					if (_access_s(path_.c_str(), 0) == 0) {
						json r_;
						ifstream f_(path_, ifstream::binary);
						if (f_.fail()) {
							cout << "failed reading data for " << friends_.at(c_) << endl;
							return;
						}
						f_ >> r_;
						f_.close();
						json f_g = r_.at("friends").get<json>();
						for (int i_ = 0; i_ < f_g.size(); i_++) {
							if (f_g.at(i_).at("name") == p_->tankIDName) {
								f_g.at(i_).at("last_seen") = time_t;
								break;
							}
						}
						r_.at("friends") = f_g;
						{
							ofstream f_(path_, ifstream::binary);
							f_ << r_;
							f_.close();
						}
					}
				}
			}
			catch (exception)
			{
				return;
				//cout << "3 err " << e.what() << endl;
			}
		}
	}
}

void trigger_save_() {
	if (not saving_) {
		f_saving_ = true;
		saving_ = true;
		gamepacket_t k;
		k.Insert("OnConsoleMessage"), k.Insert("`5Server is going to short maintenance check news from our discord server!");
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			for (int i = 0; i < worlds.size(); i++) {
				save_world(worlds[i].name);
			}
			save_player(pInfo(currentPeer), false);
			k.CreatePacket(currentPeer);
			packet_(currentPeer, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
		}
		// saveprob: sonradan flushladin!
		save_guilds();
		daily_quest();
		Sleep(5000);
		system("PAUSE");
		exit(0);
	}
}

bool is_null(const std::string& str) {
	return str.empty() || std::all_of(str.begin(), str.end(), ::isspace);
}

/*bool check_perma(ENetPeer* peer) {

	std::ifstream ifs("db/ban.json");
	json data = json::parse(ifs);
	bool isNAN = false;
	if (pInfo(peer)->mac == "02:00:00:00:00:00") isNAN = true;
	if (pInfo(peer)->wk == "NONE0") isNAN = true;
	bool vidFound = !is_null(pInfo(peer)->vid) && data["vid"][0] == pInfo(peer)->vid, macFound = !is_null(pInfo(peer)->mac) && !isNAN && data["mac"][0] == pInfo(peer)->mac, wkFound = !is_null(pInfo(peer)->wk) && !isNAN && data["wk"][0] == pInfo(peer)->wk, ipFound = !is_null(pInfo(peer)->ip) && data["ip"][0] == pInfo(peer)->ip, ridFound = !is_null(pInfo(peer)->rid) && data["rid"][0] == pInfo(peer)->rid, aidFound = !is_null(pInfo(peer)->aid) && data["aid"][0] == pInfo(peer)->aid, gidFound = !is_null(pInfo(peer)->gid) && data["gid"][0] == pInfo(peer)->gid;
	return vidFound || macFound || wkFound || ipFound || ridFound || aidFound || gidFound;

}

bool check_perma(const string& str) {

	std::ifstream file("db/ban.json");
	nlohmann::json json_data;
	file >> json_data;
	std::string arananDeger = str;
	cout << "val: " << str << endl;
	if (json_data.contains(arananDeger) && str != "02:00:00:00:00:00" && str != "NONE0" && !json_data[arananDeger].is_null() && str != "" && str != " " && !str.empty()) return true;

}

bool check_perma(const vector<string>& keywords) {
	std::ifstream ifs("db/ban.json");
	json data = json::parse(ifs);
	for (const auto& keyword : keywords) {
		if (data.find(keyword) != data.end()) {
			return true;
		}
	}

	return false;
}

void add_perma(ENetPeer* peer) {

	json data;

	std::vector<std::string> rid = {}, aid = {}, gid = {}, vid = {}, mac = {}, ip = {}, wk = {};

	rid.push_back(pInfo(peer)->rid), aid.push_back(pInfo(peer)->aid), wk.push_back(pInfo(peer)->wk), gid.push_back(pInfo(peer)->gid), ip.push_back(pInfo(peer)->ip), vid.push_back(pInfo(peer)->vid), mac.push_back(pInfo(peer)->mac);

	data["rid"] = rid, data["gid"] = gid, data["vid"] = vid, data["mac"] = mac, data["ip"] = ip, data["wk"] = wk, data["aid"] = aid;

	std::ofstream ofs("db/ban.json");
	ofs << setw(4) << data << endl;

}*/

void add_perma(const string& name, const string& file) {

	json data;
	ifstream player("players/" + name + "_.json", ifstream::binary);
	if (!player.is_open()) return;
	player >> data;
	player.close();
	ofstream add("db/" + file + "", ios::app);
	if (add.fail()) return;
	string anan;
	anan += name + " >> ";
	if (data["mac"] != "02:00:00:00:00:00") anan += data["mac"];
	if (data["wk"] != "NONE0") anan += data["wk"];
	if (!data["gid"].empty()) anan += data["gid"];
	if (!data["rid"].empty()) anan += data["rid"];
	if (!data["vid"].empty()) anan += data["vid"];
	if (!data["aid"].empty()) anan += data["aid"];
	if (!data["ip"].empty()) anan += data["ip"];
	anan += "\n";
	add << anan;
	add.close();

} // memleak risk: file write

void hardBan(ENetPeer* peer, const string player) {
	bool found = false;
	string pname;
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (to_lower(player) == to_lower(pInfo(currentPeer)->tankIDName)) {

			gamepacket_t ps;
			ps.Insert("OnConsoleMessage");
			ps.Insert("`4ALREADY ON?! `o: This account was already online, kicking it off so you can log on. (if you were just playing before, this is nothing to worry about)");
			ps.CreatePacket(currentPeer);
			gamepacket_t p(300);
			p.Insert("OnRedirectServer"), p.Insert("127.0.0.1"), p.Insert(17091), p.Insert(1), p.CreatePacket(currentPeer);
			add_perma(player, "device.txt");
			add_oan(peer, player, 6.307e+7, "system");

			string messages = pInfo(peer)->tankIDName + " Hard Banned " + pInfo(currentPeer)->tankIDName;
			ofstream file("logs/hardban.txt", ios::app);
			if (file.is_open()) {
				auto now = time(nullptr);
				file << "" << getDate() << " " << messages << "\n";
			}
			file.close();
			found = true;
			break;
		}
	}
	if (!found) {
		add_perma(player, "device.txt");
		add_oan(peer, player, 6.307e+7, "system");
		gamepacket_t p;
		p.Insert("OnConsoleMessage"), p.Insert("`oSuccessfuly banned!"), p.CreatePacket(peer);
	}
	ServerLog(player + " device banned by " + (player == pInfo(peer)->tankIDName ? "system" : pInfo(peer)->tankIDName));
}

bool check_perma(ENetPeer* peer, const string& file) {

	string line;
	ifstream device("db/" + file + "");
	if (device.fail() || device.peek() == std::ifstream::traits_type::eof()) {
		device.close();
		return false;
	}

	while (getline(device, line)) {
		if (line.find(pInfo(peer)->ip) != string::npos && !pInfo(peer)->ip.empty() || line.find(pInfo(peer)->vid) != string::npos && !pInfo(peer)->vid.empty() || line.find(pInfo(peer)->aid) != string::npos && !pInfo(peer)->aid.empty() || line.find(pInfo(peer)->wk) != string::npos && !pInfo(peer)->wk.empty() || line.find(pInfo(peer)->mac) != string::npos && !pInfo(peer)->mac.empty() || line.find(pInfo(peer)->rid) != string::npos && !pInfo(peer)->rid.empty() || line.find(pInfo(peer)->gid) != string::npos && !pInfo(peer)->gid.empty()) {
			if (line.find(pInfo(peer)->ip) == string::npos) {
				ServerLog(pInfo(peer)->tankIDName + " (" + pInfo(peer)->requestedName + ")" + " tried to bypass ipban with IP: " + pInfo(peer)->ip + "");
				add_perma(pInfo(peer)->tankIDName, "device.txt");
			}
			device.close();
			return true;
		}
	}

	device.close();
	return false;

} //memleak risk: file read

int auth_(ENetPeer* peer) {

	Player* p_ = pInfo(peer);
	string fileName = "db/clash/solo/" + p_->tankIDName + "_.json";
	string path_ = "players/" + p_->tankIDName + "_.json";
		if (_access_s(path_.c_str(), 0) == 0) {
		//cout << "login " << p_->tankIDName << endl;
			try {
		std::ifstream checkFileExistsStream(fileName);
			if (checkFileExistsStream.good())
				{
			  ifstream solo("db/clash/solo/" + p_->tankIDName + "_.json");
			  json jss;
			  solo >> jss;
			  p_->clash_contri = jss["points"].get<int>();
			  solo.close();
			}
			//saveall
			json r_;
			ifstream f_(path_, ifstream::binary);
			if (f_.fail()) {
				cout << "failed reading data for " << p_->tankIDName << endl;
				return -1;
			}
			f_ >> r_;
			f_.close();
			if (p_->tankIDPass != r_["pass"])
				return -1;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(p_->tankIDName) and pInfo(currentPeer)->id != p_->id) {
					save_player(pInfo(currentPeer));
					if (p_->tankIDPass != r_["pass"])
						return -1;					pInfo(currentPeer)->invalid_data = true;
					exit_(currentPeer, true);
					enet_peer_disconnect_later(currentPeer, 0);
					ifstream f_(path_, ifstream::binary);
					f_ >> r_;
					f_.close();
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`4ALREADY ON?! `o: This account was already online, kicking it off so you can log on. (if you were just playing before, this is nothing to worry about)");
					p.CreatePacket(peer);
					break;
				}
			}
			json a_ = r_["inv"].get<json>(), b_ = r_["achievements"].get<json>(), c_ = r_["friends"].get<json>(), d_ = r_["last_worlds"].get<json>(), e_ = r_["worlds_owned"].get<json>();
			for (int i_ = 0; i_ < a_.size(); i_++) {
				Items item_{};
				item_.id = a_[i_]["i"].get<int>();
				item_.count = a_[i_]["c"].get<int>();
				p_->inv.push_back(item_);
			} for (int i_ = 0; i_ < b_.size(); i_++) {
				p_->achievements.insert({ b_[i_]["title"].get<string>(), b_[i_]["progress"].get<int>() });
			} for (int i_ = 0; i_ < c_.size(); i_++) {
				Friends new_friend_;
				new_friend_.name = c_[i_]["name"].get<string>();
				new_friend_.mute = c_[i_]["mute"].get<bool>();
				new_friend_.block_trade = c_[i_]["block_trade"].get<bool>();
				new_friend_.last_seen = c_[i_]["last_seen"].get<long long>();
				p_->friends.push_back(new_friend_);
			} for (int i_ = 0; i_ < d_.size(); i_++) {
				p_->last_visited_worlds.push_back(d_[i_]["name"].get<string>());
			} for (int i_ = 0; i_ < e_.size(); i_++) {
				p_->worlds_owned.push_back(e_[i_]["name"].get<string>());
			}
			p_->is_legend = (!(r_.find("legend") != r_.end()) ? false : r_["legend"].get<bool>());
			p_->bb = (!(r_.find("bb") != r_.end()) ? false : r_["bb"].get<bool>());
			p_->proxy = (!(r_.find("proxy") != r_.end()) ? false : r_["proxy"].get<bool>());
			p_->dd = (!(r_.find("dd") != r_.end()) ? 0 : r_["dd"].get<int>());
			p_->AlreadyDailyQ = (!(r_.find("AlreadyDailyQ") != r_.end()) ? false : r_["AlreadyDailyQ"].get<bool>());
			p_->supp = (!(r_.find("supp") != r_.end()) ? 0 : r_["supp"].get<int>());
			p_->hs = (!(r_.find("hs") != r_.end()) ? 0 : r_["hs"].get<int>());
			p_->dds = (!(r_.find("dds") != r_.end()) ? 0 : r_["dds"].get<int>());
			p_->tk = (!(r_.find("tk") != r_.end()) ? 0 : r_["tk"].get<int>());
			p_->note = (!(r_.find("note") != r_.end()) ? "" : r_["note"].get<string>());
			p_->d_name = (!(r_.find("d_name") != r_.end()) ? "" : r_["d_name"].get<string>());
			p_->gtwl = (!(r_.find("gtwl") != r_.end()) ? 0 : r_["gtwl"].get<int>());
			p_->vip = (!(r_.find("vip") != r_.end()) ? 0 : r_["vip"].get<int>());
			p_->rb = (!(r_.find("rb") != r_.end()) ? 0 : r_["rb"].get<int>());
			p_->mds = (!(r_.find("mds") != r_.end()) ? 0 : r_["mds"].get<int>());
			p_->gr = (!(r_.find("gr") != r_.end()) ? p_->gr : r_["gr"].get<vector<string>>());
			p_->gp = (!(r_.find("gp") != r_.end()) ? 0 : r_["gp"].get<int>());
			p_->mp = (!(r_.find("mp") != r_.end()) ? 0 : r_["mp"].get<int>());
			p_->lgnd = (!(r_.find("lgnd") != r_.end()) ? 0 : r_["lgnd"].get<int>());
			p_->gd = (!(r_.find("gd") != r_.end()) ? 0 : r_["gd"].get<int>());
			p_->glo = (!(r_.find("glo") != r_.end()) ? 0 : r_["glo"].get<int>());
			p_->glo_p = (!(r_.find("glo_p") != r_.end()) ? p_->glo_p : r_["glo_p"].get<vector<int>>());
			p_->lvl_p = (!(r_.find("lvl_p") != r_.end()) ? p_->lvl_p : r_["lvl_p"].get<vector<int>>());
			p_->surg_p = (!(r_.find("surg_p") != r_.end()) ? p_->surg_p : r_["surg_p"].get<vector<int>>());
			p_->t_p = (!(r_.find("t_p") != r_.end()) ? p_->t_p : r_["t_p"].get<vector<int>>());
			p_->bb_p = (!(r_.find("bb_p") != r_.end()) ? p_->bb_p : r_["bb_p"].get<vector<int>>());
			p_->ff_p = (!(r_.find("ff_p") != r_.end()) ? p_->ff_p : r_["ff_p"].get<vector<int>>());
			p_->p_p = (!(r_.find("p_p") != r_.end()) ? p_->p_p : r_["p_p"].get<vector<int>>());
			p_->g_p = (!(r_.find("g_p") != r_.end()) ? p_->g_p : r_["g_p"].get<vector<int>>());
			p_->t_xp = (!(r_.find("t_xp") != r_.end()) ? 0 : r_["t_xp"].get<int>());
			p_->bb_xp = (!(r_.find("bb_xp") != r_.end()) ? 0 : r_["bb_xp"].get<int>());
			p_->ff_xp = (!(r_.find("ff_xp") != r_.end()) ? 0 : r_["ff_xp"].get<int>());
			p_->s_xp = (!(r_.find("s_xp") != r_.end()) ? 0 : r_["s_xp"].get<int>());
			p_->g_xp = (!(r_.find("g_xp") != r_.end()) ? 0 : r_["g_xp"].get<int>());
			p_->adminLevel = (!(r_.find("adminLevel") != r_.end()) ? 0 : r_["adminLevel"].get<int>());
			p_->harvest_quest = (!(r_.find("harvest_quest") != r_.end()) ? 0 : r_["harvest_quest"].get<int>());
			p_->fishing_quest = (!(r_.find("fishing_quest") != r_.end()) ? 0 : r_["fishing_quest"].get<int>());
			p_->p_xp = (!(r_.find("p_xp") != r_.end()) ? 0 : r_["p_xp"].get<int>());
			p_->t_lvl = (!(r_.find("t_lvl") != r_.end()) ? 0 : r_["t_lvl"].get<int>());
			p_->bb_lvl = (!(r_.find("bb_lvl") != r_.end()) ? 0 : r_["bb_lvl"].get<int>());
			p_->ff_lvl = (!(r_.find("ff_lvl") != r_.end()) ? 0 : r_["ff_lvl"].get<int>());
			p_->s_lvl = (!(r_.find("s_lvl") != r_.end()) ? 0 : r_["s_lvl"].get<int>());
			p_->g_lvl = (!(r_.find("g_lvl") != r_.end()) ? 0 : r_["g_lvl"].get<int>());
			p_->p_lvl = (!(r_.find("p_lvl") != r_.end()) ? 0 : r_["p_lvl"].get<int>());
			p_->b_l = (!(r_.find("b_l") != r_.end()) ? 1 : r_["b_l"].get<int>());
			p_->bp = (!(r_.find("bp") != r_.end()) ? p_->bp : r_["bp"].get<vector<pair<int, int>>>());
			p_->flagmay = (!(r_.find("flagmay") != r_.end()) ? p_->flagmay : r_["flagmay"].get<int>());
			
			//winterfest
			p_->staged = (!(r_.find("staged") != r_.end()) ? p_->staged : r_["staged"].get<int>());
			p_->s4tb = (!(r_.find("s4tb") != r_.end()) ? p_->s4tb : r_["s4tb"].get<int>());

			p_->cc = (!(r_.find("cc") != r_.end()) ? p_->cc : r_["cc"].get<int>());
			p_->opc = (!(r_.find("opc") != r_.end()) ? p_->opc : r_["opc"].get<int>());
			p_->tracked = (!(r_.find("tracked") != r_.end()) ? p_->tracked : r_["tracked"].get<bool>());
			p_->superdev = (!(r_.find("superdev") != r_.end()) ? p_->superdev : r_["superdev"].get<int>());
			p_->b_i = (!(r_.find("b_i") != r_.end()) ? p_->b_i : r_["b_i"].get<int>());
			p_->b_a = (!(r_.find("b_a") != r_.end()) ? p_->b_a : r_["b_a"].get<int>());
			p_->b_w = (!(r_.find("b_w") != r_.end()) ? p_->b_w : r_["b_w"].get<int>());
			p_->b_p = (!(r_.find("b_p") != r_.end()) ? p_->b_p : r_["b_p"].get<int>());
			p_->surgery_skill = (!(r_.find("skl") != r_.end()) ? p_->surgery_skill : r_["skl"].get<int>());
			p_->surgery_type = (!(r_.find("sgt") != r_.end()) ? p_->surgery_type : r_["sgt"].get<int>());
			p_->surgery_done = (!(r_.find("sd") != r_.end()) ? p_->surgery_done : r_["sd"].get<int>());
			p_->su_8552_1 = (!(r_.find("su1") != r_.end()) ? p_->su_8552_1 : r_["su1"].get<int>());
			p_->su_8552_2 = (!(r_.find("su2") != r_.end()) ? p_->su_8552_2 : r_["su2"].get<int>());
			p_->b_ra = (!(r_.find("b_ra") != r_.end()) ? p_->b_ra : r_["b_ra"].get<int>());
			p_->b_lvl = (!(r_.find("b_lvl") != r_.end()) ? p_->b_lvl : r_["b_lvl"].get<int>());
			p_->i_11818_1 = (!(r_.find("i_11818_1") != r_.end()) ? p_->i_11818_1 : r_["i_11818_1"].get<signed char>());
			p_->i_11818_2 = (!(r_.find("i_11818_2") != r_.end()) ? p_->i_11818_2 : r_["i_11818_2"].get<signed char>());
			p_->raylvl = (!(r_.find("raylvl") != r_.end()) ? p_->raylvl : r_["raylvl"].get<int>());
			p_->lastray = (!(r_.find("lastray") != r_.end()) ? p_->lastray : r_["lastray"].get<int>());
			p_->raybreak = (!(r_.find("raybreak") != r_.end()) ? p_->raybreak : r_["raybreak"].get<int>());
			p_->roleIcon = (!(r_.find("roleIcon") != r_.end()) ? 6 : r_["roleIcon"].get<int>());
			p_->promo = (!(r_.find("promo") != r_.end()) ? p_->promo : r_["promo"].get<int>());
			p_->flagset = (!(r_.find("flagset") != r_.end()) ? p_->flagset : r_["flagset"].get<int>());
			p_->radio = (!(r_.find("radio") != r_.end()) ? p_->radio : r_["radio"].get<int>());
			p_->w_w = (!(r_.find("w_w") != r_.end()) ? p_->w_w : r_["w_w"].get<int>());
			p_->w_d = (!(r_.find("w_d") != r_.end()) ? p_->w_d : r_["w_d"].get<int>());
			p_->egg = (!(r_.find("egg") != r_.end()) ? p_->egg : r_["egg"].get<int>());
			p_->mercy = (!(r_.find("mer") != r_.end()) ? p_->mercy : r_["mer"].get<bool>());
			p_->drtitle = (!(r_.find("drtt") != r_.end()) ? p_->drtitle : r_["drtt"].get<bool>());
			p_->drt = (!(r_.find("_drt") != r_.end()) ? p_->drt : r_["_drt"].get<bool>());
			p_->lvl125 = (!(r_.find("lvl125") != r_.end()) ? p_->lvl125 : r_["lvl125"].get<bool>());
			p_->donor = (!(r_.find("dnr") != r_.end()) ? p_->donor : r_["dnr"].get<int>());
			p_->master = (!(r_.find("mst") != r_.end()) ? p_->master : r_["mst"].get<int>());
			p_->tankIDName = r_["name"].get<string>();
			p_->email = r_["email"].get<string>();
			p_->b_r = r_["b_r"].get<string>();
			p_->b_b = r_["b_b"].get<string>();
			p_->b_s = r_["b_s"].get<long long int>();
			p_->b_t = r_["b_t"].get<long long int>();
			p_->m_r = r_["m_r"].get<string>();
			p_->m_b = r_["m_b"].get<string>();
			p_->punch_count = r_["punch"].get<long long int>();
			p_->n = r_["n"].get<int>();
			p_->lo = r_["lo"].get<string>();
			p_->ghost = r_["ghost"].get<bool>();
			p_->bpoi = r_["bpoi"].get<int>();
			p_->isNew = r_["isNew"].get<bool>();
			p_->invis = r_["invis"].get<bool>();
			p_->bans = r_["bans"].get<vector<string>>();
			//p_->logs = r_["logs"].get<vector<string>>();
			
			// Role Title & Skin
			p_->unlockRoleSkin = (!(r_.find("rSkin") != r_.end()) ? p_->unlockRoleSkin : r_["rSkin"].get<bool>());
			p_->titleDoctor = (!(r_.find("rDrt") != r_.end()) ? p_->titleDoctor : r_["rDrt"].get<bool>());
			p_->titleFisher = (!(r_.find("rFst") != r_.end()) ? p_->titleFisher : r_["rFst"].get<bool>());
			p_->titleChef = (!(r_.find("rChf") != r_.end()) ? p_->titleChef : r_["rChf"].get<bool>());
			p_->titleStartopia = (!(r_.find("rStr") != r_.end()) ? p_->titleStartopia : r_["rStr"].get<bool>());

			p_->mod = r_["mod"].get<int>();
			p_->dev = r_["dev"].get<int>();
			p_->m_h = r_["m_h"].get<int>();
			p_->gems = r_["gems"].get<int>();
			p_->xp = r_["xp"].get<long long int>();
			p_->level = r_["level"].get<signed char>();
			p_->skin = r_["skin"].get<int>();
			p_->show_location_ = r_["show_location"].get<bool>();
			p_->show_friend_notifications_ = r_["show_notifications"].get<bool>();
			p_->playtime = time(NULL), p_->seconds = r_["playtime"].get<long long int>();
			p_->account_created = r_["date"].get<long long int>();
			if (p_->account_created == 0) p_->account_created = time(NULL) / 86400;
			p_->home_world = r_["home_world"].get<string>();
			p_->hair = r_["hair"].get<int>();
			p_->shirt = r_["shirt"].get<int>();
			p_->pants = r_["pants"].get<int>();
			p_->feet = r_["feet"].get<int>();
			p_->face = r_["face"].get<int>();
			p_->ip = r_["ip"].get<string>();
			p_->gid = r_["gid"].get<string>();
			p_->vid = r_["vid"].get<string>();
			p_->wk = r_["wk"].get<string>();
			p_->aid = r_["aid"].get<string>();
			p_->mac = r_["mac"].get<string>();
			p_->rid = r_["rid"].get<string>();
			p_->hand = r_["hand"].get<int>();
			p_->back = r_["back"].get<int>();
			p_->mask = r_["mask"].get<int>();
			p_->necklace = r_["necklace"].get<int>();
			p_->ances = r_["ances"].get<int>();
			if (r_.find("guild_id") != r_.end()) {
				p_->guild_id = r_["guild_id"].get<int>();
			}
			if (r_.find("geiger") != r_.end()) {
				p_->geiger_ = r_["geiger"].get<int>();
			}
			if (r_.find("booty_broken") != r_.end()) {
				p_->booty_broken = r_["booty_broken"].get<int>();
			}
			if (r_.find("playmods") != r_.end()) {
				json list_playmod = r_["playmods"].get<json>();
				for (int i_ = 0; i_ < list_playmod.size(); i_++) {
					PlayMods give_playmod{};
					give_playmod.id = list_playmod[i_]["id"].get<int>();
					give_playmod.time = list_playmod[i_]["time"].get<long long>();
					if (list_playmod[i_].find("user") != list_playmod[i_].end()) {
						give_playmod.user = list_playmod[i_]["user"].get<string>();
					}
					p_->playmods.push_back(give_playmod);
				}
			}
			if (r_.find("blarney") != r_.end()) {
				json list_blarney = r_["blarney"].get<json>();
				for (int i_ = 0; i_ < list_blarney.size(); i_++) {
					int w_ = list_blarney[i_]["world"].get<int>();
					long long tim_ = list_blarney[i_]["time"].get<long long>();
					for (int c_ = 0; c_ < p_->completed_blarneys.size(); c_++) {
						if ((int)p_->completed_blarneys[c_][0] == w_) {
							p_->completed_blarneys[c_][1] = tim_;
							break;
						}
					}
				}
			}
			if (p_->ghost or p_->invis) {
				if (not p_->mod and not p_->dev) {
					p_->invis = false;
				}
				if (not p_->dev) {
					p_->ghost = false;
					if (p_->skin == -2450) p_->skin = 0x8295C3FF;
				}
			}
			if (pInfo(peer)->supp == 2) {
				/*gamepacket_t p;
				p.Insert("OnOverrideGDPRFromServer");
				p.Insert(39);
				p.Insert(1);
				p.Insert(0);
				p.Insert(1);
				p.CreatePacket(peer);*/
				{
					gamepacket_t p;
					string skinVal1 = (pInfo(peer)->t_lvl >= 50 ? "1" : "0");
					string skinVal2 = (pInfo(peer)->bb_lvl >= 50 ? "1" : "0");
					string skinVal3 = (pInfo(peer)->unlockRoleSkin ? "1111" : "0000");
					string roleSkin = skinVal1 + skinVal2 + skinVal3;
					string titleVal1 = (pInfo(peer)->t_lvl >= 50 ? "2" : "0");
					string titleVal2 = (pInfo(peer)->bb_lvl >= 50 ? "2" : "0");
					string titleVal3 = (pInfo(peer)->titleDoctor ? "2" : "0");
					string titleVal4 = (pInfo(peer)->titleFisher ? "2" : "0");
					string titleVal5 = (pInfo(peer)->titleChef ? "2" : "0");
					string titleVal6 = (pInfo(peer)->titleStartopia ? "2" : "0");
					string roleTitle = titleVal1 + titleVal2 + titleVal3 + titleVal4 + titleVal5 + titleVal6;
					p.Insert("OnSetRoleSkinsAndTitles");
					p.Insert(roleSkin);
					p.Insert(roleTitle);
					p.CreatePacket(peer);
				}
			}
			if (p_->gp == 1) {
				gamepacket_t p;
				p.Insert("OnPaw2018SkinColor1Changed");
				p.Insert(1);
				p.CreatePacket(peer);
				{
					gamepacket_t p;
					p.Insert("OnPaw2018SkinColor2Changed");
					p.Insert(1);
					p.CreatePacket(peer);
				}
			}
			{
				gamepacket_t p;
				p.Insert("OnSetBux");
				p.Insert(pInfo(peer)->gems);
				p.Insert(1);
				p.Insert((pInfo(peer)->supp >= 1) ? 1 : 0);
				if (pInfo(peer)->supp >= 2) {
					p.Insert((float)33796, (float)1, (float)0);
				}
				p.CreatePacket(peer);
			}
		}
		catch (exception) {
			return -1;
		}
		gamepacket_t p;
		p.Insert("SetHasGrowID");
		p.Insert(1);
		p.Insert(p_->tankIDName);
		p.Insert(p_->tankIDPass);
		p.CreatePacket(peer);
		return 0;
	}
	return -1;
}
string r_dialog(const string& r_, const string& a_ = "", const string& b_ = "", const string& c_ = "", const string& d_ = "") {
	return "text_scaling_string|Dirttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt|\nset_default_color|`o\nadd_label_with_icon|big|`wGet a GrowID``|left|206|\nadd_spacer|small|\nadd_textbox|" + (r_.empty() ? "By choosing a `wGrowID``, you can use a name and password to logon from any device.Your `wname`` will be shown to other players!" : r_) + "|left|\nadd_spacer|small|\nadd_text_input|logon|Name|" + a_ + "|18|\nadd_textbox|Your `wpassword`` must contain `w8 to 18 characters, 1 letter, 1 number`` and `w1 special character: @#!$^&*.,``|left|\nadd_text_input_password|password|Password|" + b_ + "|18|\nadd_text_input_password|password_verify|Password Verify|" + c_ + "|18|\nadd_textbox|Your `wemail`` will only be used for account verification and support. If you enter a fake email, you can't verify your account, recover or change your password.|left|\nadd_text_input|email|Email|" + d_ + "|64|\nadd_textbox|We will never ask you for your password or email, never share it with anyone!|left|\nend_dialog|growid_apply|Cancel|Get My GrowID!|\n";
}

string form_mods(Player* p_, int text) {
	vector<string> player_playmods;
	long long time_ = time(nullptr);
	vector<string> added_{};
	for (PlayMods peer_playmod : p_->playmods) {
		for (vector<string> get_ : info_about_playmods) {
			uint32_t playmod_id = atoi(get_[0].c_str());
			if (playmod_id == peer_playmod.id) {
				string playmod_name = get_[2];
				if (find(added_.begin(), added_.end(), playmod_name) == added_.end()) {
					added_.push_back(playmod_name);
					player_playmods.push_back(playmod_name + "`` (`w" + to_playmod_time(peer_playmod.time - time_) + "``left)"), player_playmods.push_back(get_[5]);
				}
			}
		}
	}
	player_playmods.push_back(items[p_->hair].playmod), player_playmods.push_back(to_string(p_->hair));
	player_playmods.push_back(items[p_->shirt].playmod), player_playmods.push_back(to_string(p_->shirt));
	player_playmods.push_back(items[p_->pants].playmod), player_playmods.push_back(to_string(p_->pants));
	player_playmods.push_back(items[p_->feet].playmod), player_playmods.push_back(to_string(p_->feet));
	player_playmods.push_back(items[p_->face].playmod), player_playmods.push_back(to_string(p_->face));
	player_playmods.push_back(items[p_->hand].playmod), player_playmods.push_back(to_string(p_->hand));
	player_playmods.push_back(items[p_->back].playmod), player_playmods.push_back(to_string(p_->back));
	player_playmods.push_back(items[p_->mask].playmod), player_playmods.push_back(to_string(p_->mask));
	player_playmods.push_back(items[p_->necklace].playmod), player_playmods.push_back(to_string(p_->necklace));
	player_playmods.push_back(items[p_->ances].playmod), player_playmods.push_back(to_string(p_->ances));
	if (p_->ghost) player_playmods.push_back("Ghost in the Shell"), player_playmods.push_back("290");
	if (p_->b_s != 0) player_playmods.push_back("Duct Tape"), player_playmods.push_back("408");
	if (p_->hand == 2286) player_playmods.push_back("Charging Geiger Counter`` (" + to_string(p_->geiger_) + "%)"), player_playmods.push_back("2204");
	if (p_->spotlight) player_playmods.push_back("In the Spotlight"), player_playmods.push_back("2646");
	string t_ = "";
	int active = 0;
	try {
		for (int i_ = 0; i_ < player_playmods.size(); i_++) {
			if (player_playmods.at(i_).empty() or isdigit(player_playmods.at(i_).at(0))) continue;
			t_ += (text == 0 ? "\nadd_label_with_icon|small|`w" + player_playmods.at(i_) + "``|left|" + player_playmods.at(i_ + 1) + "|" : "\n`w" + player_playmods.at(i_) + "``");
			active++;
		}
	}
	catch (out_of_range) {
		return t_;
	}
	if (t_.empty())
		t_ = "";
	else
		if (text == 0) t_ = "\nadd_textbox|`wActive effects:``|left|\nadd_label_with_icon|small|" + t_;
		else t_ = "\n" + to_string(active) + " mods active:" + t_;
	return t_;
}

void gems_(ENetPeer* peer, World* world_, int c_, int x_, int y_, int from) {
	bool doubled = false;
	if (from == 5136 || from == 9902 || from == 9400 || from == 9384) return;
	if (from != 1008 and from != 5196 and from != 3604) {
		if (doubled) {
			PlayerMoving data_{};
			data_.packetType = 17, data_.netID = 125, data_.YSpeed = 125, data_.x = x_ + 16, data_.y = y_ + 16;
			BYTE* raw = packPlayerMoving(&data_);
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->world == world_->name) send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			}
			delete[] raw;
		}

	}
	if (pInfo(peer)->gems >= 2000000000) {
		gamepacket_t p;
		p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
		p.Insert("`4You can't keep over than 2 billion gems!");
		p.CreatePacket(peer);
		return;
	}
	pInfo(peer)->gems += c_;
	gamepacket_t ps;
	ps.Insert("OnSetBux"), ps.Insert(pInfo(peer)->gems), ps.Insert(1), ps.Insert((pInfo(peer)->supp >= 1) ? 1 : 0);
	if (pInfo(peer)->supp >= 2) {
		ps.Insert((float)33796, (float)1, (float)0);
	}
	ps.CreatePacket(peer);
}
bool static_(BlockTypes& c_, ItemDB item_) {
	// sugalvoti kaip nuspresti ar blockas yra solid arba background
	c_ = item_.blockType;
	if (item_.id == 0) return false;
	if (c_ == LOCK or c_ == BEDROCK or c_ == MAIN_DOOR or c_ == FOREGROUND or c_ == DEADLY or c_ == PAIN_BLOCK or item_.name.find(" Block") != string::npos and item_.name.find(" Seed") == string::npos or item_.name.find(" Bricks") != string::npos and item_.name.find(" Seed") == string::npos)
		return true;
	return false;
}
void send_friends(ENetPeer* p_, bool all = false) {
	// labai cia sudinai gavosi   
	int on_ = 0;
	string info_ = "";
	vector<string> friends_, online_friends_;
	for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
		friends_.push_back(pInfo(p_)->friends[c_].name);
	} for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (find(friends_.begin(), friends_.end(), pInfo(currentPeer)->tankIDName) != friends_.end()) {
			online_friends_.push_back(pInfo(currentPeer)->tankIDName);
			on_++;
		}
	} if (all and pInfo(p_)->friends.size() != 0) {
		long long time_t = time(NULL);
		for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
			if (find(online_friends_.begin(), online_friends_.end(), pInfo(p_)->friends[c_].name) == online_friends_.end()) {
				long long friend_last_online_ = time_t - pInfo(p_)->friends[c_].last_seen;
				info_ += "\nadd_friend_image_label_button|" + pInfo(p_)->friends[c_].name + "|`4(" + (friend_last_online_ < 60 ? to_string(friend_last_online_) + "s" : (friend_last_online_ < 3600 ? to_string(friend_last_online_ / 60) + "m" : (friend_last_online_ < 86400 ? to_string(friend_last_online_ / 3600) + "h" : to_string(friend_last_online_ / 86400) + "d"))) + ") ``" + pInfo(p_)->friends[c_].name + "|game/tiles_page14.rttex|1.6|31|23|32|" + (pInfo(p_)->friends[c_].mute ? "true" : "false") + "|" + (pInfo(p_)->friends[c_].block_trade ? "true" : "false") + "|";
			}
		}
		gamepacket_t p;
		p.Insert("OnDialogRequest");
		p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + to_string(on_) + " of " + to_string(pInfo(p_)->friends.size()) + " `wFriends Online``|left|1366|\nadd_spacer|small|" + info_ + "\nadd_spacer|small|\nadd_textbox|`oYou aren't currently ignoring anyone.``|left|\nadd_spacer|small|\nadd_button|all_friends|Edit Friends|noflags|0|0|\nadd_button|friends_options|Friend Options|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nadd_button||Close|noflags|0|0|\nend_dialog|friends|||\nadd_quick_exit|");
		p.CreatePacket(p_);
	}
	else {
		for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
			if (find(online_friends_.begin(), online_friends_.end(), pInfo(p_)->friends[c_].name) != online_friends_.end()) {
				info_ += "\nadd_friend_image_label_button|" + pInfo(p_)->friends[c_].name + "|" + pInfo(p_)->friends[c_].name + "|game/tiles_page14.rttex|1.6|28|23|32|" + (pInfo(p_)->friends[c_].mute ? "true" : "false") + "|" + (pInfo(p_)->friends[c_].block_trade ? "true" : "false") + "|";
			}
		}
		gamepacket_t p;
		p.Insert("OnDialogRequest");
		p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + to_string(on_) + " of " + to_string(pInfo(p_)->friends.size()) + " `wFriends Online``|left|1366|\nadd_spacer|small|" + (on_ == 0 and pInfo(p_)->friends.size() != 0 ? "\nadd_textbox|`oNone of your friends are currently online.``|left|\nadd_spacer|small|" : (pInfo(p_)->friends.size() == 0 ? "\nadd_textbox|`oYou currently have no friends.  That's just sad.  To make some, press a person's wrench icon, then choose `5Add as friend``.``|left|\nadd_spacer|small|" : (on_ != 0 ? info_ : "\nadd_textbox|`oNone of your friends are currently online.``|left|\nadd_spacer|small|"))) + "\nadd_spacer|small|" + (pInfo(p_)->friends.size() == 0 ? "" : (on_ == pInfo(p_)->friends.size() ? "\nadd_spacer|small|\nadd_button|all_friends|Edit Friends|noflags|0|0|" : "\nadd_button|friend_all|Show offline and ignored too|noflags|0|0|\nadd_button|all_friends|Edit Friends|noflags|0|0|")) + "\nadd_button|friends_options|Friend Options|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nadd_button||Close|noflags|0|0|\nend_dialog|friends|||\nadd_quick_exit|");
		p.CreatePacket(p_);
	}
}
void send_social(ENetPeer* p_) {
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	string guildtext = pInfo(p_)->guild_id != 0 ? "Show Guild Members" : "Create Guild";
	p.Insert("set_default_color|`o\nadd_label_with_icon|big| `wSocial Portal`` |left|1366|\nadd_spacer|small|\nadd_button|showfriend|`wShow Friends``|noflags|0|0|\nadd_button|showguild|`w" + guildtext + "``|noflags|0|0|"/*"\nadd_button|bpoi|`wBreakpoint Hub``|noflags|0|0|"*/"\nadd_button|ray|`wUpgrade Rayman``|noflags|0|0|"/*"\nadd_button|gtoken_quests|`wToken Quests``|noflags|0|0|"*/""/*"\nadd_button|communityhub|`wCommunity Hub``|noflags|0|0|\nadd_button|show_apprentices|`wShow Apprentices``|noflags|0|0|\nadd_button|showguild|`w" + asddd_ + "``|noflags|0|0|\nadd_button|trade_history|`wTrade History``|noflags|0|0|"*/"\nadd_quick_exit|\nend_dialog|socialportal||Back|\n");
	p.CreatePacket(p_);
}
void refreshGuildBoard() {
	//if (guild_board.size() != 0) {
	string name = "";
	int members = 0;
	int level = 0;
	int xp = 0;
	guild_board.clear();
	try {
		for (const auto& p : directory_iterator("guilds")) {
			json j;
			ifstream files(p.path());
			files >> j;
			name = j["guild_name"];
			members = j["guild_members"].size();
			level = j["guild_level"];
			xp = j["guild_xp"];
			files.close();

			int total = 0; // burasi olm

			if (level == 1) total = xp;
			else if (level == 2) total = 405000 + xp;
			else if (level == 3) total = 1215000 + xp;
			else if (level == 4) total = 2430000 + xp;
			else if (level == 5) total = 4050000 + xp;
			else if (level == 6) total = 7290000 + xp;
			else if (level == 7) total = 11430000 + xp;
			else if (level == 8) total = 16200000 + xp;
			else if (level == 9) total = 21870000 + xp;
			else if (level == 10) total = 28350000 + xp;
			else if (level == 11) total = 38700000 + xp;
			else if (level == 12) total = 48600000 + xp;
			else if (level == 13) total = 60547500 + xp;
			else if (level == 14) total = 73710000 + xp;
			else if (level == 15) total = 91125000 + xp;

			guild_board.push_back(make_tuple(name, members, level, total));
		}
	}
	catch (out_of_range) {
		return;
	}
	//}
}
void refreshBoard() {
	int lock = 0, itemcount = 0, itemid = 0, sayi = 0;
	string name = "", names = "", dname = "";
	int gems = 0, level = 0, adml = 0, bpoi = 0;
	long long int playtime = 0;
	leader.clear();
	sortplay.clear();
	try {
		for (auto& p : directory_iterator("players")) {
			lock = 0;
			json j;
			ifstream files(p.path());
			files >> j;
			adml = j["adminLevel"];
			dname = j["d_name"];
			name = j["name"];
			playtime = j["playtime"];
			gems = j["gems"];
			level = j["level"];
			lock += gems / 20000;
			json a_ = j["inv"].get<json>();
			for (int i_ = 0; i_ < a_.size(); i_++) {
				itemid = a_.at(i_)["i"].get<int>();
				itemcount = a_.at(i_)["c"].get<int>();
				if (itemid == 242) {
					lock += itemcount;
				}
				if (itemid == 1796) {
					lock += itemcount * 100;
				}
				if (itemid == 7188) {
					lock += itemcount * 10000;
				}
			}
			if (name == "") return;
			if (playtime >= 1000000) playtime = 0;
			sortplay.push_back(make_pair(name, playtime));
			if (level < 10) return;
			leader.push_back(make_pair(name, make_pair(lock, adml)));
		}
	}
	catch (out_of_range) {
		return;
	}
}

void refreshWorld() {
	int w_c = 0, s_c = 0, net_ = 0, r_c = 0;
	for (auto it = worlds.begin(); it != worlds.end(); it++) {
		get_players(it->name, w_c, s_c, net_, r_c);
		if (r_c <= 0) save_world(it->name);
	}
}

void board_world_loop() {
	while (true) {
		this_thread::sleep_for(chrono::minutes(5));
		refreshBoard();
		refreshGuildBoard();
		refreshWorld();
		cout << "boards and active worlds refreshed" << endl;
		server_uptime += 5;
	}
}

void showLeaderBoard(ENetPeer* peer) {
	int sayi = 0;
	string btn = "";
	sort(leader.begin(), leader.end(), [](const auto& a, const auto& b) {
		return a.second.first > b.second.first;
		});
	for (const auto& entry : leader) {
		if (sayi < 100) {
			btn += "\nadd_button|leader_" + entry.first + "|`##" + to_string(sayi + 1) + " " + admincolor(entry.second.second) + "" + entry.first + "|";
			sayi++;
		}
	}
	gamepacket_t k;
	k.Insert("OnDialogRequest");
	k.Insert("\nadd_label_with_icon|big|`wLeaderboard|left|394|\nadd_spacer|small|\nadd_smalltext|`1Note: Requirement is 10 level|\nadd_textbox|`oTop 100 Richest Player of " + server_name + ":|\nadd_spacer|small|" + btn + "\nadd_spacer|\nadd_quick_exit|");
	k.CreatePacket(peer);
}
void showGuildBoard(ENetPeer* p_) {
	sort(guild_board.begin(), guild_board.end(), [](const auto& a, const auto& b) {
		return get<3>(a) > get<3>(b);
		});
	string str = "";
	int sayi = 0;
	for (const auto& entry : guild_board) {
		str += "\nadd_smalltext|`2" + to_string(sayi + 1) + "# `c" + get<0>(entry) + " `0Xp: `#" + to_string(get<3>(entry)) + "|";
		sayi++;
	}
	gamepacket_t h;
	h.Insert("OnDialogRequest"), h.Insert("\nadd_label_with_icon|big|`wTop Level Guilds|left|6012|\nadd_spacer|small|" + str + "\nadd_quick_exit|\nend_dialog|guild_ihsdig|||"), h.CreatePacket(p_);
}
void showTopOnline(ENetPeer* p_) {
	sort(sortplay.begin(), sortplay.end(), [](const auto& a, const auto& b) {
		return a.second > b.second;
		});
	string str = "";
	int sayi = 0;
	for (const auto& entry : sortplay) {
		if (sayi < 25) {
			str += "\nadd_smalltext|`2" + to_string(sayi + 1) + "#`c " + entry.first + ", `wPlaytime:`# " + to_string(entry.second / 60) + " minutes|";
			sayi++;
		}
	}
	gamepacket_t h;
	h.Insert("OnDialogRequest"), h.Insert("\nadd_label_with_icon|big|`wTop Online Players|left|6012|\nadd_spacer|small|" + str + "\nadd_quick_exit|\nend_dialog|socialportal|||"), h.CreatePacket(p_);
}
void edit_friend(ENetPeer* p_, string name_, bool back_ = false) {
	for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
		if (pInfo(p_)->friends[c_].name == name_) {
			if (back_) {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->tankIDName == pInfo(p_)->friends[c_].name) {
						send_friends(p_, true);
						return;
					}
				}
				send_friends(p_);
				break;
			}
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`4Remove Friend``|left|1366|\nadd_spacer|small|\nadd_textbox|`oAre you sure you wish to `4remove`` " + pInfo(p_)->friends[c_].name + " as a friend?|left|\nadd_spacer|small|\nadd_button|remove|`4Remove Friend``|noflags|0|0|\nembed_data|friendID|" + pInfo(p_)->friends[c_].name + "\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_remove|||\nadd_quick_exit|");
			p.CreatePacket(p_);
			break;
		}
	}
}
void send_info_friend(ENetPeer* p_, string name_) {
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(name_)) {
			if (pInfo(currentPeer)->invis or pInfo(currentPeer)->m_h) continue;
			for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
				if (to_lower(pInfo(p_)->friends[c_].name) == to_lower(pInfo(currentPeer)->tankIDName)) {
					pInfo(p_)->last_edit = pInfo(currentPeer)->tankIDName;
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					if (not pInfo(currentPeer)->show_location_) {
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + pInfo(currentPeer)->tankIDName + "``|left|1366|\nadd_spacer|small|\nembed_data|friendID|" + pInfo(currentPeer)->tankIDName + "\nadd_textbox|`o" + pInfo(currentPeer)->tankIDName + " is `2online`` now, but has not made their location public to friends.|left|\nadd_spacer|small|\nadd_button|remove|Remove as friend|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_edit|||\nadd_quick_exit|");
					}
					else {
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + pInfo(currentPeer)->tankIDName + "``|left|1366|\nadd_spacer|small|\nembed_data|friendID|" + pInfo(currentPeer)->tankIDName + "\nadd_textbox|`o" + pInfo(currentPeer)->tankIDName + " is `2online`` now in the world `5" + (pInfo(currentPeer)->world.empty() ? "EXIT" : pInfo(currentPeer)->world) + "``.|left|\nadd_spacer|small|\nadd_button|goto|Warp to `5" + (pInfo(currentPeer)->world.empty() ? "EXIT" : pInfo(currentPeer)->world) + "``|noflags|0|0|" + (pInfo(p_)->friends[c_].mute ? "\nadd_button||`4Can't Send message``|disabled|0|0|\nadd_button|mute|Un Mute Friend|noflags|0|0|" : "\nadd_button|msg|`5Send message``|noflags|0|0|\nadd_button|mute|Mute Friend|noflags|0|0|") + (pInfo(p_)->friends[c_].block_trade ? "\nadd_button|trade_block|Enable Trade|noflags|0|0|" : "\nadd_button|trade_block|Disable Trade|noflags|0|0|") + "\nadd_spacer|small|\nadd_button|remove|Remove as friend|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_edit|||\nadd_quick_exit|");
					}
					p.CreatePacket(p_);
					return;
				}
			}
			return;
		}
	}
	for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
		if (to_lower(pInfo(p_)->friends[c_].name) == to_lower(name_)) {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + name_ + "``|left|1366|\nadd_spacer|small|\nembed_data|friendID|" + name_ + "\nadd_textbox|`o" + name_ + " is `4offline``.|left|\nadd_spacer|small|\nadd_button|remove|Remove as friend|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_edit|||\nadd_quick_exit|");
			p.CreatePacket(p_);
			break;
		}
	}
}

void update_guild_name(ENetPeer* peer, string guild_world, World* world_) {
	update_clothes(peer);
}
void transfer_world(World* world_, ENetPeer* from_, ENetPeer* to_) {
	if (world_->owner_name.empty()) return;
	int lock_id = 0, lock_x = -1, lock_y = -1;
	int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
	for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
		if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
			if (world_->blocks[i_].fg == 202 || world_->blocks[i_].fg == 204 || world_->blocks[i_].fg == 206 || world_->blocks[i_].fg == 4994) continue;
			uint32_t id_ = world_->blocks[i_].fg;
			lock_id = id_, lock_x = i_ % xSize, lock_y = i_ / xSize;
			break;
		}
	}
	if (lock_id == 0) return;
	if (world_->guild_id != 0) {
		uint32_t guild_id = world_->guild_id;
		vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
		if (p != guilds.end()) {
			Guild* guild_information = &guilds[p - guilds.begin()];
			uint32_t my_rank = 0;
			for (GuildMember member_search : guild_information->guild_members) {
				if (member_search.member_name == pInfo(from_)->tankIDName) {
					my_rank = member_search.role_id;
					break;
				}
			}
			if (my_rank < 3 || pInfo(from_)->guild_id != world_->guild_id || pInfo(from_)->guild_id != 0 || pInfo(to_)->guild_id != 0 || pInfo(to_)->guild_id != world_->guild_id) {
				cancel_trade(from_, false);
				gamepacket_t p, p1;
				p.Insert("OnTalkBubble"); p1.Insert("OnTalkBubble");
				p.Insert(pInfo(from_)->netID), p1.Insert(pInfo(from_)->netID);
				p.Insert("That's doesn't seems valid! You doesn't have the Guild/You're trying to abusing exploit bugs!\nThis a warning!");
				p1.Insert("That's doesn't seems valid! You doesn't have the Guild/You're trying to abusing exploit bugs!\nThis a warning!");
				p.Insert(0), p.Insert(0); p1.Insert(0), p1.Insert(0);
				p.CreatePacket(from_); p1.CreatePacket(to_);
				gamepacket_t a, b;
				a.Insert("OnAddNotification"), b.Insert("OnConsoleMessage"); a.Insert("interface/atomic_button.rttex");
				a.Insert("Warning from `4System``: You've been warned for trying to exploit"); a.Insert("audio/hub_open.wav"); a.Insert(0);
				b.Insert("Warning from `4System``: You've been warned for trying to exploit");
				a.CreatePacket(from_), b.CreatePacket(from_);
				{
					gamepacket_t a, b;
					a.Insert("OnAddNotification"), b.Insert("OnConsoleMessage"); a.Insert("interface/atomic_button.rttex");
					a.Insert("Warning from `4System``: You've been warned for trying to exploit"); a.Insert("audio/hub_open.wav"); a.Insert(0);
					b.Insert("Warning from `4System``: You've been warned for trying to exploit");
					a.CreatePacket(to_), b.CreatePacket(to_);
					string Logs = "<:warn:1038681185284542464> `4System`` has've been warn: " + pInfo(to_)->tankIDName + " | <:hacker:1038632206400233522> Warn Message: Warned for trying to exploit";
				}
				return;
			}
			if (pInfo(from_)->tankIDName == world_->owner_name) {
				pInfo(from_)->worlds_owned.erase(remove(pInfo(from_)->worlds_owned.begin(), pInfo(from_)->worlds_owned.end(), world_->name), pInfo(from_)->worlds_owned.end());
			}
			else {
				bool on_ = false;
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->tankIDName == world_->owner_name) {
						pInfo(currentPeer)->worlds_owned.erase(remove(pInfo(currentPeer)->worlds_owned.begin(), pInfo(currentPeer)->worlds_owned.end(), world_->name), pInfo(currentPeer)->worlds_owned.end());
						on_ = true;
						break;
					}
				} if (not on_) {
					try {
						string path_ = "players/" + world_->owner_name + "_.json";
						if (_access_s(path_.c_str(), 0) == 0) {
							json r_;
							ifstream f_(path_, ifstream::binary);
							if (f_.fail()) {
								return;
							}
							f_ >> r_;
							f_.close();
							try {
								json f_ = r_["worlds_owned"].get<json>();
								for (int i_ = 0; i_ < f_.size(); i_++) {
									if (f_[i_]["name"] == world_->name) {
										f_.erase(f_.begin() + i_);
										break;
									}
								}
								r_["worlds_owned"] = f_;
							}
							catch (exception) {
								return;
							}
							{
								ofstream f_(path_, ifstream::binary);
								f_ << r_;
								f_.close();
							}
						}
					}
					catch (exception) {
						return;
					}
				}
			}
			string before_name = world_->owner_name;
			world_->owner_name = pInfo(to_)->tankIDName;
			if (pInfo(to_)->name_color == "`0") world_->owner_named = "`o" + pInfo(to_)->tankIDName;
			if (pInfo(to_)->adminLevel != 0)  world_->owner_named = pInfo(to_)->name_color + pInfo(to_)->tankIDName;
			pInfo(to_)->worlds_owned.push_back(world_->name);
			PlayerMoving data_{};
			data_.packetType = 15, data_.punchX = lock_x, data_.punchY = lock_y, data_.characterState = 0x8;
			data_.netID = pInfo(to_)->id;
			data_.plantingTree = lock_id;
			BYTE* raw = packPlayerMoving(&data_, 56);
			gamepacket_t p;
			p.Insert("OnTalkBubble");
			p.Insert(pInfo(to_)->netID);
			p.Insert("`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``");
			p.Insert(0);
			gamepacket_t p2;
			{
				p2.Insert("OnConsoleMessage");
				p2.Insert("`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``");
			}
			update_clothes(to_);
			update_clothes(from_);
			gamepacket_t p1;
			p1.Insert("OnAddNotification");
			p1.Insert("interface/large/gd_prom.rttex");
			p1.Insert("You have been promoted to Leader");
			p1.Insert("audio/levelup2.wav"); p1.Insert(0);
			p1.CreatePacket(to_);
			gamepacket_t p22;
			p22.Insert("OnConsoleMessage");
			p22.Insert("`5[GUILD ALERT]`` `2" + pInfo(from_)->tankIDName + "`` has been `4demoted`` to Co-Leader!");
			gamepacket_t p3;
			p3.Insert("OnConsoleMessage");
			p3.Insert("`5[GUILD ALERT]`` `2" + pInfo(to_)->tankIDName + "`` has been `2promoted`` to Leader!");
			for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
				GuildMember* edit_member = &guild_information->guild_members[i_];
				if (edit_member->member_name == before_name) edit_member->role_id = 2;
				if (edit_member->member_name == pInfo(to_)->tankIDName) edit_member->role_id = 3;
			}
			int x_ = 0, y_ = 0;
			int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
			for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
				if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
					uint32_t id_ = world_->blocks[i_].fg;
					if (id_ == 5814) {
						x_ = i_ % xSize;
						y_ = i_ / xSize;
						break;
					}
				}
			}
			WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
			PlayerMoving dataa_{};
			dataa_.packetType = 5, dataa_.punchX = x_, dataa_.punchY = y_, dataa_.characterState = 0x8;
			BYTE* raww = packPlayerMoving(&dataa_, 112 + alloc_(world_, block_));
			BYTE* blc = raww + 56;
			form_visual(blc, *block_, *world_, to_, false);
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->world == world_->name) {
					packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
					send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
					send_raw(currentPeer, 4, raww, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
				}
				if (pInfo(currentPeer)->guild_id == guild_id) {
					p22.CreatePacket(currentPeer); p3.CreatePacket(currentPeer);
				}
			}
			update_guild_name(from_, world_->name, world_);
			update_guild_name(to_, world_->name, world_);
			delete[] raw, raww, blc;
		}
		save_world(pInfo(to_)->world, false);
	}
	else {
		for (int i_ = 0; i_ < pInfo(from_)->trade_items.size(); i_++) {
			map<string, int>::iterator it;
			for (auto it = pInfo(from_)->trade_items[i_].begin(); it != pInfo(from_)->trade_items[i_].end(); it++) {
				if (it->first == 5816) {
					cancel_trade(from_, false);
					gamepacket_t p, p1;
					p.Insert("OnTalkBubble"); p1.Insert("OnTalkBubble");
					p.Insert(pInfo(from_)->netID), p1.Insert(pInfo(from_)->netID);
					p.Insert("That doesn't seems valid! You doesn't have the Guild/You're trying to abuse bugs!\nThis a warning!");
					p1.Insert("That doesn't seems valid! You doesn't have the Guild/You're trying to abuse bugs!\nThis a warning!");
					p.Insert(0), p.Insert(0); p1.Insert(0), p1.Insert(0);
					p.CreatePacket(from_); p1.CreatePacket(to_);
					gamepacket_t a, b;
					a.Insert("OnAddNotification"), b.Insert("OnConsoleMessage"); a.Insert("interface/atomic_button.rttex");
					a.Insert("Warning from `4System``: Trying to exploit? Nice try but it won't work here"); a.Insert("audio/hub_open.wav"); a.Insert(0);
					b.Insert("Warning from `4System``: Trying to exploit? Nice try but it won't work here");
					a.CreatePacket(from_), b.CreatePacket(from_);
					{
						gamepacket_t a, b;
						a.Insert("OnAddNotification"), b.Insert("OnConsoleMessage"); a.Insert("interface/atomic_button.rttex");
						a.Insert("Warning from `4System``: Trying to exploit? Nice try but it won't work here"); a.Insert("audio/hub_open.wav"); a.Insert(0);
						b.Insert("Warning from `4System``: Trying to exploit? Nice try but it won't work here");
						a.CreatePacket(to_), b.CreatePacket(to_);
					}
					return;
				}
			}
		}
		if (pInfo(from_)->tankIDName == world_->owner_name) {
			pInfo(from_)->worlds_owned.erase(remove(pInfo(from_)->worlds_owned.begin(), pInfo(from_)->worlds_owned.end(), world_->name), pInfo(from_)->worlds_owned.end());
		}
		else {
			bool on_ = false;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->tankIDName == world_->owner_name) {
					pInfo(currentPeer)->worlds_owned.erase(remove(pInfo(currentPeer)->worlds_owned.begin(), pInfo(currentPeer)->worlds_owned.end(), world_->name), pInfo(currentPeer)->worlds_owned.end());
					on_ = true;
					break;
				}
			} if (not on_) {
				try {
					string path_ = "players/" + world_->owner_name + "_.json";
					if (_access_s(path_.c_str(), 0) == 0) {
						json r_;
						ifstream f_(path_, ifstream::binary);
						if (f_.fail()) {
							return;
						}
						f_ >> r_;
						f_.close();
						try {
							json f_ = r_["worlds_owned"].get<json>();
							for (int i_ = 0; i_ < f_.size(); i_++) {
								if (f_[i_]["name"] == world_->name) {
									f_.erase(f_.begin() + i_);
									break;
								}
							}
							r_["worlds_owned"] = f_;
						}
						catch (exception) {
							return;
						}
						{
							ofstream f_(path_, ifstream::binary);
							f_ << r_;
							f_.close();
						}
					}
				}
				catch (exception) {
					return;
				}
			}
		}
		string before_name = world_->owner_name;
		world_->owner_name = pInfo(to_)->tankIDName;
		if (pInfo(to_)->name_color == "`0") world_->owner_named = "`o" + pInfo(to_)->tankIDName;
		if (pInfo(to_)->adminLevel != 0)  world_->owner_named = pInfo(to_)->name_color + pInfo(to_)->tankIDName;
		pInfo(to_)->worlds_owned.push_back(world_->name);
		PlayerMoving data_{};
		data_.packetType = 15, data_.punchX = lock_x, data_.punchY = lock_y, data_.characterState = 0x8;
		data_.netID = pInfo(to_)->id;
		data_.plantingTree = lock_id;
		BYTE* raw = packPlayerMoving(&data_, 56);
		gamepacket_t p;
		p.Insert("OnTalkBubble");
		p.Insert(pInfo(to_)->netID);
		p.Insert("`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``");
		p.Insert(0);
		gamepacket_t p2;
		{
			p2.Insert("OnConsoleMessage");
			p2.Insert("`5[```w" + world_->name + "`` has been `$World Locked`` by " + pInfo(to_)->name_color + world_->owner_name + "```5]``");
		}
		update_clothes(to_);
		update_clothes(from_);
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (pInfo(currentPeer)->world == world_->name) {
				packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
				send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
			}
		}
		delete[] raw;
		save_world(pInfo(to_)->world, false);
	}
}
void remove_friend(ENetPeer* p_, World* world_, string name_, bool show_Dialog = true) {
	for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
		if (pInfo(p_)->friends[c_].name == name_) {
			if (show_Dialog) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`4Friend removed``|left|1366|\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with " + pInfo(p_)->friends[c_].name + ".|left|\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog|friends_remove_finish|||\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			bool on_ = false;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->tankIDName == name_) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`3FRIEND ALERT:`` " + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` has removed you as a friend.");
					p.CreatePacket(currentPeer);
					for (int c_ = 0; c_ < pInfo(currentPeer)->friends.size(); c_++) {
						if (pInfo(currentPeer)->friends[c_].name == pInfo(p_)->tankIDName) {
							pInfo(currentPeer)->friends.erase(pInfo(currentPeer)->friends.begin() + c_);
							break;
						}
					}
					on_ = true;
					break;
				}
			} if (not on_) {
				try {
					string path_ = "players/" + name_ + "_.json";
					if (_access_s(path_.c_str(), 0) == 0) {
						json r_;
						ifstream f_(path_, ifstream::binary);
						if (f_.fail()) {
							cout << "failed reading data for " << name_ << endl;
							return;
						}
						f_ >> r_;
						f_.close();
						try {
							json f_ = r_["friends"].get<json>();
							for (int i_ = 0; i_ < f_.size(); i_++) {
								if (f_[i_]["name"] == pInfo(p_)->tankIDName) {
									f_.erase(f_.begin() + i_);
									break;
								}
							}
							r_["friends"] = f_;
						}
						catch (exception) {
							return;
						}
						{
							ofstream f_(path_, ifstream::binary);
							f_ << r_;
							f_.close();
						}
					}
				}
				catch (exception) {
					cout << "something failed players/json 2" << endl;
				}
			}
			pInfo(p_)->friends.erase(pInfo(p_)->friends.begin() + c_);
		}
	}
}

void send_all_edit_friends(ENetPeer* p_) {
	string info_ = "";
	for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
		info_ += "\nadd_checkbox|cf_" + to_string(c_) + "|" + pInfo(p_)->friends[c_].name + (pInfo(p_)->friends[c_].mute ? " <Muted>" : "") + (pInfo(p_)->friends[c_].block_trade ? " <Trade Block>" : "") + "|0";
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wAll Friends``|left|1366|\nadd_spacer|small|\nadd_button|remove_multi_friends|Remove|noflags|0|0|\nadd_button|block_multi_friends|Block / Unblock Trade|noflags|0|0|\nadd_button|mute_multi_friends|Mute / Unmute|noflags|0|0|\nadd_spacer|small|" + info_ + "\nadd_button|back|Back|noflags|0|0|\nend_dialog|all_friends|||\nadd_quick_exit|");
	p.CreatePacket(p_);
}
string make_trade_offer(Player* p_, bool special_ = false) {
	if (p_->trade_items.size() == 0 and not special_)
		return "\nadd_textbox|`4Nothing!``|left|";
	string list_ = "";
	for (int i_ = 0; i_ < p_->trade_items.size(); i_++) {
		map<string, int>::iterator it;
		for (auto it = p_->trade_items[i_].begin(); it != p_->trade_items[i_].end(); it++) {
			if (special_)
				list_ += "add_slot|" + to_string(it->first) + "|" + to_string(it->second) + "\n";
			else
				list_ += "\nadd_label_with_icon|small|(`w" + to_string(it->second) + "``) " + items[it->first].ori_name + "|left|" + to_string(it->first) + "|";
		}
	}
	return list_;
}
void send_wrench_self(ENetPeer* peer) {
	time_t s__;
	s__ = time(NULL);
	int days_ = int(s__) / (60 * 60 * 24);
	double hours_ = (double)((s__ - pInfo(peer)->playtime) + pInfo(peer)->seconds) / 3600;
	string num_text = to_string(hours_);
	string rounded = num_text.substr(0, num_text.find(".") + 3);
	int w_c = 0, s_c = 0, net_ = 1, r_c = 0;
	get_players(pInfo(peer)->world, w_c, s_c, net_, r_c);
	string extra = "";
	string Ezio = "";
	if (pInfo(peer)->necklace == 11560 || pInfo(peer)->necklace == 11554 || pInfo(peer)->necklace == 11556 || pInfo(peer)->necklace == 11558) {
		Ezio += "\nadd_custom_button|Ezio|image:interface/large/gui_wrench_u_transform.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
	}
	if (pInfo(peer)->hand == 10952 || pInfo(peer)->hand == 10954 || pInfo(peer)->hand == 10956 || pInfo(peer)->hand == 10958 || pInfo(peer)->hand == 10960) {
		Ezio += "\nadd_custom_button|Space|image:interface/large/gui_wrench_space_animals_transform.rttex;image_size_x:400;image_size_y:260;width: 0.19;|";
	}
	if (pInfo(peer)->necklace == 11818) {
		Ezio += "\nadd_custom_button|scarf_of_seasons_edit|image:interface/large/gui_wrench_banner_seasons_item2.rttex;image_size:400,260;width:0.19;|";
	}
	if (pInfo(peer)->ac_.size() != 0) {
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			if (pInfo(currentPeer)->world == pInfo(peer)->world) {
				if (pInfo(peer)->ac_.find(pInfo(currentPeer)->netID) != pInfo(peer)->ac_.end()) {
					string name_ = pInfo(peer)->world;
					vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
					if (p != worlds.end()) {
						World* world_ = &worlds[p - worlds.begin()];
						string owner_name = world_->owner_name, user_name = pInfo(currentPeer)->tankIDName;
						WorldBlock block_ = world_->blocks[pInfo(peer)->ac_[pInfo(currentPeer)->netID]];
						if (block_.fg == 202 or block_.fg == 204 or block_.fg == 206 or block_.fg == 4994) {
							if (block_.owner_name != user_name) break;
						}
						else {
							if (owner_name != user_name) break;
						}
						extra += "\nadd_button|acceptlock|`2Accept Access on " + items[block_.fg].name + "``|noflags|0|0|";
					}
					break;
				}
			}
		}
	}
	if (pInfo(peer)->pending_guild != 0 and pInfo(peer)->guild_id == 0) {
		uint32_t guild_id = pInfo(peer)->pending_guild;
		vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
		if (p != guilds.end()) {
			Guild* guild_information = &guilds[p - guilds.begin()];
			if (guild_information->guild_members.size() < guild_information->guild_level * 5) {
				extra += "\nadd_button|acceptguild|`2Join " + guild_information->guild_name + " Guild``|noflags|0|0|";
			}
		}
	}
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\n\nadd_player_info|`0" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) + "``|" + (pInfo(peer)->level >= 125 ? "125|5001000|5001000|" : "") + "" + (pInfo(peer)->level <= 125 ? to_string(pInfo(peer)->level) + "|" + to_string(pInfo(peer)->xp) + "|" + to_string(50 * ((pInfo(peer)->level * pInfo(peer)->level) + 2)) : "") + "|\nadd_spacer|small|\nadd_button|autofarm_menu|Autofarm|noflags|0|0|" + extra + "" + (pInfo(peer)->glo >= 1 ? "\nadd_button|glory|Road to Glory|noflags|0|0|" : "") + ""/*"\nadd_button|glory|Road to Glory|noflags|0|0|"*/"\nadd_spacer|small|\nset_custom_spacing|x:5;y:10|" + Ezio + "\nadd_custom_button|title_edit|image:interface/large/gui_wrench_title.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|billboard_edit|image:interface/large/gui_wrench_edit_billboard.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|notebook_edit|image:interface/large/gui_wrench_notebook.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|my_worlds|image:interface/large/gui_wrench_my_worlds.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|goals|image:interface/large/gui_wrench_goals_quests.rttex;image_size:400,260;width:0.19;|\nadd_custom_button|emojis|image:interface/large/gui_wrench_growmojis.rttex;image_size:400,260;width:0.19;|"/*"\nadd_custom_button|g4g_personal_dialog|image:interface/large/gui_wrench_g4g.rttex;image_size:400,260;width:0.19;|"*/""/*"\nadd_custom_button|marvelous_missions|image:interface/large/gui_wrench_marvelous_missions.rttex;image_size:400,260;width:0.19;|"*/"\nadd_custom_break|\nadd_spacer|small|\nset_custom_spacing|x:0;y:0|" + form_mods(pInfo(peer), 0) + (pInfo(peer)->firesputout != 0 ? "\nadd_spacer|small|\nadd_smalltext|Fires Put Out: " + to_string(pInfo(peer)->firesputout) + "|left|" : "") + (pInfo(peer)->carnivalgameswon != 0 ? "\nadd_spacer|small|\nadd_smalltext|Carnival games won: " + to_string(pInfo(peer)->carnivalgameswon) + "|left|" : "") + "\nadd_spacer|small|\nadd_textbox|`oYou have `w" + to_string(pInfo(peer)->inv.size() - 1) + "`` backpack slots.``|left|\nadd_textbox|`oCurrent world: `w" + pInfo(peer)->world + "`` (`w" + to_string(pInfo(peer)->x / 32) + "``, `w" + to_string(pInfo(peer)->y / 32) + "``) (`w" + to_string(w_c) + "`` person)````|left|\nadd_textbox|" + (pInfo(peer)->supp == 0 ? "`oYou are not yet a `2Supporter`` or `5Super Supporter``.``" : pInfo(peer)->supp == 1 ? "`oYou are a `5Supporter`` and have the `wRecycler``.``" : pInfo(peer)->supp == 2 ? "`oYou are a `5Super Supporter`` and have the `wRecycler`` and `w/warp``.``" : "") + "|left|\nadd_textbox|`oYou are standing on the note \"A\".``|left|\nadd_spacer|small|\nadd_textbox|`oTotal time played is `w" + rounded + "`` hours.  This account was created `w" + to_string(days_ - pInfo(peer)->account_created) + "`` days ago.``|left|\nadd_spacer|small|\nend_dialog|popup||Continue|\nadd_quick_exit|");
	p.CreatePacket(peer);
}
void send_trade_confirm_dialog(ENetPeer* peer, ENetPeer* currentPeer, bool self_only = false) {
	pInfo(peer)->block_trade = true;
	pInfo(currentPeer)->block_trade = true;
	string name_ = pInfo(peer)->world;
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		bool world_key_p = false, world_key_cp = false;
		bool guild_key_p = false, guild_key_cp = false;
		string lock = "";
		for (int i_ = 0; i_ < pInfo(peer)->trade_items.size(); i_++) {
			if (world_key_p or guild_key_p) break;
			map<string, int>::iterator it;
			for (auto it = pInfo(peer)->trade_items[i_].begin(); it != pInfo(peer)->trade_items[i_].end(); it++) {
				if (it->first == 1424 or it->first == 5816) {
					if (it->first == 5816) guild_key_p = true;
					else world_key_p = true;
					for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
						if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
							uint16_t id_ = world_->blocks[i_].fg;
							if (id_ != 202 and id_ != 204 and id_ != 206 and id_ != 4994) {
								lock = items[id_].name;
								break;
							}
						}
					}
					break;
				}
			}
		} for (int i_ = 0; i_ < pInfo(currentPeer)->trade_items.size(); i_++) {
			if (world_key_cp or guild_key_cp) break;
			map<string, int>::iterator it;
			for (auto it = pInfo(currentPeer)->trade_items[i_].begin(); it != pInfo(currentPeer)->trade_items[i_].end(); it++) {
				if (it->first == 1424 or it->first == 5816) {
					if (it->first == 5816) guild_key_cp = true;
					else world_key_cp = true;
					for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
						if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
							if (world_->blocks[i_].fg != 202 and world_->blocks[i_].fg != 204 and world_->blocks[i_].fg != 206 and world_->blocks[i_].fg != 4994) {
								lock = items[world_->blocks[i_].fg].name;
								break;
							}
						}
					}
					break;
				}
			}
		}
		string g_name = "";
		if (guild_key_p or guild_key_cp) {
			uint32_t guild_id = world_->guild_id;
			vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				Guild* guild_information = &guilds[p - guilds.begin()];
				g_name = guild_information->guild_name;
			}
		}
		gamepacket_t p;
		p.Insert("OnDialogRequest");
		p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTrade Confirmation``|left|1366|\nadd_spacer|small|\nadd_textbox|`4You'll give:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(peer)) + "\nadd_spacer|small|\nadd_textbox|`2You'll get:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(currentPeer)) + "\nadd_spacer|small|" + (pInfo(currentPeer)->trade_items.size() == 0 ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are about to do a trade without receiving anything in return. Once you do the trade you cannot get the items back.|left|\nadd_textbox|`4Do you really want to do this?``|left|\nadd_spacer|small|" : "") + (guild_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are taking leadership of the guild: `#" + g_name + " and the guild world: " + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a guild world for its name, guild mascot and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (world_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are buying this world, `#" + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a world for its name and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (guild_key_p ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to transfer guild leadership and your guild world `#" + world_->name + "`` - the guild lock ownership will be transferred over to " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``.|left|\nadd_spacer|small|" : (world_key_p ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to sell your world `#" + world_->name + "`` - the world lock ownership will be transferred over to " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``.|left|\nadd_spacer|small|" : "")))) + "\nadd_button|accept|Do The Trade!|noflags|0|0|\nadd_button|back|Cancel|noflags|0|0|\nend_dialog|trade_confirm|||");
		p.CreatePacket(peer);
		if (not self_only) {
			{
				gamepacket_t p;
				p.Insert("OnForceTradeEnd");
				p.CreatePacket(currentPeer);
			}
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTrade Confirmation``|left|1366|\nadd_spacer|small|\nadd_textbox|`4You'll give:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(currentPeer)) + "\nadd_spacer|small|\nadd_textbox|`2You'll get:``|left|\nadd_spacer|small|" + make_trade_offer(pInfo(peer)) + "\nadd_spacer|small|" + (pInfo(peer)->trade_items.size() == 0 ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are about to do a trade without receiving anything in return. Once you do the trade you cannot get the items back.|left|\nadd_textbox|`4Do you really want to do this?``|left|\nadd_spacer|small|" : "") + (guild_key_p ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are taking leadership of the guild: `#" + g_name + " and the guild world: " + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a guild world for its name, guild mascot and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (world_key_p ? "\nadd_spacer|small|\nadd_textbox|`4SCAM WARNING: ``You are buying this world, `#" + world_->name + "``. Don't buy a world just to get its rare items, because scammers can easily place secret doors allowing someone to jump in and `4steal the items back`` after a trade!|left|\nadd_spacer|small|\nadd_textbox|Also, all ratings will be removed from a world when it is traded. Don't buy a world for its ranking!|left|\nadd_spacer|small|\nadd_textbox|To be safe, only buy a world for its name and placed blocks, not loose items or high ratings. Consider yourself warned!|left|\nadd_spacer|small|\nadd_textbox|This world is locked by " + lock + ".|left|\nadd_spacer|small|" : (guild_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to transfer guild leadership and your guild world `#" + world_->name + "`` - the guild lock ownership will be transferred over to " + (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name) + "``.|left|\nadd_spacer|small|" : (world_key_cp ? "\nadd_spacer|small|\nadd_textbox|`4WARNING: ``You are about to sell your world `#" + world_->name + "`` - the world lock ownership will be transferred over to " + (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name) + "``.|left|\nadd_spacer|small|" : "")))) + "\nadd_button|accept|Do The Trade!|noflags|0|0|\nadd_button|back|Cancel|noflags|0|0|\nend_dialog|trade_confirm|||");
			p.CreatePacket(currentPeer);
		}
	}
}
void mod_trade(ENetPeer* p_, int item_id, int count, bool remove = false) {
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (pInfo(currentPeer)->world == pInfo(p_)->world) {
			if (pInfo(currentPeer)->netID == pInfo(p_)->trading_with and pInfo(p_)->netID == pInfo(currentPeer)->trading_with) {
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					if (pInfo(p_)->block_trade or pInfo(currentPeer)->block_trade) {
						cancel_trade(pInfo(p_)->block_trade ? p_ : currentPeer, false);
						return;
					}
					if (item_id == 5816 and pInfo(p_)->tankIDName != world_->owner_name and not pInfo(p_)->dev or item_id == 1424 and pInfo(p_)->tankIDName != world_->owner_name and not pInfo(p_)->dev) {
						packet_(p_, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("You can only trade World Keys in a world you own!");
						p.CreatePacket(p_);
						break;
					}
					if (item_id == 5816 and pInfo(p_)->guild_id == 0 or item_id == 5816 and pInfo(p_)->guild_id != pInfo(currentPeer)->guild_id) {
						packet_(p_, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("The person must join your guild first!");
						p.CreatePacket(p_);
						break;
					}
					if (remove) {
						int count_ = 0;
						for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
							auto i = pInfo(p_)->trade_items[i_].find(item_id);
							if (i != pInfo(p_)->trade_items[i_].end()) {
								map<string, int>::iterator it;
								for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {
									if (it->first == item_id)
										count_ = it->second;
								}
								pInfo(p_)->trade_items.erase(pInfo(p_)->trade_items.begin() + i_);
								break;
							}
						}
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`1TRADE CHANGE: `` " + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` removed `w" + to_string(count_) + "`` " + items[item_id].name);
						p.CreatePacket(currentPeer);
					}
					else {
						if (count == 0)break;
						bool f_ = false;
						for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
							map<string, int>::iterator it;
							for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {
								if (it->first == item_id and it->second == count) {
									swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
									f_ = true;
									break;
								}
								else if (it->first == item_id and it->second != count) {
									swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
									f_ = true;
									it->second = count;
									break;
								}
							}
						} if (not f_) {
							if (count == 0)break;
							if (pInfo(p_)->trade_items.size() > 3) return;
							map<int, int> new_;
							new_.insert({ item_id, count });
							pInfo(p_)->trade_items.push_back(new_);
						}
						else {
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("`1TRADE CHANGE: `` " + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + " removed `w" + to_string(count) + "`` " + items[item_id].name);
							p.CreatePacket(currentPeer);
						}
						if (count == 0)break;
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`1TRADE CHANGE: `` " + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + " added `w" + to_string(count) + "`` " + items[item_id].name);
						p.CreatePacket(currentPeer);
					}
					if (pInfo(p_)->trade_accept == 1) {
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(p_)->netID);
							p.Insert("");
							p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
							p.Insert("locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(p_);
						}
						gamepacket_t p;
						p.Insert("OnTradeStatus");
						p.Insert(pInfo(p_)->netID);
						p.Insert("");
						p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
						p.Insert("locked|0\naccepted|1");
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(p_)->netID);
							p.Insert("");
							p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
							p.Insert("locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(p_);
						}
					}
					gamepacket_t p;
					p.Insert("OnTradeStatus");
					p.Insert(pInfo(p_)->netID);
					p.Insert("");
					p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
					p.Insert(make_trade_offer(pInfo(p_), true) + "locked|0\naccepted|0");
					p.CreatePacket(p_);
					{
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(currentPeer)->netID);
							p.Insert("");
							p.Insert("`o" + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``'s offer.``");
							p.Insert("locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(currentPeer);
						}
						gamepacket_t p;
						p.Insert("OnTradeStatus");
						p.Insert(pInfo(currentPeer)->netID);
						p.Insert("");
						p.Insert("`o" + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``'s offer.``");
						p.Insert("locked|0\naccepted|1");
						p.CreatePacket(currentPeer);
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(currentPeer)->netID);
							p.Insert("");
							p.Insert("`o" + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``'s offer.``");
							p.Insert(make_trade_offer(pInfo(currentPeer), true) + "locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(currentPeer);
						}
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(p_)->netID);
							p.Insert("");
							p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
							p.Insert(make_trade_offer(pInfo(p_), true) + "locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(currentPeer);
						}
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(currentPeer)->netID);
							p.Insert("");
							p.Insert("`o" + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``'s offer.``");
							p.Insert(make_trade_offer(pInfo(currentPeer), true) + "locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(p_);
						}
					}
					{
						packet_(p_, "action|play_sfx\nfile|audio/tile_removed.wav\ndelayMS|0");
						packet_(currentPeer, "action|play_sfx\nfile|audio/tile_removed.wav\ndelayMS|0");
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("The deal has changed");
						p.CreatePacket(p_), p.CreatePacket(currentPeer);
					}
					pInfo(p_)->trade_accept = 0, pInfo(currentPeer)->trade_accept = 0;
				}
				return;
			}
		}
	}
	if (remove) {
		for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
			auto i = pInfo(p_)->trade_items[i_].find(item_id);
			if (i != pInfo(p_)->trade_items[i_].end()) {
				pInfo(p_)->trade_items.erase(pInfo(p_)->trade_items.begin() + i_);
				break;
			}
		}
	}
	else {
		if (count == 0)return;
		bool f_ = false;
		for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
			map<string, int>::iterator it;
			for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {
				if (it->first == item_id and it->second == count) {
					swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
					f_ = true;
					break;
				}
				else if (it->first == item_id and it->second != count) {
					swap(pInfo(p_)->trade_items[i_], pInfo(p_)->trade_items.back());
					f_ = true;
					it->second = count;
					break;
				}
			}
		} if (not f_) {
			if (count == 0)return;
			if (pInfo(p_)->trade_items.size() > 3) return;
			map<int, int> new_;
			new_.insert({ item_id, count });
			pInfo(p_)->trade_items.push_back(new_);
		}
	}
	string name_ = pInfo(p_)->world;
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		if (pInfo(p_)->trade_accept == 1) {
			{
				gamepacket_t p;
				p.Insert("OnTradeStatus");
				p.Insert(pInfo(p_)->netID);
				p.Insert("");
				p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
				p.Insert("locked|0\nreset_locks|1\naccepted|0");
				p.CreatePacket(p_);
			}
			gamepacket_t p;
			p.Insert("OnTradeStatus");
			p.Insert(pInfo(p_)->netID);
			p.Insert("");
			p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
			p.Insert("locked|0\naccepted|1");
			p.CreatePacket(p_);
			{
				gamepacket_t p;
				p.Insert("OnTradeStatus");
				p.Insert(pInfo(p_)->netID);
				p.Insert("");
				p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
				p.Insert("locked|0\nreset_locks|1\naccepted|0");
				p.CreatePacket(p_);
			}
		}
		gamepacket_t p;
		p.Insert("OnTradeStatus");
		p.Insert(pInfo(p_)->netID);
		p.Insert("");
		p.Insert("`o" + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``'s offer.``");
		p.Insert(make_trade_offer(pInfo(p_), true) + "locked|0\naccepted|0");
		p.CreatePacket(p_);
		{
			if (pInfo(p_)->trade_accept == 1) {
				packet_(p_, "action|play_sfx\nfile|audio/tile_removed.wav\ndelayMS|0");
				gamepacket_t p;
				p.Insert("OnTextOverlay");
				p.Insert("The deal has changed");
				p.CreatePacket(p_);
				pInfo(p_)->trade_accept = 0;
			}
		}
	}
}

void daily_quest_info(ENetPeer* p_) {
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + pInfo(p_)->tankIDName + "'s Goals|left|982|\nadd_spacer|small|"/*"\nadd_textbox|`9Life Goals``|left|\nadd_smalltext|`9Awesomeness: 13%``|left|\nadd_label_with_icon|small|`3Seed Goal:`` Deliver 200 Rock (0/200)``|left|3|\nadd_label_with_icon|small|`3Gem Goal:`` Smash 5000 rarity of blocks (2884/5000)``|left|112|\nadd_label_with_icon|small|`3Experience Goal:`` Defeat 10 players in Games (0/10)``|left|1488|\nadd_smalltext|Completed Life Goals will reset in 4 hours, 20 mins|left|\nadd_spacer|small|"*/"\nadd_textbox|`9Daily Quest``|left|\nadd_label_with_icon|small|" + (pInfo(p_)->dd == 0 ? "Deliver `2" + to_string(item1c) + " " + items[item1].name + "`` and `2" + to_string(item2c) + " " + items[item2].name + "`` to Crazy Jim" : "`2COMPLETE!`` Check again tomorrow.") + "|left|1486|\nadd_spacer|small|\nadd_label_with_icon|big|Life Tasks|left|8282|\nadd_spacer|small|\nadd_textbox|`9Finish and receive awesome rewards from farming, geiger finding or trees removing, checkout the prizes below.``|left|\nadd_player_info|`oSurgeon``|" + to_string(pInfo(p_)->s_lvl) + "|" + to_string(pInfo(p_)->s_xp) + "|" + to_string(10 * ((pInfo(p_)->s_lvl * pInfo(p_)->s_lvl) + 2)) + "|\nadd_spacer|small|\nadd_button|surgery_reward|View Surgery Rewards|noflags|0|0|\nadd_player_info|`oFishing``|" + to_string(pInfo(p_)->ff_lvl) + "|" + to_string(pInfo(p_)->ff_xp) + "|" + to_string(5 * ((pInfo(p_)->ff_lvl * pInfo(p_)->ff_lvl) + 2)) + "|\nadd_spacer|small|\nadd_button|fishing_reward|View Fishing Rewards|noflags|0|0|\nadd_player_info|`oBuilder``|" + to_string(pInfo(p_)->bb_lvl) + "|" + to_string(pInfo(p_)->bb_xp) + "|" + to_string(100 * ((pInfo(p_)->bb_lvl * pInfo(p_)->bb_lvl) + 2)) + "|\nadd_spacer|small|\nadd_button|builder_reward|View Builder Rewards|noflags|0|0|\nadd_spacer|small|\nadd_player_info|`oFarmer``|" + to_string(pInfo(p_)->t_lvl) + "|" + to_string(pInfo(p_)->t_xp) + "|" + to_string(100 * ((pInfo(p_)->t_lvl * pInfo(p_)->t_lvl) + 2)) + "|\nadd_spacer|small|\nadd_button|farmer_reward|View Farmer Rewards|noflags|0|0|\nadd_spacer|small|\nadd_player_info|`oProvider``|" + to_string(pInfo(p_)->p_lvl) + "|" + to_string(pInfo(p_)->p_xp) + "|" + to_string(75 * ((pInfo(p_)->p_lvl * pInfo(p_)->p_lvl) + 2)) + "|\nadd_spacer|small|\nadd_button|provider_reward|View Provider Rewards|noflags|0|0|\nadd_spacer|small|\nadd_player_info|`oGeiger Hunting``|" + to_string(pInfo(p_)->g_lvl) + "|" + to_string(pInfo(p_)->g_xp) + "|" + to_string(5 * ((pInfo(p_)->g_lvl * pInfo(p_)->g_lvl) + 2)) + "|\nadd_spacer|small|\nadd_button|geiger_reward|View Geiger Hunting Rewards|noflags|0|0|\nadd_spacer|small|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
	p.CreatePacket(p_);
}

void SendNews(ENetPeer* peer) {
	std::ifstream dialog("news.txt");
	std::stringstream buffer;
	buffer << dialog.rdbuf();
	std::string newsString(buffer.str());
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert(newsString);
	p.CreatePacket(peer);
}

string GetUptime() {

	long long int hour = 0, day = 0, cas = server_uptime, min = 0;
	if (cas > 60) hour = cas / 60;
	else hour = 0;
	if (cas > 3600) day = cas / 3600;
	else day = 0;
	min = cas - (hour * 60) - (day * 3600);
	return "Day: " + to_string(day) + ",  Hours: " + to_string(hour) + ", Minutes: " + to_string(min);
}
void autofarm_dialog(ENetPeer* p_) {
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|`0" + server_name + " Autofarm|left|7064|\n"
		"add_spacer|small|\n"
		"add_item_picker|auto_farming_item|`wChoose Autofarm Block``|Choose an item you want to auto farm!|\n"
		"add_spacer|small|\n"
		"add_checkbox|autofarmsss|`2Activate`0/`4Deactivate|" + (string(pInfo(p_)->autofarm ? "1" : "0")) + "\n"
		"add_spacer|small|\n"
		"add_label_with_icon|small|`3" + items[9770].name + " `04x Break/Place + 1Hit + More Xp/Gems|left|9770|\n"
		"add_label_with_icon|small|`3" + items[10362].name + " `04x Break/Place + 1Hit + More Xp|left|10362|\n"
		"add_label_with_icon|small|`3" + items[9846].name + " `04x Break/Place + 1Hit|left|9846|\n"
		"add_label_with_icon|small|`3" + items[9772].name + " `03x Break/Place + 1Hit|left|9772|\n"
		"add_label_with_icon|small|`3" + items[5480].name + " `03x Break/Place|left|5480|\n"
		"add_spacer|small|\n"
		"add_label_with_icon|small|`4NOTE: `0Only Work With Autofarm!|left|1432|\n"
		"add_spacer|small|\n"
		"add_button|autofarm|`9Save Settings!|noflags|0|0|\n"
		"add_spacer|small|\n"
		"add_quick_exit|\nend_dialog|autofarm_dialog|||");
	p.CreatePacket(p_);
}
void backpack_show(ENetPeer* peer) {
	string item_log = "\nadd_spacer|small|\ntext_scaling_string|aaaaaaaaaaaaaaa|";
	for (int i_ = 0; i_ < pInfo(peer)->bp.size(); i_++) item_log += "\nadd_button_with_icon|" + to_string(i_) + "|" + items[pInfo(peer)->bp[i_].first].name + "|frame|" + to_string(pInfo(peer)->bp[i_].first) + "|" + to_string(pInfo(peer)->bp[i_].second) + "|";
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wYour Backpack``|left|9412|\nadd_textbox|Use to store items inside it,instead of your inventory|\nadd_smalltext|Backpack Size: `w" + to_string(pInfo(peer)->bp.size()) + "/" + to_string(pInfo(peer)->b_l * 10) + "|" + (pInfo(peer)->bp.size() >= pInfo(peer)->b_l * 10 ? "\nadd_smalltext|`4Your backpack is full, you cant add item in backpack|" : "\nadd_item_picker|itemid|`wDeposit Item``|Choose an item to store|") + "" + (pInfo(peer)->bp.size() >= 1 ? item_log + "\nadd_button_with_icon||END_LIST|noflags|0||" : "") + "\nadd_spacer|small|" + (pInfo(peer)->b_l * 10 < 200 ? "\nadd_smalltext|Upgrading backpack to " + to_string(pInfo(peer)->b_l * 10 + 10) + " slots will cost you `$" + setGems((1000 * ((pInfo(peer)->b_l * pInfo(peer)->b_l) + 25)) * 2) + " ė |\nadd_small_font_button|backpack_upgrade|`4Upgrade Backpack "/*(" + setGems((1000 * ((pInfo(peer)->b_l * pInfo(peer)->b_l) + 25)) * 2) + ")*/ + " ĭ``|noflags|0|0|" : "") + "\nadd_button|back|`wBack|\nend_dialog|backpack_menu|||\nadd_quick_exit|");
	p.CreatePacket(peer);
}
void tokenquests_dialog(ENetPeer* p_) {
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wToken Quests|left|1486|\n"
		"add_spacer|mid|\n"
		"add_label_with_icon|small|`oHarvest Xp `0" + (pInfo(p_)->harvest_quest >= 500 ? "`o(`w500`o/`w500`o)" : "`o(`w" + to_string(pInfo(p_)->harvest_quest) + "`o/`w500`o)") + "|left|898|\n"
		"add_smalltext|Do you know harvest system how is work? You don't need tractor or sorrow. Because you have a hands!..|left|\n"
		"add_smalltext|Example: When you punch on a ready tree. It gonna drop some items on it. Because its ready!!..|left|\n"
		"add_smalltext|When you punch one tree you get 1 point of harvest point. If harvest point is 500. You can collect your 5 Growtoken.|left|\n"
		"" + (pInfo(p_)->harvest_quest >= 500 ? "add_button|clc_5|`oCollect 5 GrowToken|noflags|0|0|\n" : "add_progress_bar||small|`oHarvest|" + to_string(pInfo(p_)->harvest_quest) + "|500|`o(`w" + to_string(pInfo(p_)->harvest_quest) + "`o/`w500`o)|\n") + ""
		"add_spacer|mid|\n"

		"add_label_with_icon|small|`oFishing Xp `0" + (pInfo(p_)->fishing_quest >= 30 ? "`o(`w30`o/`w30`o)" : "`o(`w" + to_string(pInfo(p_)->fishing_quest) + "`o/`w30`o)") + "|left|2912|\n"
		"add_smalltext|Do you know fishing system how is work? You need a fishing rod for it.|left|\n"
		"add_smalltext|Example: Just take a one water and put on empty place. Then take your bait and fishing rod. Just click the bait on water. BOOMM!.. You got it.|left|\n"
		"" + (pInfo(p_)->fishing_quest >= 30 ? "add_button|clc_5|`oCollect 5 GrowToken|noflags|0|0|\n" : "add_progress_bar||small|`oFishing|" + to_string(pInfo(p_)->fishing_quest) + "|30|`o(`w" + to_string(pInfo(p_)->fishing_quest) + "`o/`w30`o)|\n") + ""
		"add_spacer|mid|\n"
		"add_button|12345|Back|noflags|0|0|\n"
		"end_dialog|3898|Hang Up||\n"
		"add_quick_exit|\n");
	p.CreatePacket(p_);
}
void load_vendhub(ENetPeer* peer, World* world_, WorldBlock* block_, string filter = "") {
	string found = "\nadd_label_with_icon_button_list|small|This DigiVend is out of order!|left||mapIndex_vendPrice_wl_count|";
	for (int i_ = (block_->spin == false ? pInfo(peer)->lastwrenchy * 100 - pInfo(peer)->lastwrenchx : 0); i_ < (block_->spin == false ? pInfo(peer)->lastwrenchy * 100 - pInfo(peer)->lastwrenchx + 100 : world_->blocks.size()); i_ += (block_->spin == false ? 1 : 100)) {
		if (i_ > world_->blocks.size()) break;
		else {
			if (world_->blocks[pInfo(peer)->lastwrenchx + i_].fg == 9268) {
				if (not filter.empty() && to_lower(items[world_->blocks[pInfo(peer)->lastwrenchx + i_].id].ori_name).find(to_lower(filter)) != string::npos or filter.empty()) found += to_string(pInfo(peer)->lastwrenchx + i_) + "," + to_string(world_->blocks[pInfo(peer)->lastwrenchx + i_].pr) + ",0," + to_string(world_->blocks[pInfo(peer)->lastwrenchx + i_].c_) + ",";
			}
		}
	}
	if (found == "\nadd_label_with_icon_button_list|small|This DigiVend is out of order!|left||mapIndex_vendPrice_wl_count|") found = "\nadd_textbox|No DigiVends available.|left";
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wVending Hub - Checkout Counter``|left|9270|\nadd_spacer|small|\nadd_textbox|You can access the contents of any DigiVends connected to this hub by pressing the icon(s) on the left below!|left\nadd_textbox|Currently scanning DigiVends " + a + (block_->spin == false ? "horizontally" : "vertically") + ".|left\nadd_button|switchdirection|Scan " + (block_->spin == false ? "Vertically" : "Horizontally") + "|noflags|0|0|\nadd_spacer|small|\nadd_text_input|filtertext|Search||10|\nadd_button|filterbytext|Filter|noflags|0|0|" + found + "\nadd_spacer|small|\nend_dialog|checkoutcounter|Close||");
	p.CreatePacket(peer);
}
/*void mines(ENetPeer* peer) {
	pInfo(peer)->game_started2 = false;

	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + server_name + " Mines|left|6994|\n"
		"add_spacer|small|\n"
		"add_text_input|gems|Gems Amount:|10000|15|\n"
		"add_smalltext|Example: 10,000-500,000|left|\n"
		"add_text_input|minesamount|Mines Amount:|3|2|\n"
		"add_smalltext|Example: 1-24|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`8Remember``: This system coded fair by Xoid!|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`4Warning!`` You will lose all your progress/gems if you disconnect or leave!|left|\n"
		"add_spacer|small|\n"
		"add_button|accelts|Bet!|noflags|0|0|\n"
		"end_dialog|mines|Close||");
	p.CreatePacket(peer);
}
void slot(ENetPeer* peer) {
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + server_name + " Slot|left|528|\n"
		"add_spacer|small|\n"
		"add_text_input|gems|Gems Amount:|10000|15|\n"
		"add_smalltext|Example: 10,000-500,000|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`8Remember``: This system coded fair by Xoid!|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`4Warning!`` You will lose all your progress/gems if you disconnect or leave!|left|\n"
		"add_spacer|small|\n"
		"add_button|accelts|BET!|noflags|0|0|\n"
		"end_dialog|slot|Close||");
	p.CreatePacket(peer);
}
void bonanza(ENetPeer* peer) {
	pInfo(peer)->spin_amount = 0, pInfo(peer)->total_profit = 0, pInfo(peer)->game_started = false;

	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + server_name + " Bonanza|left|528|\n"
		"add_spacer|small|\n"
		"add_text_input|spinamount|Spin Amount:|10|2|\n"
		"add_smalltext|Example: 1-10|left|\n"
		"add_smalltext|1 spin = 7.5k Gems ė|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`8Remember``: This system coded fair by Xoid!|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`4Warning!`` You will lose all your progress/gems if you disconnect or leave!|left|\n"
		"add_spacer|small|\n"
		"add_button|accelts|BET!|noflags|0|0|\n"
		"end_dialog|bonanza|Close||");
	p.CreatePacket(peer);
}
void coinflip(ENetPeer* peer) {
	pInfo(peer)->game_started1 = false;
	pInfo(peer)->coin_hit = 0;
	pInfo(peer)->multiplayer = 0.0;
	pInfo(peer)->multiplayer_string = "0.00";
	pInfo(peer)->gems_coinflip = 0;

	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + server_name + " Coin Flip|left|752|\n"
		"add_spacer|small|\n"
		"add_text_input|gems|Gems Amount:|10000|15|\n"
		"add_smalltext|Example: 10,000-500,000|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`8Remember``: This system coded fair by Xoid!|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`4Warning!`` You will lose all your progress/gems if you disconnect or leave!|left|\n"
		"add_spacer|small|\n"
		"add_button_with_icon|heads|   Bet Heads   |left|752||\n"
		"add_button_with_icon|tails|   Bet Tails   |left|13658||\n"
		"add_button_with_icon||END_LIST|noflags|0|0||\n"
		"end_dialog|coinflip|Close||");
	p.CreatePacket(peer);
}
void roulette(ENetPeer* peer) {
	pInfo(peer)->gems_roulette = 0;

	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + server_name + " Roulette|left|758|\n"
		"add_spacer|small|\n"
		"add_textbox|" + pInfo(peer)->last_game_roulette + "|left|\n"
		"add_spacer|small|\n"
		"add_text_input|gems|Gems Amount:|10000|15|\n"
		"add_smalltext|Example: 10,000-500,000|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`8Remember``: This system coded fair by Xoid!|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`4Warning!`` You will lose all your progress/gems if you disconnect or leave!|left|\n"
		"add_spacer|small|\n"
		"add_button_with_icon|red_bet|     Bet Red     |left|170||\n"
		"add_button_with_icon|green_bet|   Bet Green   |left|176||\n"
		"add_button_with_icon|black_bet|   Bet Black   |left|166||\n"
		"add_button_with_icon||END_LIST|noflags|0|0||\n"
		"end_dialog|roulette|Close||");
	p.CreatePacket(peer);
}
void unboxing(ENetPeer* peer) {
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + server_name + " Unboxing|left|13054|\n"
		"add_spacer|small|\n"
		"add_textbox|" + pInfo(peer)->last_game_unboxing + "|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`oThere are lots possibilities in this game. You can be Millionaire or Noob. Choose a chest and start.|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`8Remember``: This system coded fair by Xoid!|left|\n"
		"add_spacer|medium|\n"
		"add_custom_button|luxury_chest|image:interface/large/luxury.rttex;image_size:500,500;width:0.19;||\n"
		"add_custom_button|rayman_chest|image:interface/large/rayman.rttex;image_size:500,500;width:0.19;||\n"
		"set_custom_spacing|x:5;y:10\n"
		"add_custom_button|lucky_chest|image:interface/large/lucky.rttex;image_size:500,500;width:0.19;||\n"
		"add_custom_button|baller_chest|image:interface/large/baller.rttex;image_size:500,500;width:0.19;||\n"
		"add_button_with_icon||END_LIST|noflags|0|0||\n"
		"add_spacer|small|\n"
		"end_dialog|unboxing|Close||");
	p.CreatePacket(peer);
}
void blackjack(ENetPeer* peer) {
	pInfo(peer)->bj_gems = 0;
	pInfo(peer)->kurpiyer_emoji = 0;
	pInfo(peer)->kurpiyer = "";
	pInfo(peer)->bj_test = false;
	gamepacket_t p;
	p.Insert("OnDialogRequest");
	p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + server_name + " Blackjck|left|742|\n"
		"add_spacer|small|\n"
		"add_text_input|gems|Gems Amount:|10000|15|\n"
		"add_smalltext|Example: 10,000-500,000|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`8Remember``: This system coded fair by Xoid!|left|\n"
		"add_spacer|small|\n"
		"add_textbox|`4Warning!`` You will lose all your progress/gems if you disconnect or leave!|left|\n"
		"add_spacer|small|\n"
		"add_button_with_icon|bjj_xoid|   Sit Table   |left|10106||\n"
		"add_button_with_icon|bjj_vocimera|   Sit Table   |left|10108||\n"
		"add_button_with_icon|bjj_efetc|   Sit Table   |left|10110||\n"
		"add_button_with_icon||END_LIST|noflags|0|0||\n"
		"add_button_with_icon|bjj_nevoid|   Sit Table   |left|10112||\n"
		"add_button_with_icon|bjj_baybars|   Sit Table   |left|10116||\n"
		"add_button_with_icon|bjj_lian|   Sit Table   |left|12542||\n"
		"add_button_with_icon||END_LIST|noflags|0|0||\n"
		"end_dialog|blackjack|Close||");
	p.CreatePacket(peer);
}*/
void claim_website(ENetPeer* peer) {
	string dosyaAdi11 = "website/website.txt";
	ifstream dosya(dosyaAdi11);
	if (!dosya.is_open()) return;

	string satir11;
	string aranan = pInfo(peer)->tankIDName + "|";
	string role;

	bool bulundu = false;

	while (getline(dosya, satir11)) {
		if (satir11.compare(0, aranan.length(), aranan) == 0) {
			bulundu = true;
			role = satir11.substr(aranan.length());
			break;
		}
	}
	dosya.close();

	if (bulundu == false) {
		gamepacket_t p1;
		p1.Insert("OnConsoleMessage"), p1.Insert("`4Dont try trick`0(`oyour name isnt on waiting list`0)!"), p1.CreatePacket(peer);

		gamepacket_t p2;
		p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("`4Dont try trick`0(`oyour name isnt on waiting list`0)!"), p2.Insert(0), p2.Insert(1), p2.CreatePacket(peer);
		return;
	}

	if (role == "vip") pInfo(peer)->adminLevel = -1;
	else if (role == "mod") pInfo(peer)->adminLevel = 1;
	else if (role == "admin") pInfo(peer)->adminLevel = 2;
	else if (role == "dev") pInfo(peer)->adminLevel = 3;
	else if (role == "manager") pInfo(peer)->adminLevel = 4;
	else if (role == "creator") pInfo(peer)->adminLevel = 5;
	else if (role == "founder") pInfo(peer)->adminLevel = 6;
	else if (role == "proxy") pInfo(peer)->proxy = true;
	else if (role == "legend") pInfo(peer)->lgnd = true;
	else if (role == "doctor") pInfo(peer)->drtitle = true;
	else if (role == "g4g") pInfo(peer)->gp = true;
	else if (role == "mentor") pInfo(peer)->mp = true;

	else if (role == "7188") {
		int amount = 1;
		if (modify_inventory(peer, 7188, amount) == 0) {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`2>> You collected `0" + items[7188].name);
			p.CreatePacket(peer);
		}
		else {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`4You dont have enough enventory.");
			p.CreatePacket(peer);
			return;
		}
	}

	packet_(peer, "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0");
	save_player(pInfo(peer), false);
	enet_peer_disconnect_later(peer, 0);

	string dosyaAdi = "website/website.txt";
	string silinecekSatir = pInfo(peer)->tankIDName + "|" + role;

	ifstream oku(dosyaAdi);
	ofstream yaz("website/geciciDosya.txt");

	if (!oku || !yaz) return;

	string satir;
	bool removed = false;

	while (getline(oku, satir)) {
		if (!removed && satir == silinecekSatir) {
			removed = true;
			continue;
		}
		yaz << satir << endl;
	}

	oku.close();
	yaz.close();

	remove(dosyaAdi.c_str());
	rename("website/geciciDosya.txt", "website/website.txt");

	ofstream trlog("logs/website.txt", ios::app);
	auto now = time(nullptr);
	trlog << "" << getDate() << "[WEBSITE] " << pInfo(peer)->tankIDName << " bought " << role << " from website" << "\n";
	trlog.close();

	return;
}
void SendCmd(ENetPeer* peer, string cmd, bool c_ = false) {
	string name_ = pInfo(peer)->world;
	vector<World>::iterator paa = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (paa != worlds.end()) {
		World* world_ = &worlds[paa - worlds.begin()];
		if (pInfo(peer)->tankIDName == "") return;
		string actual_command = cmd;
		transform(actual_command.begin(), actual_command.end(), actual_command.begin(), ::tolower);
		if (actual_command.find("player_chat=") != string::npos) return;
		ServerLog(pInfo(peer)->tankIDName + " CMD: " + actual_command + " (" + pInfo(peer)->world + ")");
		if (actual_command.substr(0, 5) == "/msg " || actual_command.substr(0, 3) == "/r " || actual_command == "/msg" || actual_command == "/r") packet_(peer, "action|log\nmsg|CT:[MSG]_ `6" + cmd + "``", "");
		else if (actual_command.substr(0, 4) == "/sb " || actual_command == "/sb") packet_(peer, "action|log\nmsg|CT:[SB]_ `6" + cmd + "``", "");
		else if (not c_) packet_(peer, "action|log\nmsg| `6" + cmd + "``", "");
		if (actual_command == "/help" || actual_command == "/?") {
			string c = "";
			if (pInfo(peer)->proxy == true) c += ", /proxy";
			if (pInfo(peer)->supp >= 2) c += ", /hidestatus";
			if (pInfo(peer)->adminLevel >= 1) c += ", /punish <user>, /uncurse <user>, /unmute <user>, /nuke, /unnuke, /invis, /ghost, /nick, /summon, /warp";
			if (pInfo(peer)->adminLevel >= 2) c += ", /hide, /setweather <id>";
			if (pInfo(peer)->adminLevel >= 3) c += ", /unban <user>";
			if (pInfo(peer)->adminLevel >= 4) c += ", /find <item>, /give <id> <count>";
			if (pInfo(peer)->adminLevel >= 5) c += "";
			if (pInfo(peer)->adminLevel >= 6) c += ", /gsm, /hardban <user>";
			if (CheckConfigS(glist, pInfo(peer)->tankIDName)) c += ", /drop <id> <amount>";
			if (CheckConfigS(clist, pInfo(peer)->tankIDName)) c += ", /gemevent <amount>, /demote <user>, /giverank <user> <role>, /givd <amount>, /setvend <amount>";
			if (CheckConfigS(server_owner, pInfo(peer)->tankIDName)) c += ", /stop, /take, /online";
			packet_(peer, a + "action|log\nmsg|>> Commands: /claim (website purchases), /buy, /shop, /pazar, /changebgl, /fix, /rules, /color (needs 20+ level), /fc, /warpto, /clear, /radio /unaccess, /sethome, /home ,/gethome ,/msg, /ignore, /mods, /vips, /go, /rgo, /pull, /kick, /ban, /trade, /sb, /sdb, /me, /who, /r, /kickall, /uba" + c);
		}
		else if (actual_command == "/hidestatus" && pInfo(peer)->supp >= 2) {
			if (pInfo(peer)->hs == 0) pInfo(peer)->hs = 1;
			else pInfo(peer)->hs = 0;
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Super Supporter status " + a + (pInfo(peer)->hs == 1 ? "visible" : "hidden") + "!");
			p.CreatePacket(peer);
			update_clothes(peer);
		}
		/*else if (actual_command == "/claim") {
			claim_website(peer);
		}
		else if (actual_command == "/pazar") {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`0" + server_name + " Pazar|left|9268|\n"
				"add_spacer|mid|\n"
				"add_textbox|`oYou can find pazar items in here to purchase lets select one of these item, think carefully!|left|\n"
				"add_spacer|small|\n"
				"text_scaling_string|    200 BGL    |\n"

				"add_label_with_icon|small|`0Level 1 Ances|left|2836|\n"
				"add_button_with_icon|pzr_5078|" + (pInfo(peer)->adminLevel >= 6 ? "11 BGL" : "13 BGL") + "|left|5078||\n"
				"add_button_with_icon|pzr_5080|" + (pInfo(peer)->adminLevel >= 6 ? "11 BGL" : "13 BGL") + "|left|5080||\n"
				"add_button_with_icon|pzr_5082|" + (pInfo(peer)->adminLevel >= 6 ? "11 BGL" : "13 BGL") + "|left|5082||\n"
				"add_button_with_icon|pzr_5084|" + (pInfo(peer)->adminLevel >= 6 ? "11 BGL" : "13 BGL") + "|left|5084||\n"
				"add_button_with_icon|pzr_7166|" + (pInfo(peer)->adminLevel >= 6 ? "11 BGL" : "13 BGL") + "|left|7166||\n"
				"add_button_with_icon||END_LIST|noflags|0||\n"

				"text_scaling_string|    200 BGL    |\n"
				"add_label_with_icon|small|`0Level 2 Ances|left|2838|\n"
				"add_button_with_icon|pzr_5126|" + (pInfo(peer)->adminLevel >= 6 ? "18 BGL" : "20 BGL") + "|left|5126||\n"
				"add_button_with_icon|pzr_5144|" + (pInfo(peer)->adminLevel >= 6 ? "18 BGL" : "20 BGL") + "|left|5144||\n"
				"add_button_with_icon|pzr_5162|" + (pInfo(peer)->adminLevel >= 6 ? "18 BGL" : "20 BGL") + "|left|5162||\n"
				"add_button_with_icon|pzr_5180|" + (pInfo(peer)->adminLevel >= 6 ? "18 BGL" : "20 BGL") + "|left|5180||\n"
				"add_button_with_icon|pzr_7168|" + (pInfo(peer)->adminLevel >= 6 ? "18 BGL" : "20 BGL") + "|left|7168||\n"
				"add_button_with_icon||END_LIST|noflags|0||\n"

				"text_scaling_string|    200 BGL    |\n"
				"add_label_with_icon|small|`0Level 3 Ances|left|2840|\n"
				"add_button_with_icon|pzr_5128|" + (pInfo(peer)->adminLevel >= 6 ? "26 BGL" : "28 BGL") + "|left|5128||\n"
				"add_button_with_icon|pzr_5146|" + (pInfo(peer)->adminLevel >= 6 ? "26 BGL" : "28 BGL") + "|left|5146||\n"
				"add_button_with_icon|pzr_5164|" + (pInfo(peer)->adminLevel >= 6 ? "26 BGL" : "28 BGL") + "|left|5164||\n"
				"add_button_with_icon|pzr_5182|" + (pInfo(peer)->adminLevel >= 6 ? "26 BGL" : "28 BGL") + "|left|5182||\n"
				"add_button_with_icon|pzr_7170|" + (pInfo(peer)->adminLevel >= 6 ? "26 BGL" : "28 BGL") + "|left|7170||\n"
				"add_button_with_icon||END_LIST|noflags|0||\n"

				"text_scaling_string|    200 BGL    |\n"
				"add_label_with_icon|small|`0Level 4 Ances|left|2842|\n"
				"add_button_with_icon|pzr_5130|" + (pInfo(peer)->adminLevel >= 6 ? "35 BGL" : "37 BGL") + "|left|5130||\n"
				"add_button_with_icon|pzr_5148|" + (pInfo(peer)->adminLevel >= 6 ? "35 BGL" : "37 BGL") + "|left|5148||\n"
				"add_button_with_icon|pzr_5166|" + (pInfo(peer)->adminLevel >= 6 ? "35 BGL" : "37 BGL") + "|left|5166||\n"
				"add_button_with_icon|pzr_5184|" + (pInfo(peer)->adminLevel >= 6 ? "35 BGL" : "37 BGL") + "|left|5184||\n"
				"add_button_with_icon|pzr_7172|" + (pInfo(peer)->adminLevel >= 6 ? "35 BGL" : "37 BGL") + "|left|7172||\n"
				"add_button_with_icon||END_LIST|noflags|0||\n"

				"text_scaling_string|    200 BGL    |\n"
				"add_label_with_icon|small|`0Level 5 Ances|left|2844|\n"
				"add_button_with_icon|pzr_5132|" + (pInfo(peer)->adminLevel >= 6 ? "45 BGL" : "48 BGL") + "|left|5132||\n"
				"add_button_with_icon|pzr_5150|" + (pInfo(peer)->adminLevel >= 6 ? "45 BGL" : "48 BGL") + "|left|5150||\n"
				"add_button_with_icon|pzr_5168|" + (pInfo(peer)->adminLevel >= 6 ? "45 BGL" : "48 BGL") + "|left|5168||\n"
				"add_button_with_icon|pzr_5186|" + (pInfo(peer)->adminLevel >= 6 ? "45 BGL" : "48 BGL") + "|left|5186||\n"
				"add_button_with_icon|pzr_7174|" + (pInfo(peer)->adminLevel >= 6 ? "45 BGL" : "48 BGL") + "|left|7174||\n"
				"add_button_with_icon||END_LIST|noflags|0||\n"

				"text_scaling_string|    200 BGL    |\n"
				"add_label_with_icon|small|`0Level 6 Ances|left|2846|\n"
				"add_button_with_icon|pzr_5134|" + (pInfo(peer)->adminLevel >= 6 ? "62 BGL" : "65 BGL") + "|left|5134||\n"
				"add_button_with_icon|pzr_5152|" + (pInfo(peer)->adminLevel >= 6 ? "62 BGL" : "65 BGL") + "|left|5152||\n"
				"add_button_with_icon|pzr_5170|" + (pInfo(peer)->adminLevel >= 6 ? "62 BGL" : "65 BGL") + "|left|5170||\n"
				"add_button_with_icon|pzr_5188|" + (pInfo(peer)->adminLevel >= 6 ? "62 BGL" : "65 BGL") + "|left|5188||\n"
				"add_button_with_icon|pzr_9212|" + (pInfo(peer)->adminLevel >= 6 ? "62 BGL" : "65 BGL") + "|left|9212||\n"
				"add_button_with_icon||END_LIST|noflags|0||\n"

				"add_quick_exit|\n");
			p.CreatePacket(peer);
		}*/
		else if (actual_command == "/shop") {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`4Growtopia`wSG`` Store|left|3394|\nadd_spacer|small|\nadd_spacer|small|\nadd_label_with_icon|big|`2Growtoken Items|left|1486|\nadd_smalltext|You can purchase Growtoken Items here. They're special for the events, not for sale at all!|left|\nadd_button|shop_dgrowtoken|`0View|noflags|0|0|\nadd_label_with_icon|big|`4Gems|left|9438|\nadd_smalltext|You can purchase with gems some items too..|left|\nadd_button|shop_dgems|`wView|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|big|`1Balanced Items|left|1796|\nadd_smalltext|You can purchase a economy's item. They're special need for farm!|left|\nadd_button|shop_dfarm|`0View|noflags|0|0|\nend_dialog|shop_dtest|Close||\nadd_quick_exit|");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/nuke" && pInfo(peer)->adminLevel >= 1) {
			if (not world_->nuked) {
				struct tm newtime;
				time_t now = time(0);
				localtime_s(&newtime, &now);
				world_->nuked = true;
				world_->n_t = "" + to_string(newtime.tm_mon + 1) + "/" + to_string(newtime.tm_mday) + "/2022 " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min)) + ":" + to_string(newtime.tm_sec) + "";
				world_->n_b = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";

				gamepacket_t p;
				p.Insert("OnConsoleMessage"), p.Insert("`o>> `4" + world_->name + " `4was nuked from orbit by " + pInfo(peer)->tankIDName + "`o. It's the only way to be sure. Play nice, everybody!");
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(peer)->world and not pInfo(currentPeer)->mod and not pInfo(currentPeer)->dev) exit_(currentPeer);
					packet_(currentPeer, "action|play_sfx\nfile|audio/bigboom.wav\ndelayMS|0");
					p.CreatePacket(currentPeer);
				}
			}
		}
		else if (actual_command == "/unnuke" && pInfo(peer)->adminLevel >= 1) {
			world_->nuked = false, world_->n_t = "", world_->n_b = "";
			gamepacket_t p;
			p.Insert("OnConsoleMessage"), p.Insert("This world is once again available to everyone!"), p.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 4) == "/buy") {
			gamepacket_t k;
			k.Insert("OnDialogRequest"), k.Insert("\nadd_label_with_icon|big|`wBuy Item`|left|6016|\nadd_spacer|small|\nadd_textbox|`$You can search and buy items and blocks in here with locks!|\nadd_spacer|small|\nadd_text_input|itemname|`$Item Name:||20|\nadd_spacer|small|\nend_dialog|buy|Cancel|Search|"), k.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 10) == "/gemevent " && CheckConfigS(clist, pInfo(peer)->tankIDName)) {
			vector<string> a_ = explode(" ", cmd);
			int amount = atoi(a_[1].c_str());
			if (amount == 0 || amount == 1) {
				gem_event = 1;
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`9Successfully `4Closed ``Gem Event.");
				p.CreatePacket(peer);
			}
			else {
				if (amount <= 5 && amount > 1) {
					gem_event = amount;
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`2Successfully Opened	`5 " + to_string(amount) + " `2Gem Event.");
					p.CreatePacket(peer);
				}
				else {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`4You cant open more than `55x gem event`4.");
					p.CreatePacket(peer);
				}
			}
		}
		else if (actual_command == "/proxy" || actual_command == "/relog" || actual_command.substr(0, 4) == "/wd " || actual_command.substr(0, 4) == "/dd " || actual_command.substr(0, 4) == "/bd " || actual_command.substr(0, 6) == "/flag " || actual_command == "/daw") {
			if (pInfo(peer)->proxy == true) {
				if (actual_command == "/proxy") {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`0\nadd_label_with_icon|big|`9Welcome to Proxy `6(v1.1)|left|6102|\nadd_smalltext|Hello " + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) + ", This proxy was made by `8Xoid Team``|\nadd_spacer|small|\nadd_textbox|`$Drop Commands:|\nadd_smalltext|`^/wd <amount>``- `@Drop World Locks|\nadd_smalltext|`^/dd <amount>``- `@Drop Diamond Locks|\nadd_smalltext|`^/bd <amount>``- `@Drop Blue Gem Locks|\nadd_smalltext|`^/daw ``- `@Drop All Locks|\nadd_spacer|small|\nadd_textbox|`$Fast Systems:|\nadd_smalltext|`^/relog ``- `@Leave and Join Current World|\nadd_smalltext|`^/flag ``- `@Change Flag|\nadd_spacer|small|\nadd_textbox|`$Host Commands:|\nadd_smalltext|`^/pos1 ``- `@Set Position 1|\nadd_smalltext|`^/pos2 ``- `@Set Position 2|\nadd_smalltext|`^/tppos ``- `@Set Tp Back Position|\nadd_smalltext|`^/tp ``- `@Tp to Saved Positions|\nadd_smalltext|`^/win1 <amount> ``- `@Drop amount to Position 1 (only works with DL)|\nadd_smalltext|`^/win2 <amount> ``- `@Drop amount to Position 2 (only works with DL)|\nadd_spacer|small|\nend_dialog|gazette|Cancel||\nadd_quick_exit|\n");
					p.CreatePacket(peer);
				}
				if (actual_command == "/relog") {
					string name = pInfo(peer)->world;
					gamepacket_t p;
					bool passed = true;
					p.Insert("OnConsoleMessage");
					if (pInfo(peer)->warp_time + 60000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) pInfo(peer)->warp_time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					else {
						p.Insert("`4Cooldown active`` - You can use  `5/relog`` in `5few min");
						passed = false;
					}
					if (passed) {
						exit_(peer, true);
						join_world(peer, name);
					}
					else p.CreatePacket(peer);
				}
				if (actual_command.substr(0, 4) == "/wd ") {
					vector<string> a_ = explode(" ", cmd);
					if (a_.size() != 2) return;
					if (not isdigit(a_[1][0])) return;
					int Xoid11 = atoi(a_[1].c_str());
					int c_ = Xoid11 * -1;
					if (modify_inventory(peer, 242, c_) == 0) {
						WorldDrop drop_block_{};
						drop_block_.x = (pInfo(peer)->state == 16 ? pInfo(peer)->x - ((rand() % 12) + 18) : pInfo(peer)->x + ((rand() % 12) + 22)), drop_block_.y = pInfo(peer)->y + rand() % 16, drop_block_.id = 242, drop_block_.count = Xoid11, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
					else {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("You don't have that many World Locks.");
						p.CreatePacket(peer);
						return;
					}
				}
				if (actual_command.substr(0, 4) == "/dd ") {
					vector<string> a_ = explode(" ", cmd);
					if (a_.size() != 2) return;
					if (not isdigit(a_[1][0])) return;
					int Xoid11 = atoi(a_[1].c_str());
					int c_ = Xoid11 * -1;
					if (modify_inventory(peer, 1796, c_) == 0) {
						WorldDrop drop_block_{};
						drop_block_.x = (pInfo(peer)->state == 16 ? pInfo(peer)->x - ((rand() % 12) + 18) : pInfo(peer)->x + ((rand() % 12) + 22)), drop_block_.y = pInfo(peer)->y + rand() % 16, drop_block_.id = 1796, drop_block_.count = Xoid11, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
					else {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("You don't have that many Diamond Locks.");
						p.CreatePacket(peer);
						return;
					}
				}
				if (actual_command.substr(0, 4) == "/bd ") {
					vector<string> a_ = explode(" ", cmd);
					if (a_.size() != 2) return;
					if (not isdigit(a_[1][0])) return;
					int Xoid11 = atoi(a_[1].c_str());
					int c_ = Xoid11 * -1;
					if (modify_inventory(peer, 7188, c_) == 0) {
						WorldDrop drop_block_{};
						drop_block_.x = (pInfo(peer)->state == 16 ? pInfo(peer)->x - ((rand() % 12) + 18) : pInfo(peer)->x + ((rand() % 12) + 22)), drop_block_.y = pInfo(peer)->y + rand() % 16, drop_block_.id = 7188, drop_block_.count = Xoid11, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
					else {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("You don't have that many Blue Gem Locks.");
						p.CreatePacket(peer);
						return;
					}
				}
				if (actual_command == "/daw") {
					int c_ = 0;
					int c2_ = 0;
					int c3_ = 0;
					int c4_ = 0;
					modify_inventory(peer, 242, c_);
					modify_inventory(peer, 1796, c2_);
					modify_inventory(peer, 7188, c3_);
					int removec_ = c_ * -1;
					if (modify_inventory(peer, 242, removec_) == 0) {
						WorldDrop drop_block_{};
						drop_block_.x = (pInfo(peer)->state == 16 ? pInfo(peer)->x - ((rand() % 12) + 18) : pInfo(peer)->x + ((rand() % 12) + 22)), drop_block_.y = pInfo(peer)->y + rand() % 16, drop_block_.id = 242, drop_block_.count = c_, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
					int removec2_ = c2_ * -1;
					if (modify_inventory(peer, 1796, removec2_) == 0) {
						WorldDrop drop_block_{};
						drop_block_.x = (pInfo(peer)->state == 16 ? pInfo(peer)->x - ((rand() % 12) + 18) : pInfo(peer)->x + ((rand() % 12) + 22)), drop_block_.y = pInfo(peer)->y + rand() % 16, drop_block_.id = 1796, drop_block_.count = c2_, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
					int removec3_ = c3_ * -1;
					if (modify_inventory(peer, 7188, removec3_) == 0) {
						WorldDrop drop_block_{};
						drop_block_.x = (pInfo(peer)->state == 16 ? pInfo(peer)->x - ((rand() % 12) + 18) : pInfo(peer)->x + ((rand() % 12) + 22)), drop_block_.y = pInfo(peer)->y + rand() % 16, drop_block_.id = 7188, drop_block_.count = c3_, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
				}
				if (actual_command.substr(0, 6) == "/flag ") {
					vector<string> a_ = explode(" ", cmd);
					string i_ = a_[1].c_str();
					if (i_.size() != 2) {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`4Country should be 2 letter!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						return;
					}
					if (i_ == "rt" || i_ == "ha" || i_ == "ma") {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`4You cant choose this country!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						return;
					}
					gamepacket_t p2;
					p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("`2Changed Country!"), p2.Insert(0), p2.Insert(1), p2.CreatePacket(peer);
					pInfo(peer)->country = i_;
					update_clothes(peer);
					enet_peer_disconnect_later(peer, 0);
					return;
				}
			}
			else {
				gamepacket_t p;
				p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`4You need proxy role!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
			}
		}
		else if (actual_command == "/pos1" || actual_command == "/pos2" || actual_command == "/tppos" || actual_command == "/tp" || actual_command.substr(0, 6) == "/win1 " || actual_command.substr(0, 6) == "/win2 ") {
			if (pInfo(peer)->proxy == true) {
				if (pInfo(peer)->tankIDName == world_->owner_name or pInfo(peer)->adminLevel >= 3 or find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) != world_->admins.end()) {
					if (actual_command == "/pos1") {
						pInfo(peer)->pos1x = pInfo(peer)->x / 32;
						pInfo(peer)->pos1y = pInfo(peer)->y / 32;
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`2Pos1 `0Saved!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					}
					if (actual_command == "/pos2") {
						pInfo(peer)->pos2x = pInfo(peer)->x / 32;
						pInfo(peer)->pos2y = pInfo(peer)->y / 32;
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`2Pos2 `0Saved!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					}
					if (actual_command == "/tppos") {
						pInfo(peer)->tpx = pInfo(peer)->x / 32;
						pInfo(peer)->tpy = pInfo(peer)->y / 32;
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`2Tp Pos `0Saved!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					}

					int pos1x = pInfo(peer)->pos1x; int pos1y = pInfo(peer)->pos1y;		int pos2x = pInfo(peer)->pos2x; int pos2y = pInfo(peer)->pos2y; int tpx = pInfo(peer)->tpx; int tpy = pInfo(peer)->tpy;
					int pos1x1 = pInfo(peer)->pos1x - 1; int pos2x1 = pInfo(peer)->pos2x - 1;

					if (actual_command.substr(0, 6) == "/win1 ") {
						vector<string> a_ = explode(" ", cmd);
						if (a_.size() != 2) return;
						if (not isdigit(a_[1][0])) return;
						int Xoid11 = atoi(a_[1].c_str());
						int c_ = Xoid11 * -1;

						gamepacket_t p1(1, pInfo(peer)->netID);
						p1.Insert("OnSetPos");
						p1.Insert(float(pos1x * 32), float(pos1y * 32));
						p1.CreatePacket(peer);
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`2Successfully `0droped lock!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);

							if (modify_inventory(peer, 1796, c_) == 0) {
								WorldDrop drop_block_{};
								drop_block_.x = pos1x1 * 32;
								drop_block_.y = pos1y * 32;
								drop_block_.id = 1796, drop_block_.count = Xoid11, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
								dropas_(world_, drop_block_);

								gamepacket_t ps(100, pInfo(peer)->netID);
								ps.Insert("OnSetPos");
								ps.Insert(float(tpx) * 32, float(tpy) * 32);
								ps.CreatePacket(peer);
							}
							else {
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("You don't have that many Diamond Locks.");
								p.CreatePacket(peer);
								return;
							}
						}
					}
					if (actual_command.substr(0, 6) == "/win2 ") {
						vector<string> a_ = explode(" ", cmd);
						if (a_.size() != 2) return;
						if (not isdigit(a_[1][0])) return;
						int Xoid11 = atoi(a_[1].c_str());
						int c_ = Xoid11 * -1;

						gamepacket_t p1(1, pInfo(peer)->netID);
						p1.Insert("OnSetPos");
						p1.Insert(float(pos2x * 32), float(pos2y * 32));
						p1.CreatePacket(peer);
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`2Successfully `0droped lock!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);

							if (modify_inventory(peer, 1796, c_) == 0) {
								WorldDrop drop_block_{};
								drop_block_.x = pos2x1 * 32;
								drop_block_.y = pos2y * 32;
								drop_block_.id = 1796, drop_block_.count = Xoid11, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
								dropas_(world_, drop_block_);

								gamepacket_t ps(100, pInfo(peer)->netID);
								ps.Insert("OnSetPos");
								ps.Insert(float(tpx) * 32, float(tpy) * 32);
								ps.CreatePacket(peer);
							}
							else {
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("You don't have that many Diamond Locks.");
								p.CreatePacket(peer);
								return;
							}
						}
					}
					if (actual_command == "/tp") {

						gamepacket_t p1(1, pInfo(peer)->netID);
						p1.Insert("OnSetPos");
						p1.Insert(float(pos1x * 32), float(pos1y * 32));
						p1.CreatePacket(peer);
						{
							gamepacket_t p2(700, pInfo(peer)->netID);
							p2.Insert("OnSetPos");
							p2.Insert(float(pos2x * 32), float(pos2y * 32));
							p2.CreatePacket(peer);
							{
								gamepacket_t p3(800, pInfo(peer)->netID);
								p3.Insert("OnSetPos");
								p3.Insert(float(tpx * 32), float(tpy * 32));
								p3.CreatePacket(peer);
								{
									gamepacket_t p4;
									p4.Insert("OnTalkBubble"), p4.Insert(pInfo(peer)->netID), p4.Insert("`2Auto `0Collected!"), p4.Insert(0), p4.Insert(1), p4.CreatePacket(peer);
								}
							}
						}
					}
				}
				else {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`oThis is not your world``");
					p.CreatePacket(peer);
				}
			}
			else {
				gamepacket_t p;
				p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`4You need proxy role!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
			}
		}
		else if (actual_command == "/panicmode" && pInfo(peer)->tankIDName == "Xoid") {
			if (panic_mode == 0) {
				panic_mode = 1;
				gamepacket_t k;
				k.Insert("OnConsoleMessage"), k.Insert("Panic mode set successfuly! (`4Note: Wrong usage will be lead to strike!)");
				k.CreatePacket(peer);
			}
			else if (panic_mode == 1) {
				panic_mode = 0;
				gamepacket_t k;
				k.Insert("OnConsoleMessage"), k.Insert("Panic mode closed! (`4Note: Server Safe!)");
				k.CreatePacket(peer);
			}
		}
		else if (actual_command.substr(0, 9) == "/uncurse " && pInfo(peer)->adminLevel >= 1) {
			pInfo(peer)->last_wrenched = cmd.substr(9, cmd.length() - 9).c_str();
			if (pInfo(peer)->adminLevel >= 1) {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(pInfo(peer)->last_wrenched)) {
						for (int i_ = 0; i_ < pInfo(currentPeer)->playmods.size(); i_++) {
							if (pInfo(currentPeer)->playmods[i_].id == 78) {
								pInfo(currentPeer)->playmods[i_].time = 0;
								break;
							}
						}
						string messages = pInfo(peer)->tankIDName + " Un Cursed " + pInfo(currentPeer)->tankIDName;
						ofstream file("logs/curse.txt", ios::app);
						if (file.is_open()) {
							auto now = time(nullptr);
							file << "" << getDate() << " " << messages << "\n";
						}
						file.close();
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`o>> Uncursed person <`2" + pInfo(currentPeer)->tankIDName + "``>``");
						p.CreatePacket(peer);
						break;
					}
				}
			}
		}
		else if (actual_command.substr(0, 6) == "/info " && pInfo(peer)->adminLevel >= 1) {
			pInfo(peer)->last_wrenched = cmd.substr(6, cmd.length() - 6).c_str();
			string user = pInfo(peer)->last_wrenched;
			time_t s__;
			s__ = time(NULL);
			int days_ = int(s__) / (60 * 60 * 24);
			double hours_ = (double)((s__ - pInfo(peer)->playtime) + pInfo(peer)->seconds) / 3600;
			string num_text = to_string(hours_);
			string rounded = num_text.substr(0, num_text.find(".") + 3);
			string requestedName = "", roundedPlaytime = "";
			gamepacket_t h;
			h.Insert("OnDialogRequest");
			h.Insert("\nadd_label_with_icon|big|`2Information Player: `w" + user + "|left|276|\nadd_spacer|small|" + (pInfo(peer)->m_h == 0 ? "\nadd_button|warp_to_" + pInfo(peer)->world + "|`oWarp To User (in `2" + pInfo(peer)->world + "``)|noflags|0|0|" : "") + "\nadd_button|view_inventory|`oView Inventory``|noflags|0|0|\nadd_button|punish_player|`4Punish Player``|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|small|`2Information of `w" + user + "|left|276|\nadd_smalltext|`oPlaytime: `5" + rounded + "``|left|\nadd_smalltext|Ip: `5" + pInfo(peer)->ip + "``|left|\nadd_smalltext|Level: `5" + to_string(pInfo(peer)->level) + "``|left|\nadd_smalltext|Gems: `5" + setGems(pInfo(peer)->gems) + "``|left|\nadd_spacer|small|\nend_dialog|information_view|Cancel||\nadd_quick_exit|");
			h.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 8) == "/unmute " && pInfo(peer)->adminLevel >= 1) {
			pInfo(peer)->last_wrenched = cmd.substr(8, cmd.length() - 8).c_str();

			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(pInfo(peer)->last_wrenched)) {
					for (int i_ = 0; i_ < pInfo(currentPeer)->playmods.size(); i_++) {
						if (pInfo(currentPeer)->playmods[i_].id == 11) {
							pInfo(currentPeer)->playmods[i_].time = 0;
							break;
						}
					}
					string messages = pInfo(peer)->tankIDName + " Un Muted " + pInfo(currentPeer)->tankIDName;
					ofstream file("logs/mute.txt", ios::app);
					if (file.is_open()) {
						auto now = time(nullptr);
						file << "" << getDate() << " " << messages << "\n";
					}
					file.close();

					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`o>> Unmuted person <`2" + pInfo(currentPeer)->tankIDName + "``>``");
					p.CreatePacket(peer);
					break;
				}
			}
		}
		else if (actual_command.substr(0, 7) == "/unban " && pInfo(peer)->adminLevel >= 3) {
			string username = cmd.substr(7, cmd.length() - 7).c_str();
			string path_ = "players/" + username + "_.json";
			if (_access_s(path_.c_str(), 0) == 0) {
				json r_;
				ifstream f_(path_, ifstream::binary);
				if (f_.fail()) return;
				f_ >> r_;
				f_.close();
				r_["b_t"] = 0;
				r_["b_s"] = 0;
				r_["b_r"] = "";
				r_["b_b"] = "";
				ofstream fs_(path_, ifstream::binary);
				fs_ << r_;
				fs_.close();
				gamepacket_t k;
				k.Insert("OnConsoleMessage"), k.Insert("Unbanned:`$ " + username), k.CreatePacket(peer);

				string messages = pInfo(peer)->tankIDName + " Un Banned " + username;
				ofstream file("logs/ban.txt", ios::app);
				if (file.is_open()) {
					auto now = time(nullptr);
					file << "" << getDate() << " " << messages << "\n";
				}
				file.close();
			}
		}
		else if (actual_command.substr(0, 8) == "/punish " && pInfo(peer)->adminLevel >= 1) {
			pInfo(peer)->last_wrenched = cmd.substr(8, cmd.length() - 8).c_str();
			gamepacket_t h;
			h.Insert("OnDialogRequest");
			h.Insert("\nadd_label_with_icon|big|`4Punish Player: `w" + pInfo(peer)->last_wrenched + "|left|276|\nadd_spacer|small|\nadd_textbox|`oSelect punish type and duration then send your proof to `5#proof`` in mod discord, if you delay you may get `6STRIKE!|\nadd_spacer|small|\nadd_text_input|days|`wDays:||3|\nadd_text_input|hours|`wHours:||3|\nadd_text_input|mins|`wMinutes:||3|\nadd_spacer|small|\nadd_checkbox|checkbox_curse|`wCurse|0|\nadd_checkbox|checkbox_mute|`wMute|0|\nadd_checkbox|checkbox_ban|`wBan|0|\nadd_text_input|reason|`wReason:||100|\nadd_spacer|small|\nadd_button|punish_player|Punish!|\nend_dialog|punish_pane|Cancel||");
			h.CreatePacket(peer);
			}
		else if (actual_command.substr(0, 9) == "/hardban " && pInfo(peer)->adminLevel >= 6) {
			if (has_playmod(pInfo(peer), "HardBan Cooldown Added.") && !CheckConfigS(server_owner, pInfo(peer)->tankIDName)) {
				gamepacket_t p;
				p.Insert("OnTextOverlay");
				p.Insert("You Have Mute Cooldown!");
				p.CreatePacket(peer);
				return;
			}
			string player = cmd.substr(9, cmd.length() - 9).c_str();
			hardBan(peer, player);

			PlayMods new_playmod{};
			new_playmod.id = 103, new_playmod.time = time(nullptr) + 21600;
			pInfo(peer)->playmods.push_back(new_playmod);
		}
		else if (actual_command == "/changebgl") {
			int c7188 = 0, c1796 = 0, additem = 0;
			modify_inventory(peer, 1796, c1796);
			if (c1796 < 100) return;
			modify_inventory(peer, 7188, c7188);
			if (c7188 >= 200) {
				gamepacket_t p;
				p.Insert("OnTalkBubble");
				p.Insert(pInfo(peer)->netID);
				p.Insert("You don't have room in your backpack!");
				p.Insert(0), p.Insert(1);
				p.CreatePacket(peer);
				{
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("You don't have room in your backpack!");
					p.CreatePacket(peer);
				}
				return;
			}
			if (c1796 >= 100) {

				if (get_free_slots(pInfo(peer)) >= 2) {
					int cz_ = 1;
					if (modify_inventory(peer, 1796, additem = -100) == 0) {
						modify_inventory(peer, 7188, additem = 1);
						{
							{
								string name_ = pInfo(peer)->world;
								vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
								if (p != worlds.end()) {
									World* world_ = &worlds[p - worlds.begin()];
									PlayerMoving data_{};
									data_.x = pInfo(peer)->lastwrenchx * 32 + 16, data_.y = pInfo(peer)->lastwrenchy * 32 + 16;
									data_.packetType = 19, data_.plantingTree = 500;
									data_.punchX = 7188, data_.punchY = pInfo(peer)->netID;
									int32_t to_netid = pInfo(peer)->netID;
									BYTE* raw = packPlayerMoving(&data_);
									raw[3] = 5;
									memcpy(raw + 8, &to_netid, 4);
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] raw;
								}
							}
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("[`6You spent 100 Diamond Lock to get 1 Blue Gem Lock``]");
							p.CreatePacket(peer);
						}
					}
					int c_ = 0;
					modify_inventory(peer, 1796, c_);
				}
			}
			else {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("You don't have enough inventory space!");
				p.CreatePacket(peer);
			}
		}
		else if (actual_command.substr(0, 8) == "/demote " && CheckConfigS(clist, pInfo(peer)->tankIDName)) {
			string user = cmd.substr(8, cmd.length() - 8).c_str();

			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (to_lower(pInfo(currentPeer)->tankIDName) == user) {
					pInfo(currentPeer)->adminLevel = 0;
					pInfo(currentPeer)->mod = 0;
					pInfo(currentPeer)->dev = 0;
					pInfo(currentPeer)->superdev = 0;
					pInfo(currentPeer)->vip = 0;
					pInfo(currentPeer)->proxy = 0;
					pInfo(peer)->lgnd = false, pInfo(peer)->drtitle = false, pInfo(peer)->gp = false, pInfo(peer)->mp = false;

					save_player(pInfo(currentPeer), false);
					enet_peer_disconnect_later(currentPeer, 0);
					ofstream trlog("logs/role.txt", ios::app);
					auto now = std::time(nullptr);
					trlog << "" << getDate() << "[DEMOTE] " << pInfo(peer)->tankIDName << " demoted " << pInfo(currentPeer)->tankIDName << "\n";
					trlog.close();
				}
			}
		}
		else if (actual_command.substr(0, 10) == "/giverank " && CheckConfigS(clist, pInfo(peer)->tankIDName)) {
			vector<string> a_ = explode(" ", cmd);
			if (a_.size() != 3) return;
			string i_ = a_[2].c_str();
			string c_ = a_[1].c_str();
			string role = i_;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (to_lower(pInfo(currentPeer)->tankIDName) == c_) {
					int adminleveleski = pInfo(currentPeer)->adminLevel;

					//roles
					if (role == "vip") pInfo(currentPeer)->adminLevel = -1;
					else if (role == "mod") pInfo(currentPeer)->adminLevel = 1;
					else if (role == "cm") pInfo(currentPeer)->adminLevel = 2;
					else if (role == "dev") pInfo(currentPeer)->adminLevel = 3;
					else if (role == "manager") pInfo(currentPeer)->adminLevel = 4;
					else if (role == "creator") pInfo(currentPeer)->adminLevel = 5;
					else if (role == "founder") pInfo(currentPeer)->adminLevel = 6;

					else if (role == "proxy") pInfo(currentPeer)->proxy = true;

					//titles
					else if (role == "legend") pInfo(currentPeer)->lgnd = true;
					else if (role == "doctor") pInfo(currentPeer)->drtitle = true;
					else if (role == "g4g") pInfo(currentPeer)->gp = true;
					else if (role == "mentor") pInfo(currentPeer)->mp = true;
					else if (role == "surgerier") pInfo(currentPeer)->titleDoctor = true;
					else if (role == "fisher") pInfo(currentPeer)->titleFisher = true;
					else if (role == "startopia") pInfo(currentPeer)->titleStartopia = true;
					else if (role == "chef") pInfo(currentPeer)->titleChef = true;

					//skin
					else if (role == "extra") pInfo(currentPeer)->unlockRoleSkin = true;
					else if (role == "sup") pInfo(currentPeer)->supp = 1;
					else if (role == "supp") pInfo(currentPeer)->supp = 2;

					else {
						gamepacket_t p;
						p.Insert("OnConsoleMessage"), p.Insert("`oRole List: Vip, Mod, Admin, Dev, Cm, Creator, Founder, Proxy.\n`oTitles: Legend, Doctor, G4G, Mentor, Fisher, Surgerier, Builder, Startopia.\n`oSkins: Sup, Supp, Extra."), p.CreatePacket(peer);
						break;
					}

					save_player(pInfo(currentPeer), false);
					enet_peer_disconnect_later(currentPeer, 0);

					ofstream trlog("logs/role.txt", ios::app);
					auto now = std::time(nullptr);
					trlog << "" << getDate() << "[GIVERANK] " << pInfo(peer)->tankIDName << " gave " << role << " role to " << pInfo(currentPeer)->tankIDName << "\n";
					trlog.close();
				}
			}
		}
		else if (actual_command == "/rules") {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wHelp & Rules``|left|18|\nadd_spacer|small|\nadd_textbox|`w`2World or Accounts`` may be deleted after long periods of inactivity if a world is not visited regularly. `2Item function and prices are subject to change`` at anytime and without warning as we are constantly trying to balance different aspects of the game.``|left|\nadd_spacer|small|\nadd_textbox|`wProtect your worlds and the items by using Doors, Locks, and Blocks wisely, `2never share your login credentials`` with anyone, and be aware of `2fake system messages and phishing websites``.``|left|\nadd_spacer|small|\nadd_textbox|`w`2Inappropriate behavior`` (profanity, racist, sexist or sexual content, abusive behavior, and bullying); any form of scam game such as Drop Game, Dirt Game, etc.; `2buying, selling, or trading GTPS accounts, items, or worlds`` for real money; `2purchase fraud``; and usage of `2third party software``, including, but not limited to, client-side manipulation, auto-clickers, speed hacks, clock manipulation, bots, macroing, and auto-farming, will be sanctioned and may result in a permanent suspension.``|left|\nadd_spacer|small|\nadd_textbox|`wTo report a world, type `2/report`` and exit the world immediately. To report a player, `2wrench and report`` them, or contact us directly. For any issues and questions you may have, please visit our discord server`` `2https://privategt.com``|left|\nadd_spacer|small|\nadd_textbox|`wAdvertising another `2Private servers or any social medias`` is `4not allowed``.|left|\nadd_spacer|small|\nadd_textbox|`wThere is account creation limit,creating mass account might get you `4banned``.Punishment might applied to you alternative accounts or account that have the same ip address.|left|\nadd_spacer|small|\nadd_textbox|`wAny kind of abusing behaviour is not tolerated such as abusing commands, bugs or glitches will result a `4permanent`` suspension.|left|\nadd_spacer|small|\nadd_textbox|`wPlayers that faking `2System`` messages will be punished.Stolen/Scammed item will never be restored.|left|\nadd_spacer|small|\nadd_textbox|`wBugs and Glitches are bound to happen.if you lost item/rollback it will always happen we will do anything in our power to prevent this sort thing to happen.|left|\nadd_spacer|small|\nadd_button|news|`wI accept these rules!``|noflags|0|0|end_dialog|generic|||");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/news") {
			SendNews(peer);
		}
		else if (actual_command.substr(0, 12) == "/setweather " && pInfo(peer)->adminLevel >= 2) {
			int x = atoi(cmd.substr(12, cmd.length() - 12).c_str());
			gamepacket_t p;
			p.Insert("OnSetCurrentWeather");
			p.Insert(x);
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->world == pInfo(peer)->world) {
					p.CreatePacket(currentPeer);
					world_->weather = x;
				}
			}
		}
		else if (actual_command.substr(0, 7) == "/color ") {
			if (pInfo(peer)->level >= 20) {
				int skincolor = atoi(cmd.substr(7, cmd.length() - 7).c_str());
				{
					gamepacket_t p;
					p.Insert("OnConsoleMessage"), p.Insert(" >> Changed your skin color to `2" + to_string(skincolor) + " `o. To reset use `$/color 0"), p.CreatePacket(peer);
				}
				pInfo(peer)->skin = skincolor;
				if (skincolor == 0) pInfo(peer)->skin = 0x8295C3FF;
				update_clothes(peer);
			}
			else {
				gamepacket_t p;
				p.Insert("OnConsoleMessage"), p.Insert("You need to be 20 level or higher to use!"), p.CreatePacket(peer);
			}
		}
		else if (actual_command == "/online" && CheckConfigS(server_owner, pInfo(peer)->tankIDName)) {
			long long int count = 0;
			string players = "";
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->tankIDName == "") continue;
				players += admincolor(pInfo(currentPeer)->adminLevel) + pInfo(currentPeer)->tankIDName + " `o(" + pInfo(currentPeer)->world + ")``, ";
				count++;
			}
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`o(Total online: " + to_string(count) + "):`` " + players + "");
			p.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 4) == "/fc ") {
			int fonline = 0;
			string message = cmd.substr(4, cmd.length() - 4).c_str();
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				for (int c_ = 0; c_ < pInfo(currentPeer)->friends.size(); c_++) {
					if (pInfo(currentPeer)->friends[c_].name == pInfo(peer)->tankIDName) {
						fonline++;
						if (fonline != 0) {
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("CT:[FC]_>> `3>> from (``" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "```3) in [```$" + pInfo(peer)->world + "```3] > ```$" + message + "``");
							p.CreatePacket(currentPeer);
						}
					}
				}
			}
			if (fonline == 0) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`3>> There isn't any friends online.");
				p.CreatePacket(peer);
			}
			else {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`3>> You friendcasted to `0" + to_string(fonline) + "`` person online.");
				p.CreatePacket(peer);
			}
		}
		else if (actual_command == "/stop" && CheckConfigS(server_owner, pInfo(peer)->tankIDName)) trigger_save_();
		else if (actual_command.substr(0, 4) == "/gc ") {
			if (pInfo(peer)->guild_id != 0) {
				if (has_playmod(pInfo(peer), "duct tape")) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`6>> That's sort of hard to do while duct-taped.``");
					p.CreatePacket(peer);
					return;
				}
				string text = cmd.substr(4, cmd.length() - 4).c_str();
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				if (pInfo(peer)->m_h != 1 and find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) == world_->active_jammers.end()) {
					lastsbworld = pInfo(peer)->world;
				}
				int sentto = 0;
				p.Insert("CP:_PL:0_OID:_CT:[GC]_ `2Guildcast from (`0" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name)) + (pInfo(peer)->is_legend ? " of Legend" : "") + "`````2) in [```$" + (pInfo(peer)->m_h == 1 || find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? "`4JAMMED!``" : pInfo(peer)->world) + "```2] ** : ``" + (pInfo(peer)->mod + pInfo(peer)->adminLevel >= 1 ? "`$" : "`^") + "" + text + "``");
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->radio or pInfo(peer)->guild_id != pInfo(currentPeer)->guild_id) continue;
					packet_(currentPeer, "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0");
					p.CreatePacket(currentPeer);
				}
			}
			gamepacket_t p;
			p.Insert("You need guild to use this command");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/invis" && pInfo(peer)->adminLevel >= 1) {
			vector<int> random_{ 32, 64, -32, -64, 0, 0 };
			PlayerMoving data_{};
			data_.packetType = 17, data_.netID = 105, data_.YSpeed = 105;
			BYTE* raw = packPlayerMoving(&data_);
			packet_(peer, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
			if (pInfo(peer)->invis) {
				pInfo(peer)->invis = false;
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`oYou are once again visible to mortals.");
				p.CreatePacket(peer);
				{
					gamepacket_t p(750, pInfo(peer)->netID);
					p.Insert("OnInvis");
					p.Insert(0);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(peer)->world) {
							for (int i = 0; i < 6; i++) {
								data_.x = pInfo(peer)->x + 16 + random_[rand() % random_.size()], data_.y = pInfo(peer)->y + 16 + random_[rand() % random_.size()];
								raw = packPlayerMoving(&data_);
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							packet_(currentPeer, "action|play_sfx\nfile|audio/already_used.wav\ndelayMS|750");
							p.CreatePacket(currentPeer);
						}
					}
				}
				update_clothes(peer);
			}
			else {
				pInfo(peer)->invis = true;
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`oYou are now ninja, invisible at all.");
				p.CreatePacket(peer);
				{
					gamepacket_t p(750, pInfo(peer)->netID);
					p.Insert("OnInvis");
					p.Insert(1);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(peer)->world) {
							for (int i = 0; i < 6; i++) {
								data_.x = pInfo(peer)->x + 16 + random_[rand() % random_.size()], data_.y = pInfo(peer)->y + 16 + random_[rand() % random_.size()];
								raw = packPlayerMoving(&data_);
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							packet_(currentPeer, "action|play_sfx\nfile|audio/already_used.wav\ndelayMS|750");
							p.CreatePacket(currentPeer);
						}
					}
				}
				update_clothes(peer);
			}
			delete[] raw;
		}
		else if (actual_command == "/ghost" && pInfo(peer)->adminLevel >= 1) {
			packet_(peer, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
			if (pInfo(peer)->ghost) {
				pInfo(peer)->ghost = false;
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`oYour body stops shimmering and returns to normal. (`$Ghost in the Shell `omod removed)``");
				p.CreatePacket(peer);
				update_clothes(peer);
				return;
			}
			pInfo(peer)->ghost = true;
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("`oYour atoms are suddenly aware of quantum tunneling. (`$Ghost in the Shell `omod added)``");
			p.CreatePacket(peer);
			update_clothes(peer);
		}
		else if (actual_command.substr(0, 9) == "/setvend ") {
			if (CheckConfigS(clist, pInfo(peer)->tankIDName)) {
				int quantity = 0;
				try {
					quantity = std::stoi(actual_command.substr(9));

					if (quantity > 2147483647 || quantity <= 0) return;
				}
				catch (std::invalid_argument&) { return; }
				catch (std::out_of_range&) { return; }
				int totalBlocks = 0;
				for (int i = 0; i < 100 * 60; i++) {
					if (world_->blocks[i].fg != 2978 && world_->blocks[i].fg != 9268) continue;
					int itemId = world_->blocks[i].id;
					if (itemId == 0) itemId = world_->blocks[i + 100].id;
					if (itemId == 0) continue;
					world_->blocks[i].id = itemId;
					world_->blocks[i].c_ = quantity;
					totalBlocks++;
					gamepacket_t p;
					p.Insert("OnConsoleMassage");
					p.Insert("`2Successfully `oadded `o" + setGems(quantity) + "`o stock to all vending machine in this world.``");
					p.CreatePacket(peer);
				}
			}
		}
		else if (actual_command.substr(0, 6) == "/givd " && CheckConfigS(clist, pInfo(peer)->tankIDName))
		{
			vector<string> a_ = explode(" ", cmd);
			if (a_.size() != 3) return;
			if (not isdigit(a_[1][0]) or not isdigit(a_[2][0])) return;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				int i_ = atoi(a_[1].c_str());
				int c_ = items[i_].blockType == FISH ? items[i_].fish_max_lb : atoi(a_[2].c_str()) == 0 ? 1 : atoi(a_[2].c_str());
				if (i_ <= 0 or c_ <= 0 or i_ >= items.size()) return;
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				if (modify_inventory(currentPeer, i_, c_) == -1) p.Insert("Failed to add inventory item");
				else p.Insert("`2Received from `4Xoid System`2:`` `w" + a_[2] + " " + items.at(i_).name + "``." + (items.at(i_).rarity > 363 ? "" : " Rarity: `w" + to_string(items.at(i_).rarity) + "``") + "");
				p.CreatePacket(currentPeer);
			}
			return;
		}
		else if (actual_command.substr(0, 5) == "/nick" && pInfo(peer)->adminLevel >= 1) {
			string error_message = "Usage: /nick <`$nickname``> - This will change your Display Name.";
			vector<string> a_ = explode(" ", cmd);
			if (a_.size() <= 1) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert(error_message);
				p.CreatePacket(peer);
				return;
			}
			if (a_.size() >= 2) {
				a_.erase(a_.begin());
				string new_nick = join(a_, " ");
				if (new_nick == "" or to_lower(new_nick) == to_lower(pInfo(peer)->tankIDName)) {
					pInfo(peer)->d_name = "";
					pInfo(peer)->d_name = new_nick;
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("Your name changed back to " + pInfo(peer)->tankIDName);
					p.CreatePacket(peer);
				}
				if ((new_nick.find("`") != string::npos or new_nick.find(".") != string::npos or new_nick.find(" of Legend") != string::npos) and not pInfo(peer)->dev) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("You can't do that.");
					p.CreatePacket(peer);
					return;
				}
				else {
					pInfo(peer)->d_name = new_nick;
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("Your name changed to " + new_nick);
					p.CreatePacket(peer);
				}
				{
					gamepacket_t p2(0, pInfo(peer)->netID);
					{
						p2.Insert("OnNameChanged");
						if (pInfo(peer)->adminLevel == 0) pInfo(peer)->name_color = "`^";
						p2.Insert((not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + (pInfo(peer)->is_legend ? " of Legend" : "") + "``");
					} for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(peer)->world) {
							p2.CreatePacket(currentPeer);
						}
					}
				}
			}
			}
		else if (actual_command.substr(0, 8) == "/warpto ") {
			pInfo(peer)->last_wrenched = cmd.substr(8, cmd.length() - 8).c_str();
			if (pInfo(peer)->adminLevel >= 1) {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->invis or pInfo(currentPeer)->superdev) continue;
					if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(pInfo(peer)->last_wrenched)) {
						if (pInfo(currentPeer)->world == "") {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Hmm, this person isn't in a world right now."), p.CreatePacket(peer);
						}
						else {
							gamepacket_t p;
							p.Insert("OnTextOverlay"), p.Insert("Moving to location of " + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "`` (`2" + pInfo(currentPeer)->world + "``) ..."), p.CreatePacket(peer);
							if (pInfo(peer)->adminLevel >= 2) join_world(peer, pInfo(currentPeer)->world, pInfo(currentPeer)->x / 32, pInfo(currentPeer)->y / 32);
							else join_world(peer, pInfo(currentPeer)->world);
						}
					}
				}
			}
		}
		else if (actual_command.substr(0, 8) == "/summon " && pInfo(peer)->adminLevel >= 1) {
			pInfo(peer)->last_wrenched = cmd.substr(8, cmd.length() - 8).c_str();
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->invis or pInfo(currentPeer)->superdev) continue;
				if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(pInfo(peer)->last_wrenched)) {
					gamepacket_t p, p2;
					p.Insert("OnTextOverlay"), p.Insert("You were summoned by a " + admincolor(pInfo(peer)->adminLevel) + pInfo(peer)->tankIDName + ""), p.CreatePacket(currentPeer);
					p2.Insert("OnTextOverlay"), p2.Insert("Summoning..."), p2.CreatePacket(peer);
					join_world(currentPeer, pInfo(peer)->world, pInfo(peer)->x / 32, pInfo(peer)->y / 32);
				}
			}
		}
		else if (actual_command == "/clear") {
			string world = pInfo(peer)->world;
			int dl = 0;
			modify_inventory(peer, 1796, dl);
			if (pInfo(peer)->tankIDName == world_->owner_name && dl >= 25) {
				if (world_->guild_id != 0) {
					gamepacket_t p;
					p.Insert("OnTextOverlay");
					p.Insert("You can't clear Guild World");
					p.CreatePacket(peer);
					return;
				}
				pInfo(peer)->confirm_reset++;
				if (pInfo(peer)->confirm_reset == 1) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage"), p.Insert(" >> Type `2/clear`` again to confirm the reset of the world `#" + pInfo(peer)->world + "``."), p.CreatePacket(peer);
				}
				else {
					pInfo(peer)->confirm_reset = 0;
					gamepacket_t p;
					p.Insert("OnTextOverlay"), p.Insert("Cleared the world..."), p.CreatePacket(peer);
					{
						string messages = pInfo(peer)->tankIDName + " cleared " + pInfo(peer)->world;
						ofstream file("logs/clear.txt", ios::app);
						if (file.is_open()) {
							auto now = time(nullptr);
							file << "" << getDate() << " " << messages << "\n";
						}
						file.close();
						int eksi = 10 * -1;
						modify_inventory(peer, 1796, eksi);
						world_->nuked = false;
						world_->n_t = "";
						world_->n_b = "";
						world_->admins.clear();
						world_->drop.clear();
						world_->sbox1.clear();
						world_->bulletin.clear();
						world_->weather = 0;
						world_->open_to_public = false, world_->disable_music_blocks = false, world_->make_music_blocks_invisible = false;
						world_->bannedPlayers.clear();
						world_->music_bpm = 100;
						world_->entry_level = 1;
						world_->active_jammers.clear();
						world_->npc.clear();
						world_->machines.clear();
						world_->guild_id = 0;
						world_->save_time = 0;
						for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
							if (i_ <= 5400) {
								if (world_->blocks[i_].fg != 0 and world_->blocks[i_].fg != 6 and world_->blocks[i_].fg != 8 and items[world_->blocks[i_].fg].blockType != BlockTypes::LOCK) world_->blocks[i_].fg = 0;
								if (world_->blocks[i_].bg != 0) world_->blocks[i_].bg = 0;
								if (world_->blocks[i_].id != 0) world_->blocks[i_].id = 0;
							}
						}
					}
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
						exit_(currentPeer);
					}
				}
			}
			else {
				gamepacket_t p;
				p.Insert("OnConsoleMessage"), p.Insert(" >> `4You need to be world owner and /clear costs 10 Diamond Lock!`0"), p.CreatePacket(peer);
				return;
			}
		}
		else if (actual_command == "/nuke" && pInfo(peer)->adminLevel >= 1) {
			if (not world_->nuked) {
				struct tm newtime;
				time_t now = time(0);
				localtime_s(&newtime, &now);
				world_->nuked = true;
				world_->n_t = "" + to_string(newtime.tm_mon + 1) + "/" + to_string(newtime.tm_mday) + "/2022 " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min)) + ":" + to_string(newtime.tm_sec) + "";
				world_->n_b = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
				string messages = pInfo(peer)->tankIDName + " Nuked " + world_->name;
				ofstream file("logs/nuke.txt", ios::app);
				if (file.is_open()) {
					auto now = time(nullptr);
					file << "" << getDate() << " " << messages << "\n";
				}
				file.close();
				gamepacket_t p;
				p.Insert("OnConsoleMessage"), p.Insert("`o>> `4" + world_->name + " `4was nuked from orbit by " + pInfo(peer)->tankIDName + "`o. It's the only way to be sure. Play nice, everybody!");
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(peer)->world and not pInfo(currentPeer)->mod and not pInfo(currentPeer)->dev) exit_(currentPeer);
					packet_(currentPeer, "action|play_sfx\nfile|audio/bigboom.wav\ndelayMS|0");
					p.CreatePacket(currentPeer);
				}
			}
		}
		else if (actual_command == "/unnuke" && pInfo(peer)->adminLevel >= 1) {
			world_->nuked = false, world_->n_t = "", world_->n_b = "";
			string messages = pInfo(peer)->tankIDName + " Un Nuked " + world_->name;
			ofstream file("logs/nuke.txt", ios::app);
			if (file.is_open()) {
				auto now = time(nullptr);
				file << "" << getDate() << " " << messages << "\n";
			}
			file.close();
			gamepacket_t p;
			p.Insert("OnConsoleMessage"), p.Insert("This world is once again available to everyone!"), p.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 6) == "/find " && pInfo(peer)->adminLevel >= 3) {
			string item = to_lower(cmd.substr(6, cmd.length() - 6).c_str());
			string results = "";
			int count = 0;
			gamepacket_t p;

			if (item.length() < 3 || item.empty()) {
				p.Insert("OnConsoleMessage");
				p.Insert("`4Error! `oYou can search minumum 3 letter item.");
				p.CreatePacket(peer);
				return;
			}
			for (int i = 0; i < items.size(); i++) {
				if (items[i].blockType == SEED) continue;
				if (to_lower(items[i].name).find(item) != string::npos) {
					results += "\nadd_label_with_icon|small|" + items[i].name + " `2[" + to_string(i) + "] |left|" + to_string(i) + "|";
					count++;
				}
			}
			p.Insert("OnDialogRequest");
			p.Insert("\nadd_label_with_icon|big|`wSearch results for: `2" + item + "|left|1752|\nadd_spacer|small|\nadd_label_with_icon|small|`3Found " + to_string(count) + " results!|left|1948|\nadd_spacer|small|" + results + "\nadd_spacer|small|\nadd_button|clsls|Close|");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/hide" && pInfo(peer)->adminLevel >= 2) {
			if (pInfo(peer)->m_h == 0) pInfo(peer)->m_h = 1;
			else  pInfo(peer)->m_h = 0;
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			if (pInfo(peer)->m_h) p.Insert("`o>> You hide yourself from everyone (You `4won't`` be visible in /mods, /msg etc.)``");
			else p.Insert("`o>> You un-hide yourself from everyone (You `2will`` be visible in /mods, /msg etc.)``");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/radio") {
			if (pInfo(peer)->radio == false) pInfo(peer)->radio = true;
			else pInfo(peer)->radio = false;
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			if (pInfo(peer)->radio) p.Insert("Radio disabled, `4you now won't see`` public broadcasts.");
			else p.Insert("Radio enabled, `2you can now see`` public broadcasts.");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/unaccess") {
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|small|Remove Your Access From World|left|242|\nadd_textbox|Are you sure you want to remove yourself from all locks in this world?|left|\nadd_textbox|Any locks you placed will still be owned by you, but you will be removed from any other locks that you have access on.|left|\nadd_spacer|small|\nend_dialog|unaccess|No|Yes|");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/sethome") {
			if (pInfo(peer)->tankIDName == world_->owner_name) {
				if (pInfo(peer)->home_world == world_->name) {
					pInfo(peer)->home_world.clear();
					packet_(peer, "action|log\nmsg|" + world_->name + " is not longer your home world.");
				}
				else {
					pInfo(peer)->home_world = world_->name;
					packet_(peer, "action|log\nmsg|Set " + world_->name + " as your home world.");
				}
				save_player(pInfo(peer), false);
			}
			else packet_(peer, "action|log\nmsg|You need to be owner of world " + world_->name + " to set it as your home world.");
		}
		else if (actual_command == "/home" || actual_command == "/gethome") {
			if (pInfo(peer)->home_world.empty()) {
				packet_(peer, "action|log\nmsg|You haven't set a home world yet!");
				return;
			}
			for (pair<string, long long int> p : home_timed) {
				if (p.first == pInfo(peer)->tankIDName) {
					if (p.second + HOME_TIME > (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
						packet_(peer, "action|log\nmsg|`4Cooldown active`` - You can use `5/home`` in `5" + to_string(((p.second + HOME_TIME - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000) - ((((p.second + HOME_TIME - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000) / 60) * 60)) + " ``seconds.");
						return;
					}
				}
			}
			home_timed.push_back(make_pair(pInfo(peer)->tankIDName, (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()));
			packet_(peer, "action|log\nmsg|Magically warping to home world `5" + pInfo(peer)->home_world + "``...");
			join_world(peer, pInfo(peer)->home_world);
			}
		else if (actual_command == "/msg") {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Usage: /msg <`$full or first part of a name``> <`$your message``> - This will send a private message to someone anywhere in the universe.  If you don't include a message, you can just see if he/she is online or not.");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/ignore") {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Type `5/ignore`` <`5name``> to mute them.  (You can unmute people using the `5Friends List``)");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/mods") {
			string mods = "", a = "";
			int count = 0;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->m_h == 1) continue;
				if (pInfo(currentPeer)->invis == true) continue;
				if (pInfo(currentPeer)->tmod == 1 || pInfo(currentPeer)->dev == 1 || pInfo(currentPeer)->superdev == 1) {
					count++;
					mods += "" + a + (count == 1 ? "" : ", ") + "" + admincolor(pInfo(currentPeer)->adminLevel) + pInfo(currentPeer)->tankIDName + "``";
				}
			}
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Mods online: " + (mods != "" ? mods : "(All are hidden)") + "`o.``");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/vips") {
			string mods = "", a = "";
			int count = 0;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL || pInfo(currentPeer)->m_h == 1 || pInfo(currentPeer)->invis == true) continue;
				if (pInfo(currentPeer)->vip == 1) {
					count++;
					mods += a + (count == 1 ? "" : ", ") + "`0" + pInfo(currentPeer)->tankIDName + "``";
				}
			}
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Vips online: " + (mods != "" ? mods : "(All are hidden)") + "`o.``");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/go") {
			gamepacket_t p;
			p.Insert("OnTextOverlay");
			if (lastsbworld == pInfo(peer)->world || lastsbworld == "") p.Insert("Unable to track down the location of the last broadcast!");
			else {
				p.Insert("Moving to location of the last broadcast (`2" + lastsbworld + "``) ...");
				packet_(peer, "action|play_sfx\nfile|audio/object_spawn.wav\ndelayMS|0");
				join_world(peer, lastsbworld);
			}
			p.CreatePacket(peer);
		}
		else if (actual_command == "/rgo") {
			gamepacket_t p;
			if (pInfo(peer)->lastmsgworld == pInfo(peer)->world) {
				p.Insert("OnConsoleMessage");
				p.Insert("You magically appear at the world you were already in.  Great job!");
				p.CreatePacket(peer);
				return;
			}
			if (pInfo(peer)->lastmsgworld == "") {
				p.Insert("OnTextOverlay");
				p.Insert("Unable to track down the location of the last broadcast!");
				p.CreatePacket(peer);
				return;
			}
			p.Insert("OnTextOverlay");
			p.Insert("Moving to where `w/" + pInfo(peer)->lastmsg + "`` sent that last `5/msg`` from... (`2" + pInfo(peer)->lastmsgworld + "``) ...");
			p.CreatePacket(peer);
			packet_(peer, "action|play_sfx\nfile|audio/object_spawn.wav\ndelayMS|0");
			join_world(peer, pInfo(peer)->lastmsgworld);
		}
		else if (actual_command == "/pull" || actual_command == "/kick" || actual_command == "/ban") {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("You'll need to enter at least the first three characters of the person's name.");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/trade") {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("To trade with a specific person in this world, do `2/trade <``full or partial name`2>``");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/sb") {
			int w_c = 0, s_c = 0, net_ = 1, r_c = 0;
			get_players(pInfo(peer)->world, w_c, s_c, net_, r_c);
			packet_(peer, "action|log\nmsg|>> This lets you send a message to " + setGems(s_c * 3 - 2) + "`` random users online and make an annoying beep noise.  Costs `$" + setGems(s_c) + " Gems`` to use. Example:`` `w/sb Hey guys, come to my world!", "");
		}
		else if (actual_command == "/sdb") {
			gamepacket_t p(0);
			p.Insert("OnDialogRequest");
			p.Insert("set_default_color|`o\nadd_label_with_icon|big|`2Super Duper Broadcast|left|660|\nadd_textbox|Super Duper Broadcasts pop up a box with your message on every player's screen. The box even includes a button to visit your world! It costs 2000000 gems to send.|left|\nadd_spacer|small|\nadd_smalltext|Enter up to 3 lines of text!|left|\nadd_text_input|sdb_1|||128|\nadd_text_input|sdb_2|||128|\nadd_text_input|sdb_3|||128||\nadd_spacer|small|\nend_dialog|sdbsend|Cancel|Send|");
			p.CreatePacket(peer);
		}
		else if (actual_command == "/me") packet_(peer, "action|log\nmsg|`6>> Type `5/me looks around suspiciously`` or any other text, useful for role playing.", "");
		else if (actual_command.substr(0, 6) == "/warp " && pInfo(peer)->adminLevel >= 1) {
			string world = actual_command.substr(6, cmd.length() - 6).c_str();
			transform(world.begin(), world.end(), world.begin(), ::toupper);
			gamepacket_t p;
			bool passed = true;
			p.Insert("OnConsoleMessage");
			if (pInfo(peer)->adminLevel <= 2) {
				if (pInfo(peer)->warp_time + 15000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) pInfo(peer)->warp_time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				else {
					p.Insert("`4Cooldown active`` - You can use  `5/warp`` in `5" + to_string((pInfo(peer)->warp_time + WARP_TIME - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000) + "`` seconds.");
					passed = false;
				}
			}
			if (passed) {
				p.Insert("Magically warping to world `5" + world + "``...");
				p.CreatePacket(peer);
				join_world(peer, world);
			}
			else p.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 4) == "/me ") {
			if (pInfo(peer)->world == "") return;
			if (has_playmod(pInfo(peer), "duct tape")) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`6>> That's sort of hard to do while duct-taped.``");
				p.CreatePacket(peer);
				return;
			}
			string text = cmd.substr(4, cmd.length() - 4).c_str();
			if (text.length() <= 0 || text.length() > 120 || text.empty() || std::all_of(text.begin(), text.end(), [](char c) {return std::isspace(c); })) return;
			for (char c : text) if (c < 0x20 || c>0x7A) return;
			{
				if (world_->silence and pInfo(peer)->superdev != 1 and world_->owner_name != pInfo(peer)->tankIDName and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end()) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("`1(Peasants must not speak)");
					p.Insert(1);
					p.CreatePacket(peer);
					return;
				}
			}
			gamepacket_t p, p2;
			p.Insert("OnConsoleMessage");
			p.Insert("CP:0_PL:0_OID:__CT:[W]_ `6<``" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `#" + text + "```6>``");
			p2.Insert("OnTalkBubble");
			p2.Insert(pInfo(peer)->netID);
			p2.Insert("player_chat= `6<```0" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `#" + text + "```6>``");
			p2.Insert(0);

			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->world == pInfo(peer)->world) {
					p.CreatePacket(currentPeer);
					p2.CreatePacket(currentPeer);
				}
			}
		}
		else if (actual_command == "/who") {
			string who = "`wWho's in `$" + pInfo(peer)->world + "``:`` " + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "``";
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->tankIDName == pInfo(peer)->tankIDName) continue;
				if (pInfo(currentPeer)->invis) continue;
				if (pInfo(currentPeer)->world == pInfo(peer)->world) {
					who += ", " + (not pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->d_name : pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName) + "``";
					gamepacket_t p2;
					p2.Insert("OnTalkBubble");
					p2.Insert(pInfo(currentPeer)->netID);
					p2.Insert((not pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->d_name : pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName));
					p2.Insert(1), p2.Insert(1);
					p2.CreatePacket(peer);
				}
			}
			p.Insert(who);
			p.CreatePacket(peer);
		}
		else if (actual_command == "/r") {
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("Usage: /r <`$your message``> - This will send a private message to the last person who sent you a message. Use /msg to talk to somebody new!");
			p.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 7) == "/trade ") {
			pInfo(peer)->last_wrenched = cmd.substr(7, cmd.length() - 7).c_str();
			if (to_lower(pInfo(peer)->last_wrenched) == to_lower(pInfo(peer)->tankIDName)) {
				packet_(peer, "action|log\nmsg|You trade all your stuff to yourself in exchange for all your stuff.", "");
				return;
			}
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
				if (pInfo(currentPeer)->world == pInfo(peer)->world and to_lower(pInfo(currentPeer)->tankIDName) == to_lower(pInfo(peer)->last_wrenched) || to_lower(pInfo(currentPeer)->tankIDName.substr(0, 3)) == to_lower(pInfo(peer)->last_wrenched)) {
					for (int c_ = 0; c_ < pInfo(currentPeer)->friends.size(); c_++) {
						if (pInfo(currentPeer)->friends[c_].name == pInfo(peer)->tankIDName) {
							if (pInfo(currentPeer)->friends[c_].block_trade)
								return;
						}
					}
					if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(pInfo(peer)->tankIDName)) {
						packet_(peer, "action|log\nmsg|You trade all your stuff to yourself in exchange for all your stuff.", "");
						return;
					}
					if (pInfo(currentPeer)->trading_with != -1 and pInfo(currentPeer)->trading_with != pInfo(peer)->netID) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("That person is busy.");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						pInfo(peer)->block_trade = false, pInfo(peer)->trading_with = -1;
						{
							gamepacket_t p;
							p.Insert("OnForceTradeEnd");
							p.CreatePacket(peer);
							pInfo(peer)->onTrade = false;
						}
						return;
					}
					pInfo(peer)->trading_with = pInfo(currentPeer)->netID;
					pInfo(peer)->trade_accept = 0;
					pInfo(currentPeer)->trade_accept = 0;
					gamepacket_t p;
					p.Insert("OnStartTrade");
					p.Insert(pInfo(currentPeer)->tankIDName);
					p.Insert(pInfo(currentPeer)->netID);
					p.CreatePacket(peer);
					if (pInfo(currentPeer)->trading_with != -1) {
						// as neisivaizduoju kdl real gt taip daro bet noriu kad butu kaip rgt.
						gamepacket_t p;
						p.Insert("OnTradeStatus");
						p.Insert(pInfo(peer)->netID);
						p.Insert("");
						p.Insert("`o" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``'s offer.``");
						p.Insert("locked|0\nreset_locks|1\naccepted|0");
						p.CreatePacket(peer);
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(peer)->netID);
							p.Insert("");
							p.Insert("`o" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``'s offer.``");
							p.Insert("locked|0\naccepted|1");
							p.CreatePacket(peer);
						}
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(peer)->netID);
							p.Insert("");
							p.Insert("`o" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``'s offer.``");
							p.Insert("locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(peer);
						}
						{
							gamepacket_t p;
							p.Insert("OnTradeStatus");
							p.Insert(pInfo(currentPeer)->netID);
							p.Insert("");
							p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
							p.Insert(make_trade_offer(pInfo(currentPeer), true) + "locked|0\nreset_locks|1\naccepted|0");
							p.CreatePacket(peer);
							{
								gamepacket_t p;
								p.Insert("OnTradeStatus");
								p.Insert(pInfo(currentPeer)->netID);
								p.Insert("");
								p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
								p.Insert("locked|0\nreset_locks|1\naccepted|0");
								p.CreatePacket(currentPeer);
							}
							{
								gamepacket_t p;
								p.Insert("OnTradeStatus");
								p.Insert(pInfo(currentPeer)->netID);
								p.Insert("");
								p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
								p.Insert("locked|0\naccepted|1");
								p.CreatePacket(currentPeer);
							}
							{
								gamepacket_t p;
								p.Insert("OnTradeStatus");
								p.Insert(pInfo(currentPeer)->netID);
								p.Insert("");
								p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
								p.Insert(make_trade_offer(pInfo(currentPeer), true) + "locked|0\nreset_locks|1\naccepted|0");
								p.CreatePacket(currentPeer);
							}
							{
								gamepacket_t p;
								p.Insert("OnTradeStatus");
								p.Insert(pInfo(peer)->netID);
								p.Insert("");
								p.Insert("`o" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``'s offer.``");
								p.Insert(make_trade_offer(pInfo(peer), true) + "locked|0\nreset_locks|1\naccepted|0");
								p.CreatePacket(currentPeer);
							}
						}
						break;
					}
					packet_(currentPeer, "action|play_sfx\nfile|audio/cash_register.wav\ndelayMS|0");
					{
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`#TRADE ALERT:`` `w" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "```` wants to trade with you!  To start, use the `wWrench`` on that person's wrench icon, or type `w/trade " + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``");
						p.CreatePacket(currentPeer);
					}
					break;
				}
			}
		}
		else if (actual_command.substr(0, 6) == "/kick ") {
			if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
				gamepacket_t p;
				p.Insert("OnTextOverlay");
				p.Insert("Can't `4kick``, is not in a locked area you control!");
				p.CreatePacket(peer);
				return;
			}
			string username = cmd.substr(6, cmd.length() - 6).c_str();
			if (to_lower(pInfo(peer)->tankIDName) == to_lower(username)) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`oYou give yourself a solid boot to the backside. But what did that really accomplish?");
				p.CreatePacket(peer);
				return;
			}
			bool playerFound = false;
			string color = "`o";
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(peer)->world == pInfo(currentPeer)->world) {
					if (to_lower(pInfo(currentPeer)->tankIDName.substr(0, 3)) == to_lower(username) || to_lower(pInfo(currentPeer)->tankIDName) == to_lower(username)) {
						if (not pInfo(currentPeer)->superdev) {
							playerFound = true;
							username = pInfo(currentPeer)->tankIDName;
							if (pInfo(currentPeer)->name_color != "`0") color = pInfo(currentPeer)->name_color;
							SendRespawn(currentPeer, true, 0, 1);
						}
						break;
					}
				}
			}
			if (playerFound) {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(peer)->world == pInfo(currentPeer)->world) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `4kicks`` `o" + color + username + "``!``");
						p.CreatePacket(currentPeer);
					}
				}
			}
			else {
				packet_(peer, "action|log\nmsg| `4Oops: `oThere is nobody currently in this world with a name starting with `w" + username + "`o.", "");
			}
		}
		else if (actual_command == "/kickall") {
			if (pInfo(peer)->last_kickall + 600000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
				pInfo(peer)->last_kickall = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
					gamepacket_t p;
					p.Insert("OnTextOverlay"), p.Insert("Can't `4kick``, is not in a locked area you control!"), p.CreatePacket(peer);
					return;
				}
				gamepacket_t p;
				p.Insert("OnConsoleMessage"), p.Insert("`4(KICKALL ACTIVATED!)``");
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world or pInfo(peer)->tankIDName == pInfo(currentPeer)->tankIDName or pInfo(currentPeer)->dev) continue;
					SendRespawn(currentPeer, true, 0, 1);
					p.CreatePacket(currentPeer);
				}
				p.CreatePacket(peer);
			}
			else {
				gamepacket_t p;
				p.Insert("OnConsoleMessage"), p.Insert("You use `5/kickall`` again in few minutes."), p.CreatePacket(peer);
			}
		}
		else if (actual_command == "/uba") {
			if (world_->owner_name.empty() || world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("You don't have access to the world lock, so you can't unban all!");
				p.CreatePacket(peer);
				return;
			}
			world_->bannedPlayers.clear();
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			p.Insert("CP:_PL:0_OID:_CT:[S]_ You've unbanned everybody from this world.");
			p.CreatePacket(peer);
		}
		else if (actual_command.substr(0, 5) == "/ban ") {
			string name = cmd.substr(5, cmd.length() - 5).c_str();
			if (world_->owner_name.empty() || name == world_->owner_name || world_->owner_name != pInfo(peer)->tankIDName and not world_->owner_name.empty() and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
				gamepacket_t p;
				p.Insert("OnTextOverlay");
				p.Insert("Can't `4world ban``, is not in a world you control!");
				p.CreatePacket(peer);
				return;
			}
			if (to_lower(pInfo(peer)->tankIDName) == to_lower(name)) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`oYou are banned from banning yourself!");
				p.CreatePacket(peer);
				return;
			}
			string color = "`o", named = "";
			bool playerfound = false;
			int found = 0;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
				if (to_lower(pInfo(currentPeer)->tankIDName.substr(0, 3)) == to_lower(name) || to_lower(name) == to_lower(pInfo(currentPeer)->tankIDName)) {
					if (pInfo(currentPeer)->tankIDName == world_->owner_name) {
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("Can't `4world ban``, is not in a world you control!");
						p.CreatePacket(peer);
						return;
					}
					if (not pInfo(currentPeer)->superdev) {
						found++;
						playerfound = true;
						world_->bannedPlayers.push_back(make_pair(pInfo(currentPeer)->tankIDName, (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()));
						if (pInfo(currentPeer)->name_color != "`0") color = pInfo(currentPeer)->name_color;
						named = pInfo(currentPeer)->tankIDName;
						exit_(currentPeer);
					}
					break;
				}
			}
			if (playerfound) {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(peer)->world == pInfo(currentPeer)->world or to_lower(name) == to_lower(pInfo(currentPeer)->tankIDName)) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `4world bans`` " + color + named + "`` from `0" + name_ + "``!");
						p.CreatePacket(currentPeer);
						packet_(currentPeer, "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0");
					}
				}
				gamepacket_t p2;
				p2.Insert("OnConsoleMessage");
				p2.Insert("You've banned " + color + named + "`` from `w" + name_ + "`` for one hour.  You can also type `#/uba`` to unban him/her early.");
				p2.CreatePacket(peer);
			}
			else {
				packet_(peer, "action|log\nmsg| `4Oops: `oThere is nobody currently in this world with a name starting with `w" + name + "`o.", "");
			}
		}
		else if (actual_command.substr(0, 6) == "/pull ") {
			if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
				if (not pInfo(peer)->superdev) {
					gamepacket_t p;
					p.Insert("OnTextOverlay");
					p.Insert("Can't `5pull``, that player is not standing in an area you control!");
					p.CreatePacket(peer);
					return;
				}
			}
			string username = cmd.substr(6, cmd.length() - 6).c_str();
			if (to_lower(pInfo(peer)->tankIDName) == to_lower(username)) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`oOuch!");
				p.CreatePacket(peer);
				return;
			}
			bool playerFound = false;
			string color = "`o";
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(peer)->world == pInfo(currentPeer)->world) {
					if (to_lower(pInfo(currentPeer)->tankIDName.substr(0, 3)) == to_lower(username) || to_lower(pInfo(currentPeer)->tankIDName) == to_lower(username)) {
						if (not pInfo(currentPeer)->superdev) {
							username = pInfo(currentPeer)->tankIDName;
							playerFound = true;
							if (pInfo(currentPeer)->name_color != "`0") color = pInfo(currentPeer)->name_color;
							pInfo(currentPeer)->x = pInfo(peer)->x, pInfo(currentPeer)->y = pInfo(peer)->y;
							gamepacket_t p(0, pInfo(currentPeer)->netID);
							p.Insert("OnSetPos");
							p.Insert(pInfo(peer)->x, pInfo(peer)->y);
							p.CreatePacket(currentPeer);
							{
								gamepacket_t p;
								p.Insert("OnTextOverlay");
								p.Insert("You were pulled by " + pInfo(peer)->tankIDName);
								p.CreatePacket(currentPeer);
							}
						}
						break;
					}
				}
			}
			if (playerFound) {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(peer)->world == pInfo(currentPeer)->world) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` `5pulls`` `o" + color + username + "``!``");
						p.CreatePacket(currentPeer);
						packet_(currentPeer, "action|play_sfx\nfile|audio/teleport.wav\ndelayMS|0");
					}
				}
			}
			else {
				packet_(peer, "action|log\nmsg| `4Oops: `oThere is nobody currently in this world with a name starting with `w" + username + "`o.", "");
			}
		}
		else if (actual_command.substr(0, 5) == "/msg " || actual_command.substr(0, 3) == "/r ") {
			if (has_playmod(pInfo(peer), "duct tape")) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert("`6>> That's sort of hard to do while duct-taped.``");
				p.CreatePacket(peer);
				return;
			}
			string message = "";
			string username = "";
			if (actual_command.substr(0, 5) == "/msg ") {
				if (cmd.substr(5).find(" ") == string::npos) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("Usage: /msg <`$full or first part of a name``> <`$your message``> - This will send a private message to someone anywhere in the universe.  If you don't include a message, you can just see if he/she is online or not.");
					p.CreatePacket(peer);
					return;
				}
				string s = cmd.substr(5);
				stringstream ss(s);
				istream_iterator<string> begin(ss);
				istream_iterator<string> end;
				vector<string> vstrings(begin, end);
				if (vstrings.size() < 1) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("Usage: /msg <`$full or first part of a name``> <`$your message``> - This will send a private message to someone anywhere in the universe.  If you don't include a message, you can just see if he/she is online or not.");
					p.CreatePacket(peer);
					return;
				}
				username = vstrings[0];
				if (username == "") {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("Usage: /msg <`$full or first part of a name``> <`$your message``> - This will send a private message to someone anywhere in the universe.  If you don't include a message, you can just see if he/she is online or not.");
					p.CreatePacket(peer);
					return;
				}
				message = "";
				for (int i = 1; i < vstrings.size(); i++) message = message + vstrings[i] + " ";
			}
			else {
				message = cmd.substr(3, cmd.length() - 3).c_str();
				username = pInfo(peer)->lastmsg;
				if (username == "") {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("Usage: /r <`$your message``> - This will send a private message to the last person who sent you a message. Use /msg to talk to somebody new!");
					p.CreatePacket(peer);
					return;
				}
			}
			bool playerFound = false;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->m_h == 1 or pInfo(currentPeer)->invis == true) continue;
				if (to_lower(pInfo(currentPeer)->tankIDName) == to_lower(username)) {
					playerFound = true;
					if (message.length() < 1) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`6>> `$" + pInfo(currentPeer)->tankIDName + "`` is online now.``");
						p.CreatePacket(peer);
					}
					else {
						bool muted_ = false;
						for (int c_ = 0; c_ < pInfo(peer)->friends.size(); c_++) {
							if (pInfo(peer)->friends[c_].name == pInfo(currentPeer)->tankIDName) {
								if (pInfo(peer)->friends[c_].mute) {
									muted_ = true;
									break;
								}
							}
						}
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							if (pInfo(currentPeer)->mod == 1 || pInfo(currentPeer)->dev == 1) p.Insert("CT:[MSG]_`6>> (Sent to `$" + pInfo(currentPeer)->tankIDName + "``)`o (`4Note: `oMessage a mod `4ONLY ONCE`o about an issue. Mods don't fix scams or replace items, they punish players who break the `5/rules`o.  For issues related to account recovery or purchasing, contact support at `5http://discord.gg/Xoid`o discord server)");
							else {
								if (muted_) {
									p.Insert("CT:[MSG]_`6>> (Sent to `$" + pInfo(currentPeer)->tankIDName + "``)`` (`4Note: ``You can't send messages to people you muted)");
								}
								else {
									p.Insert("CT:[MSG]_`6>> (Sent to `$" + pInfo(currentPeer)->tankIDName + "``)``");
								}
							}
							p.CreatePacket(peer);
						}
						{
							for (int c_ = 0; c_ < pInfo(currentPeer)->friends.size(); c_++) {
								if (pInfo(currentPeer)->friends[c_].name == pInfo(peer)->tankIDName) {
									if (pInfo(currentPeer)->friends[c_].mute) {
										return;
									}
								}
							}
							pInfo(currentPeer)->lastmsg = pInfo(peer)->tankIDName;
							pInfo(currentPeer)->lastmsgworld = pInfo(peer)->world;
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("CP:0_PL:0_OID:_CT:[MSG]_>> `c>> from (```c" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`````c) in [`$" + (pInfo(peer)->m_h || find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? "`4JAMMED!``" : pInfo(peer)->world) + "``] > ```$" + message + "``");
							p.CreatePacket(currentPeer);
							packet_(currentPeer, "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0");
						}
					}
					break;
				}
			}
			if (!playerFound) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				if (username.length() < 5) p.Insert("`6>> `$" + username + "`` is not online right now (you need to enter at least 5 letters if you meant a longer name!).``");
				else p.Insert("`6>> No one online who has a name starting with `$" + username + "``.``");
				p.CreatePacket(peer);
			}
		}
		else if (actual_command.substr(0, 5) == "/gsm " && pInfo(peer)->adminLevel >= 6) {
			string text = cmd.substr(5, cmd.length() - 5).c_str();
			gamepacket_t p;
			p.Insert("OnConsoleMessage"), p.Insert("CP:_PL:0_OID:_CT:[S]_ `o**`` `$Global System Message:`` `4" + text + "``");
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				p.CreatePacket(currentPeer);
			}
		}
		else if (actual_command.substr(0, 4) == "/sb ") {
			if (pInfo(peer)->level < 20) {
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				p.Insert(" >> You must be level 20 to broadcast!");
				p.CreatePacket(peer);
			}
			else {
				if (has_playmod(pInfo(peer), "duct tape")) {
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`6>> That's sort of hard to do while duct-taped.``");
					p.CreatePacket(peer);
					return;
				}
				if (has_playmod(pInfo(peer), "megaphone!")) {
					int time_ = 0;
					for (PlayMods peer_playmod : pInfo(peer)->playmods) {
						if (peer_playmod.id == 13) {
							time_ = peer_playmod.time - time(nullptr);
							break;
						}
					}
					packet_(peer, "action|log\nmsg|>> (" + to_playmod_time(time_) + "before you can broadcast again)", "");
					return;
				}
				int megaphone = 0;
				modify_inventory(peer, 2480, megaphone);
				if (megaphone >= 1 or pInfo(peer)->usedmegaphone) {
					int removemegaphone = -1, megacount = 0;
					if (pInfo(peer)->usedmegaphone == 0) {
						modify_inventory(peer, 2480, removemegaphone);
						gamepacket_t p;
						p.Insert("OnSetBux"), p.Insert(pInfo(peer)->gems), p.Insert(0), p.Insert((pInfo(peer)->supp >= 1) ? 1 : 0);
						if (pInfo(peer)->supp >= 2) p.Insert((float)33796, (float)1, (float)0);
						p.CreatePacket(peer);
					}
					else {
						modify_inventory(peer, 2480, removemegaphone);
						modify_inventory(peer, 2480, megacount);
					}
					PlayMods new_playmod{};
					new_playmod.id = 13, new_playmod.time = time(nullptr) + 300;
					pInfo(peer)->playmods.push_back(new_playmod);
					{
						packet_(peer, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
						gamepacket_t p, p2;
						p.Insert("OnConsoleMessage"), p.Insert("Broadcasting to ALL! (`$Megaphone!`` mod added)"), p.CreatePacket(peer);
						p2.Insert("OnConsoleMessage"), p2.Insert(a + "`#" + (actual_command.substr(0, 4) == "/sb " ? "Super-" : "") + "Broadcast sent. Used `$1 Megaphone`` (10 mins before you can broadcast again)"), p2.CreatePacket(peer);
					}
				}
				else {
					gamepacket_t p;
					p.Insert("OnConsoleMessage"), p.Insert(">> You don't have `$Megaphone``, you can't broadcast a message!"), p.CreatePacket(peer);
					return;
				}
				pInfo(peer)->usedmegaphone = 0;
				string text = cmd.substr(4, cmd.length() - 4).c_str();
				gamepacket_t p;
				p.Insert("OnConsoleMessage");
				if (pInfo(peer)->m_h != 1 and find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) == world_->active_jammers.end()) {
					lastsbworld = pInfo(peer)->world;
				}
				int sentto = 0;
				if (actual_command.substr(0, 4) == "/sb ") p.Insert("CP:_PL:0_OID:_CT:[SB]_ `5** from (`0" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`````5) in [```$" + (pInfo(peer)->m_h == 1 || find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? "`4JAMMED!``" : pInfo(peer)->world) + "```5] ** : ``" + (pInfo(peer)->mod + pInfo(peer)->dev == 0 ? "`$" : "`^") + "" + text + "``");
				else p.Insert("CP:_PL:0_OID:_CT:[BC]_ `p** from (`0" + (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + "`````p) in [```$" + (pInfo(peer)->m_h == 1 || find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? "`4JAMMED!``" : pInfo(peer)->world) + "```p] ** : ``" + (pInfo(peer)->mod + pInfo(peer)->dev == 0 ? "`$" : "`^") + "" + text + "``");
				sbworld.push_back(pInfo(peer)->world);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->radio) continue;
					sentto++;
					packet_(currentPeer, "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0");
					p.CreatePacket(currentPeer);
				}
			}
		}
		else if (actual_command.substr(0, 6) == "/take " && CheckConfigS(server_owner, pInfo(peer)->tankIDName)) {
			vector<string> a_ = explode(" ", cmd);
			if (a_.size() != 3) return;
			if (not isdigit(a_[1][0]) or not isdigit(a_[2][0])) return;
			int i_ = atoi(a_[1].c_str()), c_ = atoi(a_[2].c_str());
			if (i_ <= 0 or c_ <= 0 or i_ >= items.size()) return;
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			if (modify_inventory(peer, i_, c_) == -1) p.Insert("Failed to add inventory item");
			else p.Insert("Collected `w" + a_[2] + " " + items[i_].name + "``." + (items[i_].rarity > 363 ? "" : " Rarity: `w" + to_string(items[i_].rarity) + "``") + "");
			p.CreatePacket(peer);

			string messages = pInfo(peer)->tankIDName + " used /take " + to_string(c_) + " " + items[i_].name;
			ofstream file("logs/take.txt", ios::app);
			if (file.is_open()) {
				auto now = time(nullptr);
				file << "" << getDate() << " " << messages << "\n";
			}
			file.close();
		}
		else if (actual_command.substr(0, 6) == "/drop " && CheckConfigS(glist, pInfo(peer)->tankIDName)) {
			vector<string> a_ = explode(" ", cmd);
			if (a_.size() != 3) return;
			if (not isdigit(a_[1][0]) or not isdigit(a_[2][0])) return;
			int i_ = atoi(a_[1].c_str()), c_ = atoi(a_[2].c_str());
			if (i_ <= 0 or c_ <= 0 or i_ >= items.size()) return;
			gamepacket_t p;
			if (c_ > 100);
			for (int ipp = 0; ipp < c_; ipp++) {
				WorldDrop drop_block_{};
				drop_block_.x = (pInfo(peer)->state == 16 ? pInfo(peer)->x - ((rand() % 12) + 18) : pInfo(peer)->x + ((rand() % 12) + 22)), drop_block_.y = pInfo(peer)->y + rand() % 16, drop_block_.id = i_, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
				dropas_(world_, drop_block_);
				//Sleep(500);
			}
			}
		else if (actual_command.substr(0, 6) == "/give " && pInfo(peer)->adminLevel >= 4) {
			vector<string> a_ = explode(" ", cmd);
			if (a_.size() != 3) return;
			if (not isdigit(a_[1][0]) or not isdigit(a_[2][0])) return;
			int i_ = atoi(a_[1].c_str()), c_ = atoi(a_[2].c_str());
			if (i_ <= 0 or c_ <= 0 or i_ >= items.size()) return;
			if (!CheckConfigS(server_owner, pInfo(peer)->tankIDName)) {
				if (items[i_].name.find("Key") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`4You cannot get this item!");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Seed") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`4You cannot get this item!");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Ances") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`4You cannot get this item!");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Legendary") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`4You cannot get this item!");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Rayman") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`4You cannot get this item!");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Token") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`4You cannot get this item!");
					s.CreatePacket(peer);
					return;
				}
			}
			if (!CheckConfigS(glist, pInfo(peer)->tankIDName)) {
				if (items[i_].name.find("Key") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Playful") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Spray") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Beacon") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Firework") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Megaphone") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Summer") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Mystery") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Gaia") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Unstable") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Inviso") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("MAGPLANT") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Crystal Angel") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("MAGPLANT") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Potion") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Growtoken") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Pot") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Rayman") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Main ") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Seed") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Infused") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Venom") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Ore") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("null_item") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Token") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Gearbox") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Canvas") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Crate") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Cashback") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Dark Stone") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Focus") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find(" Lock") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Phoenix") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (i_ == 8372) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Legendary") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Persia") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Wand") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Calendar") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Rift") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Space") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Tape") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Golden") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Nightmare") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Subscription") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Da Vinci") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Neptune") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Legend") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Julep") != string::npos || items[i_].name.find("Growpeep") != string::npos || items[i_].name.find("Ultraviolet") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
				if (items[i_].name.find("Eagle") != string::npos || items[i_].name.find("Mooncake") != string::npos || items[i_].name.find("WOTD") != string::npos || items[i_].name.find("Growie") != string::npos || items[i_].name.find("Autumn") != string::npos || items[i_].name.find("Blood") != string::npos) {
					gamepacket_t s;
					s.Insert("OnConsoleMessage");
					s.Insert("`8You need Give License for this item.");
					s.CreatePacket(peer);
					return;
				}
			}
			gamepacket_t p;
			p.Insert("OnConsoleMessage");
			if (modify_inventory(peer, i_, c_) == -1) p.Insert("Failed to add inventory item");
			else p.Insert("Collected `w" + a_[2] + " " + items[i_].name + "``." + (items[i_].rarity > 363 ? "" : " Rarity: `w" + to_string(items[i_].rarity) + "``") + "");
			p.CreatePacket(peer);


			string messages = pInfo(peer)->tankIDName + " used /give " + to_string(c_) + " " + items[i_].name;
			ofstream file("logs/give.txt", ios::app);
			if (file.is_open()) {
				auto now = time(nullptr);
				file << "" << getDate() << " " << messages << "\n";
			}
			file.close();
		}
		else if (actual_command == "/dance" || actual_command == "/sad" || actual_command == "/wave" || actual_command == "/lol" || actual_command == "/love" || actual_command == "/sleep" || actual_command == "/wink" || actual_command == "/troll" || actual_command == "/cheer" || actual_command == "/fa" || actual_command == "/furious" || actual_command == "/dab" || actual_command == "/dance2" || actual_command == "/cheer" || actual_command == "/laugh" || actual_command == "/cry" || actual_command == "/mad" || actual_command == "/shower" || actual_command == "/rolleyes" || actual_command == "/omg" || actual_command == "/yes" || actual_command == "/idk" || actual_command == "/fold" || actual_command == "/no" || actual_command == "/sassy" || actual_command == "/fp" || actual_command == "/troll" || actual_command == "/facepalm" || actual_command == "/foldarms" || actual_command == "/stubborn" || actual_command == "/grumpy" || actual_command == "/shy" || actual_command == "/smh") {
			if (actual_command == "/cry") {
				gamepacket_t p;
				p.Insert("OnTalkBubble");
				p.Insert(pInfo(peer)->netID);
				p.Insert(":'(");
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(peer)->world) {
						p.CreatePacket(currentPeer);
					}
				}
			}
			else {
				gamepacket_t p(0, pInfo(peer)->netID);
				p.Insert("OnAction");
				p.Insert(actual_command);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(peer)->world) {
						bool muted_ = false;
						for (int c_ = 0; c_ < pInfo(currentPeer)->friends.size(); c_++) {
							if (pInfo(currentPeer)->friends[c_].name == pInfo(peer)->tankIDName) {
								if (pInfo(currentPeer)->friends[c_].mute) {
									muted_ = true;
									break;
								}
							}
						}
						if (not muted_)
							p.CreatePacket(currentPeer);
					}
				}
			}
		}
	}
	else packet_(peer, "action|log\nmsg|`4Unknown command.`` Enter `$/?`` for a list of valid commands.");
}

bool trade_space_check(ENetPeer* peer, ENetPeer* currentPeer) {
	int slots_needed = int(pInfo(currentPeer)->trade_items.size());
	for (int i_ = 0; i_ < pInfo(currentPeer)->trade_items.size(); i_++) {
		map<string, int>::iterator it;
		for (auto it = pInfo(currentPeer)->trade_items[i_].begin(); it != pInfo(currentPeer)->trade_items[i_].end(); it++) {
			int c_ = 0;
			modify_inventory(peer, it->first, c_);
			if (c_ != 0) {
				if (c_ + it->second > 200) {
					gamepacket_t p;
					p.Insert("OnTextOverlay");
					p.Insert("`4Oops - " + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` is carrying too many " + items[it->first].name + " and can't fit that many in their backpack.");
					p.CreatePacket(peer), p.CreatePacket(currentPeer);
					return false;
				}
				slots_needed--;
			}
		}
	}
	int free_slots = get_free_slots(pInfo(peer));
	if (free_slots < slots_needed) {
		gamepacket_t p;
		p.Insert("OnTextOverlay");
		p.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` needs more backpack room first!");
		p.CreatePacket(peer), p.CreatePacket(currentPeer);
		return false;
	}
	return true;
}
int get_wls(ENetPeer* peer) {
	int my_wls = 0;
	int c_ = 0;
	modify_inventory(peer, 242, c_);
	my_wls += c_;
	c_ = 0;
	modify_inventory(peer, 1796, c_);
	my_wls += c_ * 100;
	return my_wls;
}
string get_sucker(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	if (block_->id == 0) {
		return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|`6The machine is empty.``|left|\nadd_item_picker|selectitem|`wChoose Item``|Choose an item to put in the " + items[block_->fg].name + "!|\nend_dialog|itemsucker_block|Close||";
	}
	bool ar_turi = false;
	int c_ = 0;
	if (block_->id != 0) {
		modify_inventory(peer, block_->id, c_);
		if (c_ != 0) {
			ar_turi = true;
		}
	}
	bool ar_turi_mag = false;
	{
		int c_ = 0;
		if (block_->id != 0) {
			modify_inventory(peer, 5640, c_);
			if (c_ != 0) {
				if (pInfo(peer)->magnetron_x == x_ and pInfo(peer)->magnetron_y == y_ and pInfo(peer)->magnetron_id == block_->id) {
					ar_turi_mag = true;
				}
			}
		}
	}
	bool dont_give = false;
	if (items[block_->id].collisionType != 1 and items[block_->id].blockType != BACKGROUND and items[block_->id].blockType != SEED and not items[block_->id].farmable or items[block_->id].rarity == 999) {
		dont_give = true;
	}
	string alalala = (block_->magnetron ? "`5ACTIVE" : "`6DISABLED");
	return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label_with_icon|small|`2" + items[block_->id].name + "``|left|" + to_string(block_->id) + "|" + (block_->pr == 0 ? "\nadd_textbox|`6The machine is currently empty!``|left|" : "\nadd_textbox|The machine contains " + to_string(block_->pr) + " `2" + items[block_->id].ori_name + "``|left|") + (ar_turi ? (block_->pr >= (block_->fg == 5638 ? 5000 : 1500) ? "\nadd_smalltext|`4The machine is at maximum capacity!``|left|" : "\nadd_button|additem|Add Items to the machine|noflags|0|0|") : (block_->pr >= (block_->fg == 5638 ? 5000 : 1500) ? "\nadd_smalltext|`4The machine is at maximum capacity!``|left|" : "")) + (block_->pr != 0 ? (c_ == 200 ? "\nadd_textbox|`6You are already carrying 200 " + items[block_->id].name + "!``|left|" : "\nadd_button|retrieveitem|Retrieve Item|noflags|0|0|") : "\nadd_button|clearitem|Change Item|noflags|0|0|") + (block_->fg == 5638 ? "\nadd_textbox|Building mode: " + alalala + "``|left|" : "") + (block_->fg == 5638 ? "\nadd_textbox|Use the " + items[5640].name + " to build `2" + items[block_->id].name + "`` directly from the " + items[block_->fg].name + "'s storage.|left|" : "") + (block_->fg == 5638 and not ar_turi_mag and not dont_give ? "\nadd_button|getplantationdevice|Get Remote|noflags|0|0|" : "") + "\nadd_checkbox|chk_enablesucking|Enable Collection.|" + (block_->enabled ? "1" : "0") + "\nend_dialog|itemsucker_block|Close|Update|";
}
bool not_mod(WorldBlock block_, int x_, int y_) {
	if (x_ < 0 or x_ >= 100 or y_ >= 60 or y_ < 0 or block_.locked or items[block_.fg].blockType == LOCK) {
		return false;
	} if (block_.fg == 0) return true;
	if (items[block_.fg].properties & Property_Mod) {
		return false;
	}
	return true;
}
string get_vending(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	int c_ = 0;
	string ex_ = "";
	if (block_->id != 0) {
		modify_inventory(peer, block_->id, c_);
		if (c_ != 0 && block_->c_ < (block_->fg == 2978 ? 5199 : 9999)) ex_ = "\nadd_smalltext|You have " + to_string(c_) + " " + items[block_->id].ori_name + " in your backpack.|\nadd_button|addstock|Add them to the machine|noflags|0|0|";
	}
	string a_ = (block_->pr < 0 and (block_->pr * -1 > block_->c_) ? "\nadd_smalltext|`4(You need to add more items or people can't purchase at this price!)``|left|" : "");
	return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "" + (block_->id == 0 ? "\nadd_textbox|This machine is empty.|left|\nadd_item_picker|stockitem|`wPut an item in``|Choose an item to put in the machine!|" : "\nadd_label_with_icon|sml|The machine contains a total of " + to_string(block_->c_) + " `2" + items[block_->id].ori_name + +"``. |left|" + to_string(block_->id) + "|") + (block_->pr == 0 ? (block_->id != 0 ? "\nadd_spacer|small|\nadd_textbox|Not currently for sale!|left|" + ex_ + "\nadd_button|pullstock|Empty the machine|noflags|0|0|" : "") : "\nadd_spacer|small|\nadd_textbox|For a cost of:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? "1" : to_string(block_->pr)) + " x `8World Lock``|left|242|\nadd_spacer|small|\nadd_textbox|You will get:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? to_string(block_->pr * -1) : "1") + " x `2" + items[block_->id].ori_name + "``|left|" + to_string(block_->id) + "|\nadd_spacer|small|" + ex_ + "\nadd_button|pullstock|Empty the machine|noflags|0|0|") + (block_->id != 0 ? "" + a_ + "\nadd_smalltext|`5(" + items[block_->fg].name + " will not function when price is set to 0)``|left|\nadd_text_input|setprice|Price|" + (block_->pr < 0 ? to_string(block_->pr * -1) : to_string(block_->pr)) + "|5|\nadd_checkbox|chk_peritem|World Locks per Item|" + (block_->pr >= 0 ? "1" : "0") + "\nadd_checkbox|chk_perlock|Items per World Lock|" + (block_->pr < 0 ? "1" : "0") + "" : "") + (block_->wl != 0 ? "\nadd_smalltext|You have earned " + to_string(block_->wl) + " World Locks.|left|\nadd_button|withdraw|Withdraw World Locks|noflags|0|0|" : "") + "" + (block_->fg == 2978 ? "\nadd_smalltext|Upgrade to a DigiVend Machine for `44,000 Gems``.|left|\nadd_button|upgradedigital|Upgrade to DigiVend|noflags|0|0|" : "") + "\nadd_spacer|small|\nend_dialog|vending|Close|" + (block_->id != 0 ? "Update" : "") + "|";
}
string get_vending_buyer_side(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_) {
	return "set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "" + (block_->id == 0 or block_->pr == 0 ? "\nadd_textbox|This machine is out of order.|left|\nend_dialog|vending|Close||" : "\nadd_label_with_icon|sml|The machine contains a total of " + to_string(block_->c_) + " `2" + items[block_->id].ori_name + "``. |left|" + to_string(block_->id) + "|\nadd_spacer|small|\nadd_textbox|For a cost of:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? "1" : to_string(block_->pr)) + " x `8World Lock``|left|242|\nadd_spacer|small|\nadd_textbox|You will get:|left|\nadd_label_with_icon|small|" + (block_->pr < 0 ? to_string(block_->pr * -1) : "1") + " x `2" + items[block_->id].ori_name + "``|left|" + to_string(block_->id) + "|\nadd_spacer|small|" + (block_->pr < 0 and (block_->pr * -1 > block_->c_) ? "\nadd_textbox|You'll need to wait for the owner to stock up to at least 1 World Lock's worth before you can buy.|left|\nend_dialog|vending|Close||" : "\nadd_textbox|You have " + to_string(get_wls(peer)) + " World Locks.|left|\nadd_text_input|buycount|How many would you like to buy?|0|3|\nembed_data|expectprice|" + to_string(block_->pr) + "\nembed_data|expectitem|" + to_string(block_->id) + "\nend_dialog|vending|Close|Buy|"));
}
uint16_t get_weather_id(uint32_t block_id) {
	switch (block_id) {
	case 3694: {
		return 28;
	}
	case 3832: {
		return 29;
	}
	case 5000: {
		return 34;
	}
	case 5958: {
		return 40;
	}
	case 1490: {
		return 10;
	}
	case 934: {
		return 2;
	}
	case 946: {
		return 3;
	}
	case 932: {
		return 4;
	}
	case 984: {
		return 5;
	}
	case 1210: {
		return 8;
	}
	case 1364: {
		return 11;
	}
	case 1750: {
		return 15;
	}
	case 2046: {
		return 17;
	}
	case 2284: {
		return 18;
	}
	case 2744: {
		return 19;
	}
	case 3252: {
		return 20;
	}
	case 3446: {
		return 21;
	}
	case 3534: {
		return 22;
	}
	case 4242: {
		return 30;
	}
	case 4486: {
		return 31;
	}
	case 4776: {
		return 32;
	}
	case 4892: {
		return 33;
	}
	case 5112: {
		return 35;
	}
	case 5654: {
		return 36;
	}
	case 5716: {
		return 37;
	}
	case 6854: {
		return 42;
	}
	case 7644: {
		return 44;
	}
	case 12054: {
		return 60;
	}
	case 12056: {
		return 61;
	}
	case 8896: {
		return 47;
	}
	case 8836: {
		return 48;
	}
	case 10286: {
		return 51;
	}
	case 11880: {
		return 59;
	}
	case 12408: {
		return 62;
	}
	case 12844: {
		return 64;
	}
	case 13004: {
		return 65;
	}
	case 13070: {
		return 66;
	}
	}
	return 0;
}
bool is_false_state(WorldBlock block_, int t_) {
	if (items[block_.fg].collisionType == 0) return false;
	if (items[block_.fg].collisionType == 1) {
		return true;
	}
	if (block_.flags & t_) {
		return false;
	}
	return true;
}
vector<vector<int>> lock_tiles(World* w_, int st_x, int st_y, int lock_size) {
	try {
		int layer_ = 0;
		int og_lock_size = lock_size;
		vector<vector<int>> new_tiles{};
		vector<vector<int>> new_lock{};
		if (w_->blocks.at(st_x + (st_y * 100)).locked) {
			return new_lock;
		}
		if (st_x - 1 > 0) {
			new_tiles.push_back({ st_x - 1 + (st_y * 100), 1 });
			if (not_mod(w_->blocks.at(st_x - 1 + (st_y * 100)), st_x - 1, st_y)) new_lock.push_back({ st_x - 1, st_y });
		}
		if (st_y - 1 > 0) {
			new_tiles.push_back({ st_x + ((st_y - 1) * 100), 2 });
			if (not_mod(w_->blocks.at(st_x + ((st_y - 1) * 100)), st_x, st_y - 1)) new_lock.push_back({ st_x, st_y - 1 });
		}
		if (st_x + 1 < 100) {
			new_tiles.push_back({ st_x + 1 + (st_y * 100), 3 });
			if (not_mod(w_->blocks.at(st_x + 1 + (st_y * 100)), st_x + 1, st_y)) new_lock.push_back({ st_x + 1, st_y });
		}
		if (st_y + 1 < 60) {
			new_tiles.push_back({ st_x + ((st_y + 1) * 100), 4 });
			if (not_mod(w_->blocks.at(st_x + ((st_y + 1) * 100)), st_x, st_y + 1)) new_lock.push_back({ st_x, st_y + 1 });
		}
		int ySize = w_->blocks.size() / 100, xSize = w_->blocks.size() / ySize;
		int max_up = 0;
		int max_down = 0;
		int max_right = 0;
		int max_left = 0;
		vector<WorldBlock> shadow_copy = w_->blocks;
		for (int i_ = 0; i_ < new_tiles.size(); i_++) {
			if (new_lock.size() >= og_lock_size) {
				break;
			}
			vector<int> test__ = new_tiles.at(i_);
			int x_ = test__.at(0) % 100, y_ = test__.at(0) / 100;
			int where_ = test__.at(1);
			if (where_ == 1) {
				if (y_ - 1 < 0) {
				}
				else {
					if (not shadow_copy.at(x_ + ((y_ - 1) * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ + ((y_ - 1) * 100)), x_, y_ - 1)) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_up != 0 and y_ > max_up + 1 and y_ - 1 > 0) {
								new_tiles.push_back({ x_ + ((y_ - 1) * 100), 1 });
							}
							new_lock.push_back({ x_, y_ - 1 });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_up != 0 and y_ > max_up + 1 and y_ - 1 > 0) {
								new_tiles.push_back({ x_ + ((y_ - 1) * 100), 1 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}
			}
			if (where_ == 2) {
				if (x_ + 1 > 100) {

				}
				else {
					if (not shadow_copy.at(x_ + 1 + (y_ * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ + 1 + (y_ * 100)), x_ + 1, y_)) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_left != 0 and x_ < max_left - 1 and x_ + 1 < 100) {
								new_tiles.push_back({ x_ + 1 + (y_ * 100), 2 });
							}
							new_lock.push_back({ x_ + 1, y_ });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_left != 0 and x_ < max_left - 1 and x_ + 1 < 100) {
								new_tiles.push_back({ x_ + 1 + (y_ * 100), 2 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}

			}
			if (where_ == 3) {
				if (y_ + 1 > 60) {

				}
				else {
					if (not shadow_copy.at(x_ + ((y_ + 1) * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ + ((y_ + 1) * 100)), x_, y_ + 1)) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_down != 0 and y_ < max_down - 1 and y_ + 1 < 60) {
								new_tiles.push_back({ x_ + ((y_ + 1) * 100), 3 });
							}
							new_lock.push_back({ x_, y_ + 1 });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_down != 0 and y_ < max_down - 1 and y_ + 1 < 60) {
								new_tiles.push_back({ x_ + ((y_ + 1) * 100), 3 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}

			}
			if (where_ == 4) {
				if (x_ - 1 < 0) {
				}
				else {
					if (not shadow_copy.at(x_ - 1 + (y_ * 100)).scanned) {
						if (not_mod(shadow_copy.at(x_ - 1 + (y_ * 100)), x_ - 1, y_)) {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_right != 0 and x_ > max_right + 1 and x_ - 1 > 0) {
								new_tiles.push_back({ x_ - 1 + (y_ * 100), 4 });
							}
							new_lock.push_back({ x_ - 1, y_ });
							if (new_lock.size() >= og_lock_size) {
								break;
							}
						}
						else {
							shadow_copy.at(x_ + (y_ * 100)).scanned = true;
							if (max_right != 0 and x_ > max_right + 1 and x_ - 1 > 0) {
								new_tiles.push_back({ x_ - 1 + (y_ * 100), 4 });
								if (new_lock.size() >= og_lock_size) {
									break;
								}
							}
							lock_size++;
						}
					}
				}

			}
			if (i_ == new_tiles.size() - 1) {
				layer_++;
				if (og_lock_size <= 10 or lock_size - new_lock.size() <= 5) layer_ = 0;
				int t_ = 1;
				if (st_x - t_ < 0) {
					//lock_size++;

				}
				else {
					while (shadow_copy.at(st_x - t_ + (st_y * 100)).scanned) {
						t_++;
						if (st_x - t_ < 0) {
							break;
						}
						else {
							if (not shadow_copy.at(st_x - t_ + (st_y * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x - t_ + ((st_y + layer_) * 100)), st_x - t_, st_y + layer_)) {
									max_right = st_x - t_;
									new_tiles.push_back({ st_x - t_ + ((st_y + layer_) * 100), 1 });
									new_lock.push_back({ st_x - t_, (st_y + layer_) });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									max_right = st_x - t_;
									new_tiles.push_back({ st_x - t_ + ((st_y + layer_) * 100), 1 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
				t_ = 1;
				if (st_y - t_ < 0) {
					//lock_size++;

				}
				else {
					while (shadow_copy.at(st_x + ((st_y - t_) * 100)).scanned) {
						t_++;
						if (st_y - t_ < 0) {
							break;
						}
						else {
							if (not shadow_copy.at(st_x + ((st_y - t_) * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x - layer_ + ((st_y - t_) * 100)), st_x - layer_, st_y - t_)) {
									max_up = st_y - t_;
									new_tiles.push_back({ st_x - layer_ + ((st_y - t_) * 100), 2 });
									new_lock.push_back({ st_x - layer_, st_y - t_ });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									max_up = st_y - t_;
									new_tiles.push_back({ st_x - layer_ + ((st_y - t_) * 100), 2 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
				t_ = 1;
				if (st_x + t_ > 100) {

				}
				else {
					while (shadow_copy.at(st_x + t_ + (st_y * 100)).scanned) {
						t_++;
						if (st_x + t_ > 100) {
							break;
						}
						else {
							if (st_y - layer_ < 0) layer_ = 0;
							if (not shadow_copy.at(st_x + t_ + (st_y * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x + t_ + ((st_y - layer_) * 100)), st_x + t_, st_y - layer_)) {
									max_left = st_x + t_;
									new_tiles.push_back({ st_x + t_ + ((st_y - layer_) * 100), 3 });
									new_lock.push_back({ st_x + t_, st_y - layer_ });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									max_left = st_x + t_;
									new_tiles.push_back({ st_x + t_ + ((st_y - layer_) * 100), 3 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
				t_ = 1;
				if (st_y + t_ > 60) {

				}
				else {
					while (shadow_copy.at(st_x + ((st_y + t_) * 100)).scanned) {
						t_++;
						if (st_y + t_ > 60) {
							break;
						}
						else {
							if (not shadow_copy.at(st_x + ((st_y + t_) * 100)).scanned) {
								if (not_mod(shadow_copy.at(st_x + layer_ + ((st_y + t_) * 100)), st_x + layer_, st_y + t_)) {
									max_down = st_y + t_;
									new_tiles.push_back({ st_x + layer_ + ((st_y + t_) * 100), 4 });
									new_lock.push_back({ st_x + layer_, st_y + t_ });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
								}
								else {
									max_down = st_y + t_;
									new_tiles.push_back({ st_x + layer_ + ((st_y + t_) * 100), 4 });
									if (new_lock.size() >= og_lock_size) {
										break;
									}
									lock_size++;
								}
								break;
							}
						}
					}
				}
			}
		}
		if (new_lock.size() > og_lock_size) {
			int fix_size = (new_lock.size() - og_lock_size);
			for (int i_ = 0; i_ < fix_size; i_++) {
				new_lock.pop_back();
			}
		} vector<int> erase_later{};
		vector<WorldBlock> shadow_copy_2 = w_->blocks;
		for (int i_ = 0; i_ < new_lock.size(); i_++) {
			vector<int> asd_ = new_lock.at(i_);
			shadow_copy_2.at(asd_.at(0) + (asd_.at(1) * 100)).locked = true;
			shadow_copy_2.at(asd_.at(0) + (asd_.at(1) * 100)).lock_origin = (st_x + (st_y * 100));
		}
		WorldBlock target_to_reach = shadow_copy_2.at(st_x + (st_y * 100)); // og coordinatess
		for (int i_ = 0; i_ < new_lock.size(); i_++) {
			vector<int> asd_ = new_lock.at(i_);
			vector<int> new_tiles{};
			new_tiles.push_back(asd_.at(0) + (asd_.at(1) * 100));
			int ySize = w_->blocks.size() / 100, xSize = w_->blocks.size() / ySize;
			bool reachable = false;
			vector<vector<int>> after_process{};
			for (int i2 = 0; i2 < new_tiles.size(); i2++) {
				int x_ = new_tiles.at(i2) % 100, y_ = new_tiles.at(i2) / 100;
				if ((x_ + (y_ * 100)) == st_x + (st_y * 100) or (x_ + 1 + (y_ * 100)) == st_x + (st_y * 100) or (x_ - 1 + (y_ * 100)) == st_x + (st_y * 100) or (x_ + ((y_ + 1) * 100)) == st_x + (st_y * 100) or (x_ + ((y_ - 1) * 100)) == st_x + (st_y * 100)) {
					reachable = true;
				} if (x_ < 99 and shadow_copy_2.at(x_ + 1 + (y_ * 100)).locked and shadow_copy_2.at(x_ + 1 + (y_ * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ + 1 + (y_ * 100)).scanned) {
						shadow_copy_2.at(x_ + 1 + (y_ * 100)).scanned = true;
						after_process.push_back({ x_ + 1, y_ });
						new_tiles.push_back(x_ + 1 + (y_ * 100));
					}
				} if (x_ > 0 and shadow_copy_2.at(x_ - 1 + (y_ * 100)).locked and shadow_copy_2.at(x_ - 1 + (y_ * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ - 1 + (y_ * 100)).scanned) {
						shadow_copy_2.at(x_ - 1 + (y_ * 100)).scanned = true;
						after_process.push_back({ x_ - 1, y_ });
						new_tiles.push_back(x_ - 1 + (y_ * 100));
					}
				} if (y_ < 59 and shadow_copy_2.at(x_ + ((y_ + 1) * 100)).locked and shadow_copy_2.at(x_ + ((y_ + 1) * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ + ((y_ + 1) * 100)).scanned) {
						shadow_copy_2.at(x_ + ((y_ + 1) * 100)).scanned = true;
						after_process.push_back({ x_, y_ + 1 });
						new_tiles.push_back(x_ + ((y_ + 1) * 100));
					}
				} if (y_ > 0 and shadow_copy_2.at(x_ + ((y_ - 1) * 100)).locked and shadow_copy_2.at(x_ + ((y_ - 1) * 100)).lock_origin == (st_x + (st_y * 100))) {
					if (not shadow_copy_2.at(x_ + ((y_ - 1) * 100)).scanned) {
						shadow_copy_2.at(x_ + ((y_ - 1) * 100)).scanned = true;
						after_process.push_back({ x_, y_ - 1 });
						new_tiles.push_back(x_ + ((y_ - 1) * 100));
					}
				}
			}
			for (vector<int> cleanup : after_process) {
				shadow_copy_2.at(cleanup.at(0) + ((cleanup.at(1)) * 100)).scanned = false;
			}
			if (not reachable) {
				erase_later.push_back(i_);
			}
		}
		int er_ = 0;
		for (int a_ : erase_later) {
			int aa = a_ - er_;
			new_lock.erase(new_lock.begin() + aa);
			er_++;
		} return new_lock;
	}
	catch (out_of_range) {
		vector<vector<int>> asd{};
		return asd;
	}
}



void send_edit_lock(ENetPeer* peer, World* world_, int t_, int x_, int y_) {
	uint32_t guild_id = world_->guild_id;
	vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
	if (p != guilds.end()) {
		string access_list_ = "";
		for (int i_ = 0; i_ < world_->admins.size(); i_++) {
			access_list_ += "\nadd_checkbox|checkbox_/" + world_->admins[i_] + "|`w" + world_->admins[i_] + "``|1";
		}
		if (access_list_.empty()) access_list_ = "\nadd_label|small|Currently, you're the only one with access.``|left";
		Guild* guild_information = &guilds[p - guilds.begin()];
		string guild_key = "\nadd_button|getKey|Get Guild Key|noflags|0|0|";
		string guild_upg = "";
		string guild_mas = "\nadd_textbox|Increase your guild level to `w3`` or more and you can set a guild mascot!|left|";
		int c_ = 0;
		modify_inventory(peer, 5816, c_);
		if (c_ != 0) {
			guild_key = "";
		}
		if (guild_information->guild_level == 1 and guild_information->guild_xp >= 405000) {
			guild_upg = "\nadd_button|upg2|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `2200000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 2 and guild_information->guild_xp >= 1215000) {
			guild_upg = "\nadd_button|upg3|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `2300000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 3 and guild_information->guild_xp >= 2430000) {
			guild_upg = "\nadd_button|upg4|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `2400000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 4 and guild_information->guild_xp >= 4050000) {
			guild_upg = "\nadd_button|upg5|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `2500000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 5 and guild_information->guild_xp >= 7290000) {
			guild_upg = "\nadd_button|upg6|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `21000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 6 and guild_information->guild_xp >= 11430000) {
			guild_upg = "\nadd_button|upg7|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `22000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 7 and guild_information->guild_xp >= 16200000) {
			guild_upg = "\nadd_button|upg8|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `23000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 8 and guild_information->guild_xp >= 21870000) {
			guild_upg = "\nadd_button|upg9|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `24000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 9 and guild_information->guild_xp >= 28350000) {
			guild_upg = "\nadd_button|upg10|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `25000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 10 and guild_information->guild_xp >= 38700000) {
			guild_upg = "\nadd_button|upg11|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost:`26000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 11 and guild_information->guild_xp >= 48600000) {
			guild_upg = "\nadd_button|upg12|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `28000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 12 and guild_information->guild_xp >= 60547500) {
			guild_upg = "\nadd_button|upg13|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `29000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 13 and guild_information->guild_xp >= 73710000) {
			guild_upg = "\nadd_button|upg14|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `210000000 Gems|left|\nadd_spacer|small|";
		}
		if (guild_information->guild_level == 14 and guild_information->guild_xp >= 91125000) {
			guild_upg = "\nadd_button|upg15|Upgrade Guild|noflags|0|0|\nadd_label|small|`0Cost: `215000000 Gems|left|\nadd_spacer|small|";
		}
		//create_guild_mascot
		if (guild_information->guild_level >= 3) guild_mas = "\nadd_button|create_guild_mascot|`0Change Guild Mascot|noflags|0|0|";
		gamepacket_t p;
		p.Insert("OnDialogRequest");
		p.Insert("add_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_player_info|" + guild_information->guild_name + " | " + to_string(guild_information->guild_level) + "|" + to_string(guild_information->guild_xp) + "|" + to_string(guild_lvl[guild_information->guild_level - 1][0]) + "|\nadd_spacer|small|" + guild_upg + "\nadd_textbox|`wManage Guild Member access:``|left|\nadd_checkbox|checkbox_coleader|Enable Co-Leader access|" + (guild_information->coleader_access ? "1" : "0") + "\nadd_checkbox|checkbox_elder|Enable Co-Leader and Elder access|" + (guild_information->coleader_elder_access ? "1" : "0") + "\nadd_checkbox|checkbox_member|Enable all Members access|" + (guild_information->all_access ? "1" : "0") + "\nadd_spacer|small|" + (guild_information->all_access ? "\nadd_label|small|`2All guild members have access.``|left" : (guild_information->coleader_elder_access ? "\nadd_label|small|`2Guild Co-Leaders and Elders have access.``|left" : (guild_information->coleader_access ? "\nadd_label|small|`2Guild Co-Leaders have access.``|left" : ""))) + "\nadd_spacer|small|\nadd_label|small|`wAccess List:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_spacer|small|" + guild_mas + "\nadd_spacer|small|\nadd_checkbox|checkbox_displaymascot|Display Guild Mascot on the Guild Lock|" + (guild_information->unlocked_mascot == 1 ? "1" : "0") + "\nadd_checkbox|checkbox_public|Allow anyone to build|" + (world_->open_to_public ? "1" : "0") + "\nadd_checkbox|checkbox_disable_music|Disable Custom Music Blocks|" + (world_->disable_music_blocks ? "1" : "0") + "\nadd_text_input|tempo|Music BPM|" + to_string(world_->music_bpm) + "|3|\nadd_checkbox|checkbox_disable_music_render|Make Custom Music Blocks invisible|" + (world_->make_music_blocks_invisible ? "1" : "0") + (not pInfo(peer)->home_world.empty() ? "\nadd_smalltext|Your current home world is: " + pInfo(peer)->home_world + "|left|" : "") + "\nadd_checkbox|checkbox_set_as_home_world|Set as Home World|" + (pInfo(peer)->home_world == world_->name ? "1" : "0") + "|\nadd_text_input|minimum_entry_level|World Level: |" + to_string(world_->entry_level) + "|3|\nadd_smalltext|Set minimum world entry level.|\nadd_button|sessionlength_dialog|`wSet World Timer``|noflags|0|0|\nadd_spacer|small|\nadd_button|changecat|`wCategory: None``|noflags|0|0|" + guild_key + "\nadd_button|abondonguildconfirm|`wAbandon Guild``|noflags|0|0|" + (pInfo(peer)->mod == 1 || pInfo(peer)->dev == 1 ? "\nadd_smalltext|`4----------- SMOD Tools -----------``|left|\nadd_smalltext|Is Xbox live exclusive 0|left|\nadd_button|dviallain|defeat viallain.|noflags|0|0|" : "") + "\nend_dialog|editguildlock|Cancel|OK|\nadd_quick_exit|");
		p.CreatePacket(peer);
	}
}
void reset_(WorldBlock* block_, int x_, int y_, World* world_) {
	for (int i_ = 0; i_ < world_->machines.size(); i_++) {
		if (world_->machines[i_].x == x_ and world_->machines[i_].y == y_) {
			world_->machines.erase(world_->machines.begin() + i_);
			break;
		}
	}
	if (items[block_->fg].blockType == BlockTypes::BULLETIN_BOARD || items[block_->fg].blockType == BlockTypes::MAILBOX) {
		for (int i_ = 0; i_ < world_->bulletin.size(); i_++) {
			if (world_->bulletin[i_].x == x_ and world_->bulletin[i_].y == y_) {
				world_->bulletin.erase(world_->bulletin.begin() + i_);
				i_--;
			}
		}
		for (int i_ = 0; i_ < world_->bulletins.size(); i_++) {
			if (world_->bulletins[i_].x == x_ and world_->bulletins[i_].y == y_) {
				world_->bulletins.erase(world_->bulletins.begin() + i_);
				i_--;
			}
		}
	}
	if (block_->fg == 6016) {
		for (int i_ = 0; i_ < world_->gscan.size(); i_++) {
			if (world_->gscan[i_].x == x_ and world_->gscan[i_].y == y_) {
				world_->gscan.erase(world_->gscan.begin() + i_);
				i_--;
			}
		}
	}
	if (block_->fg == 8246 || block_->fg == 10258 || block_->fg == 1436) {
		for (int i_ = 0; i_ < world_->cctv_settings.size(); i_++) {
			if (world_->cctv_settings[i_].x == x_ and world_->cctv_settings[i_].y == y_) {
				world_->cctv_settings.erase(world_->cctv_settings.begin() + i_);
				i_--;
			}
		}
		for (int i_ = 0; i_ < world_->cctv.size(); i_++) {
			if (world_->cctv[i_].x == x_ and world_->cctv[i_].y == y_) {
				world_->cctv.erase(world_->cctv.begin() + i_);
				i_--;
			}
		}
	}
	if (block_->fg == 2646) {
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or world_->name != pInfo(currentPeer)->world or block_->spotlight != pInfo(currentPeer)->tankIDName) continue;
			pInfo(currentPeer)->spotlight = false, update_clothes(currentPeer);
			gamepacket_t p, p2;
			p.Insert("OnConsoleMessage"), p.Insert("Back to anonymity. (`$In the Spotlight`` mod removed)"), p.CreatePacket(currentPeer);
			p2.Insert("OnTalkBubble"), p2.Insert(pInfo(currentPeer)->netID), p2.Insert("Lights out!"), p2.CreatePacket(currentPeer);
		}
	}
	if (block_->fg == 0) block_->bg = 0;
	else block_->fg = 0;
	block_->id = 0, block_->hp = -1, block_->planted = 0, block_->fruit = 1, block_->sp = 0, block_->txt = "";
	block_->wl = 0, block_->pr = 0, block_->c_ = 0;
	block_->door_destination = "", block_->door_id = "", block_->open = true;
	block_->flags = 0x00000000;
	block_->last_punch_weather = 0;
	block_->projectile_speed = 100, block_->rate_of_fire = 10;
	block_->enabled = false;
	block_->invert = false, block_->spin = false, block_->gravity = 50;
	block_->magnetron = false;
	block_->open_to_public = false;
	block_->empty_air = false;
	block_->admins.clear();
	block_->owner_name = "";
	block_->build_only = false;
	block_->limit_admins = false;
	block_->crystals.clear();
	block_->r = 255;
	block_->g = 128;
	block_->b = 64;
	block_->portrait.c_expression = 1;
	block_->portrait.c_face = 0;
	block_->portrait.c_hair = 0;
	block_->portrait.c_hair_colour = 0;
	block_->portrait.c_head = 0;
	block_->portrait.c_skin = 0;
	block_->bunny_egg_progress = 0;
	block_->heart_monitor = "";
	block_->spotlight = "";
}
void call_dialog(ENetPeer* p_, string cch) {
	if (pInfo(p_)->trading_with != -1 and cch.find("trade_") == string::npos) {
		cancel_trade(p_, false, true);
		return;
	}
	if (pInfo(p_)->world.empty() and not pInfo(p_)->tankIDName.empty()) return;
	if (cch.find("make_mascotss") != string::npos) {
		stringstream ss(cch);
		string to = "", btn = "";
		bool mascot_dialog = false;
		while (getline(ss, to, '\n')) {
			vector<string> infoDat = explode("|", to);
			auto InfoDat = infoDat;
			if (infoDat.size() == 2) {
				if (infoDat[0] == "buttonClicked") btn = infoDat[1];
				if (infoDat[0] == "dialog_name" && infoDat[1] == "make_mascotss") mascot_dialog = true;
				if (mascot_dialog) {
					if (InfoDat[0] == "select_bg_mascot") {
						string name_ = pInfo(p_)->world;
						vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
						if (p != worlds.end()) {
							int item = atoi(InfoDat[1].c_str());
							if (item < 0 or item > items.size()) break;
							if (items[item].blockType != BlockTypes::BACKGROUND) {
								get_mascot_dialog(p_, pInfo(p_)->choose_fg, pInfo(p_)->choose_bg, "`4Please only choose Background Items.``");
								break;
							}
							World* world_ = &worlds[p - worlds.begin()];
							WorldBlock* block_ = &world_->blocks[pInfo(p_)->lastwrenchx + (pInfo(p_)->lastwrenchy * 100)];
							if (block_->fg != 5814) break;
							if (pInfo(p_)->guild_id != world_->guild_id) break;
							uint32_t guild_id = pInfo(p_)->guild_id;
							vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
							if (p != guilds.end()) {
								Guild* guild_information = &guilds[p - guilds.begin()];
								if (item == guild_information->guild_mascot[1]) break;
								uint32_t my_rank = 0;
								for (GuildMember member_search : guild_information->guild_members) {
									if (member_search.member_name == pInfo(p_)->tankIDName) {
										my_rank = member_search.role_id;
										break;
									}
								}
								if (my_rank <= 2) break;
								pInfo(p_)->choose_bg = item;
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert(get_mascot_dialog(p_, pInfo(p_)->choose_fg, pInfo(p_)->choose_bg, ""));
								p.CreatePacket(p_);
							}
						}
					}
					if (InfoDat[0] == "select_fg_mascot") {
						string name_ = pInfo(p_)->world;
						vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
						if (p != worlds.end()) {
							int item = atoi(InfoDat[1].c_str());
							if (item < 0 or item > items.size()) break;
							if (items[item].blockType == BlockTypes::BACKGROUND) {
								get_mascot_dialog(p_, pInfo(p_)->choose_fg, pInfo(p_)->choose_bg, "`4Please only choose Foreground Items.``");
								break;
							}
							World* world_ = &worlds[p - worlds.begin()];
							WorldBlock* block_ = &world_->blocks[pInfo(p_)->lastwrenchx + (pInfo(p_)->lastwrenchy * 100)];
							if (block_->fg != 5814) break;
							if (pInfo(p_)->guild_id != world_->guild_id) break;
							uint32_t guild_id = pInfo(p_)->guild_id;
							vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
							if (p != guilds.end()) {
								Guild* guild_information = &guilds[p - guilds.begin()];
								if (item == guild_information->guild_mascot[0]) break;
								uint32_t my_rank = 0;
								for (GuildMember member_search : guild_information->guild_members) {
									if (member_search.member_name == pInfo(p_)->tankIDName) {
										my_rank = member_search.role_id;
										break;
									}
								}
								if (my_rank <= 2) break;
								pInfo(p_)->choose_fg = item;
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert(get_mascot_dialog(p_, pInfo(p_)->choose_fg, pInfo(p_)->choose_bg, ""));
								p.CreatePacket(p_);
							}
						}
					}
					if (btn == "confirm_mascot") {
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("add_dual_layer_icon_label|big|`wConfirm Guild Mascot``|left|" + to_string(pInfo(p_)->choose_bg) + "|" + to_string(pInfo(p_)->choose_fg) + "|1.0|0|\nadd_textbox|Are you sure you wish to create this Guild Mascot for `9250,000 gems`o?|left|\nadd_spacer|small|\nadd_textbox|Confirm your choice.|left|\nend_dialog|confirm_mascot_guild|Cancel|Confirm Guild Mascot|");
						p.CreatePacket(p_);
					}
				}
				update_clothes(p_);
			}
		}
	}
		else if (cch.find("s4tb") != string::npos) {
		stringstream ss(cch);
		string to = "", btn = "";
		while (getline(ss, to, '\n')) {
			vector<string> infoDat = explode("|", to);
			if (infoDat.size() == 2) {
				if (infoDat[0] == "buttonClicked") btn = infoDat[1];
				if (infoDat[0] == "donate_rarity") {
					int count = atoi(infoDat[1].c_str());
					int got = 0;
					int item = pInfo(p_)->lastchoosenitem;
					modify_inventory(p_, pInfo(p_)->lastchoosenitem, got);
					if (got <= 0 || count <= 0 || item > items.size()) break;
					if (items[item].untradeable == 1 || item == 1424 || items[item].rarity >= 999 || items[item].rarity == 0 || items[item].rarity < 1 || count > got) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						if (count > got) p.Insert("You don't have that to give!");
						else p.Insert("I'm sorry, we can't accept items without rarity!");
						p.CreatePacket(p_);
					}
					else {
						auto peer = p_;
						string name_ = pInfo(p_)->world;
						vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
						if (p != worlds.end()) {
							World* world_ = &worlds[p - worlds.begin()];
							if (pInfo(peer)->staged < growch_prize.size()) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("Thank you for your generosity!");
								p.CreatePacket(peer);
								world_->s4tb = { world_->s4tb.first + count, world_->s4tb.second + (count * items[item].rarity) };
								modify_inventory(p_, pInfo(p_)->lastchoosenitem, got = -count);
								pInfo(peer)->s4tb += (count * items[item].rarity);
								if (pInfo(p_)->s4tb >= growch_prize[pInfo(p_)->staged].second) {
									int got = 0;
									modify_inventory(p_, growch_prize[pInfo(p_)->staged].first, got = +1);
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Thanks for your charity, claimed 1 " + items[growch_prize[pInfo(peer)->staged].first].name + " from Stuff-4-Toys, your donation rarity reset.");
									p.CreatePacket(p_);
									pInfo(p_)->s4tb -= growch_prize[pInfo(p_)->staged].second;
									if (pInfo(peer)->staged < growch_prize.size()) pInfo(peer)->staged++;
									else if (pInfo(peer)->staged == growch_prize.size()) pInfo(peer)->staged = 0;
								}
							}
						}
					}
				}
			}
		}
	}
	else if (cch.find("confirm_mascot_guild") != string::npos) {
		stringstream ss(cch);
		string to = "", btn = "";
		bool mascot_dialog = false;
		while (getline(ss, to, '\n')) {
			vector<string> infoDat = explode("|", to);
			auto InfoDat = infoDat;
			if (infoDat.size() == 2) {
				if (infoDat[0] == "buttonClicked") btn = infoDat[1];
				if (infoDat[0] == "dialog_name" && infoDat[1] == "confirm_mascot_guild") mascot_dialog = true;

				if (mascot_dialog) {
					pInfo(p_)->gems -= 250000;
					string name_ = pInfo(p_)->world;
					gamepacket_t gem_upd;
					gem_upd.Insert("OnSetBux"), gem_upd.Insert(pInfo(p_)->gems), gem_upd.Insert(0), gem_upd.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
					if (pInfo(p_)->supp >= 2) {
						gem_upd.Insert((float)33796, (float)1, (float)0);
					}
					gem_upd.CreatePacket(p_);
					vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
					if (p != worlds.end()) {
						World* world_ = &worlds[p - worlds.begin()];
						WorldBlock* block_ = &world_->blocks[pInfo(p_)->lastwrenchx + (pInfo(p_)->lastwrenchy * 100)];
						if (block_->fg != 5814) break;
						if (pInfo(p_)->guild_id != world_->guild_id) break;
						uint32_t guild_id = pInfo(p_)->guild_id;
						vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
						if (p != guilds.end()) {
							Guild* guild_information = &guilds[p - guilds.begin()];
							uint32_t my_rank = 0;
							for (GuildMember member_search : guild_information->guild_members) {
								if (member_search.member_name == pInfo(p_)->tankIDName) {
									my_rank = member_search.role_id;
									break;
								}
							}
							if (my_rank <= 2) break;
							guild_information->guild_mascot[1] = pInfo(p_)->choose_fg, guild_information->guild_mascot[0] = pInfo(p_)->choose_bg, pInfo(p_)->choose_fg = 0, pInfo(p_)->choose_bg = 0;
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = pInfo(p_)->lastwrenchx, data_.punchY = pInfo(p_)->lastwrenchy, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, p_, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == pInfo(p_)->world) {
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, p_);
							}
						}
					}
				}
			}
		}
	}
	vector<string> a_ = explode("|", replace_str(cch, "\n", "|"));
	for (int i_ = 0; i_ < a_.size(); i_++) {
		if (a_[i_] == "dispshelf") {
			if (a_.size() != 13 and a_.size() != 14) break;
			if (not isdigit(a_.at(i_ + 2).at(0)) or not isdigit(a_.at(i_ + 5).at(0))) break;
			int x_ = atoi(a_.at(i_ + 2).c_str()), y_ = atoi(a_.at(i_ + 5).c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks.at(x_ + (y_ * 100));
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				if (not items[t_].dshelf) break;
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks.at(block_->lock_origin);
						if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				for (int b_ = 0; b_ < a_.size(); b_++) {
					if (a_.at(b_) == "replace1" || a_.at(b_) == "replace2" || a_.at(b_) == "replace3" || a_.at(b_) == "replace4") {
						if (a_.size() >= (b_ + 1) - 1) {
							if (not isdigit(a_[b_ + 1][0])) break;
							int item_id = atoi(a_[b_ + 1].c_str());
							if (item_id <= 0 || item_id >= items.size()) break;
							if (items[item_id].untradeable or item_id == 9770 or item_id == 10362 or item_id == 9846 or item_id == 9772 or item_id == 5480 or item_id == 1424) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("You can't display untradeable items.");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								return;
							}
							if ((a_.at(b_) == "replace1" ? block_->shelf_1 : a_.at(b_) == "replace2" ? block_->shelf_2 : a_.at(b_) == "replace3" ? block_->shelf_3 : block_->shelf_4) != 0) {
								int b = 1;
								if (modify_inventory(p_, (a_.at(b_) == "replace1" ? block_->shelf_1 : a_.at(b_) == "replace2" ? block_->shelf_2 : a_.at(b_) == "replace3" ? block_->shelf_3 : block_->shelf_4), b) == 0) {
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("Picked up 1 " + items[(a_.at(b_) == "replace1" ? block_->shelf_1 : a_.at(b_) == "replace2" ? block_->shelf_2 : a_.at(b_) == "replace3" ? block_->shelf_3 : block_->shelf_4)].name + ".");
									p.CreatePacket(p_);
									(a_.at(b_) == "replace1" ? block_->shelf_1 : a_.at(b_) == "replace2" ? block_->shelf_2 : a_.at(b_) == "replace3" ? block_->shelf_3 : block_->shelf_4) = 0;
								}
								else {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("No room to take " + items[(a_.at(b_) == "replace1" ? block_->shelf_1 : a_.at(b_) == "replace2" ? block_->shelf_2 : a_.at(b_) == "replace3" ? block_->shelf_3 : block_->shelf_4)].name + ".");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(p_);
									break;
								}
							}
							int b = -1;
							if (modify_inventory(p_, item_id, b) == 0) {
								(a_.at(b_) == "replace1" ? block_->shelf_1 : a_.at(b_) == "replace2" ? block_->shelf_2 : a_.at(b_) == "replace3" ? block_->shelf_3 : block_->shelf_4) = item_id;
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("Put " + items[(a_.at(b_) == "replace1" ? block_->shelf_1 : a_.at(b_) == "replace2" ? block_->shelf_2 : a_.at(b_) == "replace3" ? block_->shelf_3 : block_->shelf_4)].name + " on display.");
								p.CreatePacket(p_);
							}
						}
					}
					else if (a_.at(b_) == "remove") {
						if (block_->shelf_1 != 0) {
							int b = 1;
							if (modify_inventory(p_, block_->shelf_1, b) == 0) {
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("Picked up 1 " + items[block_->shelf_1].name + ".");
								p.CreatePacket(p_);
								block_->shelf_1 = 0;
							}
							else {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("No room to take " + items[block_->shelf_1].name + ".");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								break;
							}
						}
						if (block_->shelf_2 != 0) {
							int b = 1;
							if (modify_inventory(p_, block_->shelf_2, b) == 0) {
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("Picked up 1 " + items[block_->shelf_2].name + ".");
								p.CreatePacket(p_);
								block_->shelf_2 = 0;
							}
							else {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("No room to take " + items[block_->shelf_2].name + ".");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								break;
							}
						}
						if (block_->shelf_3 != 0) {
							int b = 1;
							if (modify_inventory(p_, block_->shelf_3, b) == 0) {
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("Picked up 1 " + items[block_->shelf_3].name + ".");
								p.CreatePacket(p_);
								block_->shelf_3 = 0;
							}
							else {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("No room to take " + items[block_->shelf_3].name + ".");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								break;
							}
						}
						if (block_->shelf_4 != 0) {
							int b = 1;
							if (modify_inventory(p_, block_->shelf_4, b) == 0) {
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("Picked up 1 " + items[block_->shelf_4].name + ".");
								p.CreatePacket(p_);
								block_->shelf_4 = 0;
							}
							else {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("No room to take " + items[block_->shelf_4].name + ".");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								break;
							}
						}
						break;
					}
				}
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(p_)->world) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
			}
			return;
		}
		else if (a_[i_] == "sdbrespond") {
			if (a_.size() != 8) break;
			SendCmd(p_, "/go", true);
			return;
		}
		else if (a_[i_] == "sdbsend") {
			if (a_.size() != 11) break;
			string line_1 = a_[i_ + 2];
			string line_2 = a_[i_ + 4];
			string line_3 = a_[i_ + 6];
			if (line_1.empty() and line_2.empty() and line_3.empty()) {
				gamepacket_t p;
				p.Insert("OnTalkBubble");
				p.Insert(pInfo(p_)->netID);
				p.Insert("`5[`2I'm not wasting gems on an empty broadcast!``]``");
				p.Insert(0), p.Insert(0);
				p.CreatePacket(p_);
				break;
			}
			if (has_playmod(pInfo(p_), "megaphone!")) {
				int time_ = 0;
				for (PlayMods peer_playmod : pInfo(p_)->playmods) {
					if (peer_playmod.id == 13) {
						time_ = peer_playmod.time - time(nullptr);
						break;
					}
				}
				packet_(p_, "action|log\nmsg|>> (" + to_playmod_time(time_) + "before you can broadcast again)", "");
				return;
			}
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				bool jammed = find(world_->active_jammers.begin(), world_->active_jammers.end(), 226) != world_->active_jammers.end() ? true : false;
				if (pInfo(p_)->m_h == 1) jammed = true;
				if (pInfo(p_)->gems >= 2000000) {
					{
						PlayMods new_playmod{};
						new_playmod.id = 13;
						new_playmod.time = time(nullptr) + 300;
						pInfo(p_)->playmods.push_back(new_playmod);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("Broadcasting to ALL! (`$Megaphone!`` mod added)");
							p.CreatePacket(p_);
							packet_(p_, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
						}
					}
					pInfo(p_)->gems -= 2000000;
					gamepacket_t pk;
					pk.Insert("OnSetBux");
					pk.Insert(pInfo(p_)->gems);
					pk.Insert(0);
					pk.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
					if (pInfo(p_)->supp >= 2) {
						pk.Insert((float)33796, (float)1, (float)0);
					}
					pk.CreatePacket(p_);
					gamepacket_t p;
					p.Insert("OnSDBroadcast");
					p.Insert(((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + (pInfo(p_)->is_legend ? " of Legend" : "") + "``") + "\n" + (jammed ? "`4JAMMED!``" : pInfo(p_)->world) + "\n" + line_1 + "\n" + line_2 + "\n" + line_3);
					p.Insert(jammed ? 0 : 1);
					if (not jammed) {
						lastsbworld = pInfo(p_)->world;
					}
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->radio) continue;
						if (pInfo(currentPeer)->world.empty()) continue;
						p.CreatePacket(currentPeer);
					}
				}
				else {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("You need 2000000 gems to do this!");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(p_);
					{
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("You need 2000000 gems to do this!");
						p.CreatePacket(p_);
					}
				}
			}
			return;
		}
		else if (a_[i_] == "portrait") {
			try {
				if (not isdigit(a_.at(i_ + 2).at(0)) or not isdigit(a_.at(i_ + 5).at(0))) break;
				int x_ = atoi(a_.at(i_ + 2).c_str()), y_ = atoi(a_.at(i_ + 5).c_str());
				if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					WorldBlock* block_ = &world_->blocks.at(x_ + (y_ * 100));
					uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
					if (not items.at(t_).portrait) break;
					string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
					if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks.at(block_->lock_origin);
							if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
						}
						else {
							break;
						}
					} for (int b_ = 0; b_ < a_.size(); b_++) {
						if (a_.size() > b_ + 1) {
							if (a_.at(b_ + 1) == "chk1") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 1;
								}
							}
							else if (a_.at(b_ + 1) == "chk2") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 2;
								}
							}
							else if (a_.at(b_ + 1) == "chk3") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 3;
								}
							}
							else if (a_.at(b_ + 1) == "chk4") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 4;
								}
							}
							else if (a_.at(b_ + 1) == "chk5") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 5;
								}
							}
							else if (a_.at(b_ + 1) == "chk6") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 6;
								}
							}
							else if (a_.at(b_ + 1) == "chk7") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 7;
								}
							}
							else if (a_.at(b_ + 1) == "chk9") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 9;
								}
							}
							else if (a_.at(b_ + 1) == "chk11") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 11;
								}
							}
							else if (a_.at(b_ + 1) == "chk12") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 12;
								}
							}
							else if (a_.at(b_ + 1) == "chk14") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 14;
								}
							}
							else if (a_.at(b_ + 1) == "chk16") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 16;
								}
							}
							else if (a_.at(b_ + 1) == "chk18") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 18;
								}
							}
							else if (a_.at(b_ + 1) == "chk22") {
								if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
								if (a_.size() >= (b_ + 2) - 1) {
									if (not isdigit(a_.at(b_ + 2).at(0))) break;
									if (a_.at(b_ + 2) == "1") block_->portrait.c_expression = 22;
								}
							}
						}
						if (a_.at(b_) == "erase") {
							int b = -4;
							if (modify_inventory(p_, 3492, b) == 0) {
								block_->portrait.c_expression = 1;
								block_->portrait.c_skin = 0;
								block_->portrait.c_face = 0;
								block_->portrait.c_head = 0;
								block_->portrait.c_hair = 0;
							}
						}
						else if (a_.at(b_) == "playerNetID") {
							if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) {
								if (a_.size() >= (b_ + 1) - 1) {
									if (not isdigit(a_.at(b_ + 1).at(0))) break;
									uint32_t netID = atoi(a_.at(b_ + 1).c_str());
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == pInfo(p_)->world and pInfo(currentPeer)->netID == netID) {
											int red = 0, yellow = 0, green = 0, aqua = 0, blue = 0, purple = 0, charcoal = 0, varnish = 0;
											{
												modify_inventory(p_, 3478, red);
												modify_inventory(p_, 3480, yellow);
												modify_inventory(p_, 3482, green);
												modify_inventory(p_, 3484, aqua);
												modify_inventory(p_, 3486, blue);
												modify_inventory(p_, 3488, purple);
												modify_inventory(p_, 3490, charcoal);
												modify_inventory(p_, 3492, varnish);
												if (red >= 2 and yellow >= 2 and green >= 2 and aqua >= 2 and blue >= 2 and purple >= 2 and charcoal >= 2 and varnish >= 2) {
													red = -2, yellow = -2, green = -2, aqua = -2, blue = -2, purple = -2, charcoal = -2, varnish = -2;
													if (modify_inventory(p_, 3478, red) == 0 and modify_inventory(p_, 3480, yellow) == 0 and modify_inventory(p_, 3482, green) == 0
														and modify_inventory(p_, 3484, aqua) == 0 and modify_inventory(p_, 3486, blue) == 0 and modify_inventory(p_, 3488, purple) == 0
														and modify_inventory(p_, 3490, charcoal) == 0 and modify_inventory(p_, 3492, varnish) == 0) {
														block_->portrait.c_expression = 1;
														block_->portrait.c_skin = pInfo(currentPeer)->skin;
														block_->portrait.c_face = pInfo(currentPeer)->face;
														block_->portrait.c_head = pInfo(currentPeer)->hair;
														block_->portrait.c_hair = pInfo(currentPeer)->mask;
														block_->txt = pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName;
													}
												}
											}
											break;
										}
									}
								}
							}
						}
						else if (a_.at(b_) == "artname") {
							if (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0) continue;
							if (a_.size() >= (b_ + 1) - 1) {
								string txt = a_.at(b_ + 1);
								if (txt.size() > 60) break;
								block_->txt = txt;
							}
						}
					}
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, p_, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(p_)->world) {
							send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
					if (block_->locked) {
						upd_lock(*block_, *world_, p_);
					}
				}
			}
			catch (out_of_range) {
				return;
			}
			return;
		}
		else if (a_.at(i_) == "artcanvas") {
			try {
				if (not isdigit(a_.at(i_ + 2).at(0)) or not isdigit(a_.at(i_ + 5).at(0))) break;
				int x_ = atoi(a_.at(i_ + 2).c_str()), y_ = atoi(a_.at(i_ + 5).c_str());
				if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					WorldBlock* block_ = &world_->blocks.at(x_ + (y_ * 100));
					uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
					if (not items.at(t_).easel) break;
					string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
					if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks.at(block_->lock_origin);
							if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
						}
						else {
							break;
						}
					} for (int b_ = 0; b_ < a_.size(); b_++) {
						if (a_.at(b_) == "erase") {
							int b = -4;
							if (modify_inventory(p_, 3492, b) == 0) {
								block_->id = 0;
							}
						}
						else if (a_.at(b_) == "paint") {
							if (a_.size() >= (b_ + 1) - 1) {
								if (not isdigit(a_.at(b_ + 1).at(0))) break;
								int item_id = atoi(a_.at(b_ + 1).c_str());
								if (item_id <= 0 || item_id >= items.size()) break;
								int kiek_turi = 0;
								modify_inventory(p_, item_id, kiek_turi);
								if (kiek_turi == 0) break;
								{
									int red = 0, yellow = 0, green = 0, aqua = 0, blue = 0, purple = 0, charcoal = 0, varnish = 0;
									{
										modify_inventory(p_, 3478, red);
										modify_inventory(p_, 3480, yellow);
										modify_inventory(p_, 3482, green);
										modify_inventory(p_, 3484, aqua);
										modify_inventory(p_, 3486, blue);
										modify_inventory(p_, 3488, purple);
										modify_inventory(p_, 3490, charcoal);
										modify_inventory(p_, 3492, varnish);
										if (red >= 2 and yellow >= 2 and green >= 2 and aqua >= 2 and blue >= 2 and purple >= 2 and charcoal >= 2 and varnish >= 2) {
											red = -2, yellow = -2, green = -2, aqua = -2, blue = -2, purple = -2, charcoal = -2, varnish = -2;
											if (modify_inventory(p_, 3478, red) == 0 and modify_inventory(p_, 3480, yellow) == 0 and modify_inventory(p_, 3482, green) == 0
												and modify_inventory(p_, 3484, aqua) == 0 and modify_inventory(p_, 3486, blue) == 0 and modify_inventory(p_, 3488, purple) == 0
												and modify_inventory(p_, 3490, charcoal) == 0 and modify_inventory(p_, 3492, varnish) == 0) {
												block_->id = item_id;
											}
										}
									}
								}
							}
						}
						else if (a_.at(b_) == "artname") {
							if (a_.size() >= (b_ + 1) - 1) {
								string txt = a_.at(b_ + 1);
								if (txt.size() > 60) break;
								block_->txt = txt;
							}
						}
					}
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, p_, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(p_)->world) {
							send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
					if (block_->locked) {
						upd_lock(*block_, *world_, p_);
					}
				}
			}
			catch (out_of_range) {
				cout << "crash try by " << pInfo(p_)->tankIDName << endl;
				return;
			}
			return;
		}
		else if (a_[i_] == "mannequin_edit") {
			if (a_.size() == 14) { // put item
				if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0]) or not isdigit(a_[i_ + 8][0])) break;
				int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str()), tile_ = atoi(a_[i_ + 8].c_str());
				if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
				if (tile_ <= 0 || tile_ >= items.size()) break;
				if (items[tile_].blockType != CLOTHING or items[tile_].untradeable or tile_ == 9770 or tile_ == 10362 or tile_ == 9846 or tile_ == 9772 or tile_ == 5480 or tile_ == 1424 or items[tile_].clothType == ClothTypes::ANCES) return;
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
					uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
					if (not items[t_].mannequin) break;
					string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
					if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
							if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
						}
						else {
							break;
						}
					}
					uint16_t current_mannequin_item = 0;
					switch (items[tile_].clothingType) {
					case 0: current_mannequin_item = block_->mannequin.c_hair;
						break;
					case 1: current_mannequin_item = block_->mannequin.c_shirt;
						break;
					case 2: current_mannequin_item = block_->mannequin.c_pants;
						break;
					case 3: current_mannequin_item = block_->mannequin.c_feet;
						break;
					case 4: current_mannequin_item = block_->mannequin.c_head;
						break;
					case 5: current_mannequin_item = block_->mannequin.c_hand;
						break;
					case 6: current_mannequin_item = block_->mannequin.c_back;
						break;
					case 7: current_mannequin_item = block_->mannequin.c_mask;
						break;
					case 8: current_mannequin_item = block_->mannequin.c_neck;
						break;
					case 9: {
						return;
					}
					} if (current_mannequin_item == tile_) {
						return;
					}
					else {
						if (current_mannequin_item != 0) {
							int b = 1;
							if (modify_inventory(p_, int(current_mannequin_item), b) != 0) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("`5[`2You don't have inventory space!``]``");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								return;
							}
						}
						int c_ = -1;
						if (modify_inventory(p_, tile_, c_) == 0) {
							switch (items[tile_].clothingType) {
							case 0: block_->mannequin.c_hair = tile_;
								break;
							case 1: block_->mannequin.c_shirt = tile_;
								break;
							case 2: block_->mannequin.c_pants = tile_;
								break;
							case 3: block_->mannequin.c_feet = tile_;
								break;
							case 4: block_->mannequin.c_head = tile_;
								break;
							case 5: block_->mannequin.c_hand = tile_;
								break;
							case 6: block_->mannequin.c_back = tile_;
								break;
							case 7: block_->mannequin.c_mask = tile_;
								break;
							case 8: block_->mannequin.c_neck = tile_;
								break;
							case 9: {
								return;
							}
							}
							gamepacket_t p(0, pInfo(p_)->netID);
							p.Insert("OnPlayPositioned");
							p.Insert("audio/change_clothes.wav");
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, p_, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == pInfo(p_)->world) {
									p.CreatePacket(currentPeer);
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, p_);
							}
						}
					}
				}
			}
			else {
				int x_ = 0, y_ = 0;
				try {
					if (not isdigit(a_.at(i_ + 2).at(0) or not isdigit(a_.at(i_ + 5).at(0)))) break;
					int x_ = atoi(a_.at(i_ + 2).c_str()), y_ = atoi(a_.at(i_ + 5).c_str());
				}
				catch (out_of_range) {
					return;
				}
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
					uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
					if (not items[t_].mannequin) break;
					string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
					if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
							if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
						}
						else {
							break;
						}
					}
					bool clear_all = false;
					int fkthis = 0;
					for (int b_ = 0; b_ < a_.size(); b_++) {
						if (a_[b_].substr(0, 9) == "checkbox_") {
							if (a_.size() >= (b_ + 1) - 1) {
								vector<string> target_ = explode("_", a_[b_]);
								if (not isdigit(target_[1][0])) continue;
								int item_remove = atoi(target_[1].c_str());
								int aa = 1;
								if (item_remove <= 0 || item_remove >= items.size()) continue;
								if (a_[b_ + 1] == "1" or clear_all) {
									if (block_->mannequin.c_hair != item_remove and block_->mannequin.c_shirt != item_remove and block_->mannequin.c_pants != item_remove and block_->mannequin.c_feet != item_remove
										and block_->mannequin.c_head != item_remove and block_->mannequin.c_hand != item_remove and block_->mannequin.c_back != item_remove
										and block_->mannequin.c_mask != item_remove and block_->mannequin.c_neck != item_remove) return;
									if (modify_inventory(p_, item_remove, aa) == 0) {
										switch (items[item_remove].clothingType) {
										case 0: block_->mannequin.c_hair = 0;
											break;
										case 1: block_->mannequin.c_shirt = 0;
											break;
										case 2: block_->mannequin.c_pants = 0;
											break;
										case 3: block_->mannequin.c_feet = 0;
											break;
										case 4: block_->mannequin.c_head = 0;
											break;
										case 5: block_->mannequin.c_hand = 0;
											break;
										case 6: block_->mannequin.c_back = 0;
											break;
										case 7: block_->mannequin.c_mask = 0;
											break;
										case 8: block_->mannequin.c_neck = 0;
											break;
										}
									}
								}
							}
						}
						else if (a_[b_] == "buttonClicked") {
							if (a_.size() >= (b_ + 1) - 1) {
								if (a_[b_ + 1] == "clear") clear_all = true;
							}
						}
						else if (a_[b_] == "sign_text") {
							if (a_.size() >= (b_ + 1) - 1) {
								string txt = a_[b_ + 1];
								if (txt.size() > 128) break;
								block_->txt = txt;
							}
						}
					}
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, p_, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
				}
			}
			return;
		}
		else if (a_[i_] == "xenonite_edit") {
			gamepacket_t p;
			p.Insert("OnTalkBubble");
			p.Insert(pInfo(p_)->netID);
			p.Insert("Xenonite not yet finished!");
			p.Insert(0), p.Insert(0);
			p.CreatePacket(p_);
			return;
		}
		else if (a_.at(i_) == "vip_edit") {
			try {
				if (not isdigit(a_.at(i_ + 2).at(0)) or not isdigit(a_.at(i_ + 5).at(0))) break;
				int x_ = atoi(a_.at(i_ + 2).c_str()), y_ = atoi(a_.at(i_ + 5).c_str());
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					WorldBlock* block_ = &world_->blocks.at(x_ + (y_ * 100));
					uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
					if (not items.at(t_).vipentrance) break;
					string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
					if (owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty()) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks.at(block_->lock_origin);
							if (check_lock->owner_name != pInfo(p_)->tankIDName) break;
						}
						else {
							break;
						}
					}
					for (int b_ = 0; b_ < a_.size(); b_++) {
						if (a_.at(b_).substr(0, 9) == "checkbox_") {
							vector<string> target_ = explode("_", a_.at(b_));
							if (target_.at(1) == "public") {
								if (not block_->limit_admins and a_.at(b_ + 1) == "1") {
									block_->limit_admins = true;
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert(pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` has set a `$VIP Entrance`` to `$PUBLIC");
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											p.CreatePacket(currentPeer);
										}
									}
								}
								else if (block_->limit_admins and a_[b_ + 1] == "0") {
									block_->limit_admins = false;
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert(pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` has set a `$VIP Entrance`` to `4PRIVATE``");
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											p.CreatePacket(currentPeer);
										}
									}
								}
							}
							else if (target_.size() == 2 and a_.at(b_ + 1) == "0") {
								string user_name = target_.at(1);
								if (find(block_->admins.begin(), block_->admins.end(), user_name) != block_->admins.end()) {
									block_->admins.erase(remove(block_->admins.begin(), block_->admins.end(), user_name), block_->admins.end());
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert(user_name + " was removed from a VIP List.");
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->tankIDName == user_name) {
											packet_(currentPeer, "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0");
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(currentPeer)->netID);
											if (pInfo(p_)->adminLevel == 0)pInfo(p_)->name_color = "`2";
											p.Insert(pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` has `4removed`` you from a VIP List in `w" + world_->name + "``.");
											p.Insert(0), p.Insert(0);
											p.CreatePacket(currentPeer);
										}
										if (pInfo(currentPeer)->world == world_->name) {
											p.CreatePacket(currentPeer);
										}
									}
								}
							}
						}
						else if (a_.at(b_) == "playerNetID") {
							if (a_.size() >= (b_ + 1) - 1) {
								if (not isdigit(a_.at(b_ + 1).at(0))) break;
								uint32_t netID = atoi(a_.at(b_ + 1).c_str());
								if (netID == pInfo(p_)->netID) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("I'm already a VIP!");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(p_);
									break;
								}
								if (block_->admins.size() >= 26) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("VIP Entrance has reached access limit!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name and pInfo(currentPeer)->netID == netID) {
										if (find(block_->admins.begin(), block_->admins.end(), pInfo(currentPeer)->tankIDName) != block_->admins.end()) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(p_)->netID);
											p.Insert(pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "`` is already on the VIP list.");
											p.Insert(0), p.Insert(0);
											p.CreatePacket(p_);
											return;
										}
										block_->admins.push_back(pInfo(currentPeer)->tankIDName);
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("Put " + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "`` on the VIP List.");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert(pInfo(currentPeer)->tankIDName + " was added to a VIP List.");
											for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
												if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
												if (pInfo(currentPeer2)->world == world_->name) {
													p.CreatePacket(currentPeer2);
												}
											}
										}
										break;
									}
								}
								break;
							}
						}
					}
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, p_, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
				}
			}
			catch (out_of_range) {
				return;
			}
			return;
		}
		else if (a_[i_] == "crystal_exchange") {
			if (a_.size() != 14) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0]) or not isdigit(a_[11][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			int item_id = atoi(a_[11].c_str());
			if (item_id <= 0 || item_id >= items.size()) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				if (items[t_].blockType != BlockTypes::CRYSTAL) break;
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				vector<vector<int>> current_{ {2242, 0}, {2244, 0}, {2246, 0}, {2248, 0}, {2250, 0} };
				for (int i = 0; i < block_->crystals.size(); i++) {
					vector<int> c_ = block_->crystals[i];
					for (int a = 0; a < current_.size(); a++) {
						if (current_[a][0] == c_[0]) {
							current_[a][1] = block_->crystals[i][1];
							break;
						}
					}
				}
				for (vector<vector<int>> a_ : crystal_receptai) {
					if (a_[5][0] == item_id) {
						bool can_ = true;
						for (vector<int> b_ : a_) {
							for (int i = 0; i < current_.size(); i++) {
								if (current_[i][0] == b_[0] and current_[i][1] < b_[1]) {
									can_ = false;
									break;
								}
							} if (not can_) {
								break;
							}
						} if (can_) {
							PlayerMoving data_{};
							data_.packetType = 0x11, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
							data_.YSpeed = 97, data_.XSpeed = t_;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == world_->name) {
									send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw;
							{
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("The crystal shatters and drops " + items[a_[5][0]].name + "!");
								p.Insert(0), p.Insert(1);
								p.CreatePacket(p_);

								WorldDrop drop_block_{};
								drop_block_.id = a_[5][0], drop_block_.count = a_[5][1], drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
								dropas_(world_, drop_block_);
							}
							reset_(block_, x_, y_, world_);
							{
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc;
							}
						}
						else {
							break;
						}
						break;
					}
				}
			}
			return;
		}
		else if (a_[i_] == "weatherspcl") {
			if (a_.size() != 13 and a_.size() != 17 and a_.size() != 19) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				if (block_->fg != 5000 and block_->fg != 3832 and block_->fg != 3694) break;
				bool update_ = false;
				if (block_->fg == 3694 and a_.size() == 17) {
					if (not isdigit(a_[i_ + 8][0]) or not isdigit(a_[i_ + 10][0]) or not isdigit(a_[i_ + 12][0])) break;
					int r = atoi(a_[i_ + 8].c_str()), g = atoi(a_[i_ + 10].c_str()), b = atoi(a_[i_ + 12].c_str());
					if (r < 0 or g < 0 or b < 0 or r > 255 or g > 255 or b > 255) return;
					if (r < 40 and g < 40 and b < 40) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You can't make a heatwave that dark (one of the colors must be 40+)!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						return;
					}
					block_->r = r;
					block_->g = g;
					block_->b = b;
					update_ = true;
				}
				else if (block_->fg == 3832 and a_.size() == 19) {
					if (not isdigit(a_[i_ + 8][0])) break;
					uint32_t new_id = atoi(a_[i_ + 8].c_str());
					if (block_->id != new_id) {
						block_->id = new_id;
						update_ = true;
					}
					int new_gravity = atoi(a_[i_ + 10].c_str());
					if (new_gravity > 500) new_gravity = 500;
					if (new_gravity < -500) new_gravity = -500;
					if (block_->gravity != new_gravity) {
						block_->gravity = new_gravity;
						update_ = true;
					}
					if (not isdigit(a_[i_ + 12][0])) break;
					bool new_spin = atoi(a_[i_ + 12].c_str());
					if (block_->spin != new_spin) block_->spin = new_spin, update_ = true;
					if (not isdigit(a_[i_ + 14][0])) break;
					bool new_invert = atoi(a_[i_ + 14].c_str());
					if (block_->invert != new_invert) block_->invert = new_invert, update_ = true;
				}
				else if (block_->fg == 3832 and a_.size() == 17) {
					int new_gravity = atoi(a_[i_ + 8].c_str());
					if (new_gravity > 500) new_gravity = 500;
					if (new_gravity < -500) new_gravity = -500;
					if (block_->gravity != new_gravity) {
						block_->gravity = new_gravity;
						update_ = true;
					}
					if (not isdigit(a_[i_ + 10][0])) break;
					bool new_spin = atoi(a_[i_ + 10].c_str());
					if (block_->spin != new_spin) block_->spin = new_spin, update_ = true;
					if (not isdigit(a_[i_ + 12][0])) break;
					bool new_invert = atoi(a_[i_ + 12].c_str());
					if (block_->invert != new_invert) block_->invert = new_invert, update_ = true;
				}
				else {
					if (not isdigit(a_[i_ + 8][0])) break;
					uint32_t new_id = atoi(a_[i_ + 8].c_str());
					if (block_->fg == 5000 and items[new_id].blockType != BlockTypes::BACKGROUND) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("That's not a background!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						break;
					} if (block_->id != new_id) {
						block_->id = new_id;
						update_ = true;
					}
				}
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
				if (block_->enabled and update_) {
					gamepacket_t p;
					p.Insert("OnSetCurrentWeather");
					p.Insert(world_->weather == 0 ? 80 : world_->weather);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == name_) {
							p.CreatePacket(currentPeer);
						}
					}
				}
			}
			break;
		}
		else if (a_[i_] == "itemaddedtosucker" or a_[i_] == "itemremovedfromsucker") {
			if (a_.size() != 13) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (owner_name != user_name and not pInfo(p_)->dev and not owner_name.empty()) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (check_lock->owner_name != pInfo(p_)->tankIDName) break;
					}
					else {
						break;
					}
				}
				if (not items[block_->fg].item_sucker) break;
				if (not isdigit(a_[i_ + 8][0])) break;
				if (t_ == 6948 and block_->pr >= 1500 and a_[i_] != "itemremovedfromsucker" or t_ == 6946 and block_->pr >= 1500 and a_[i_] != "itemremovedfromsucker" or t_ == 5638 and block_->pr >= 5000 and a_[i_] != "itemremovedfromsucker") break;
				int add_count = atoi(a_[i_ + 8].c_str());
				if (a_[i_] == "itemremovedfromsucker") {
					if (add_count > block_->pr) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You are removing what you dont have.");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("You are removing what you dont have.");
							p.CreatePacket(p_);
						}
						break;
					}
					int c_ = 0;
					modify_inventory(p_, block_->id, c_);
					add_count = (add_count + c_ > 200 ? (add_count > 200 ? 200 - c_ : (add_count > c_ ? 200 - add_count : 200 - c_)) : add_count);
					if (add_count > block_->pr or c_ + add_count > 200) break;
					int add_ = add_count;
					if (modify_inventory(p_, block_->id, add_) == 0) {
						block_->pr -= add_count;
					}
				}
				else {
					int c_ = 0;
					modify_inventory(p_, block_->id, c_);
					if (c_ < add_count) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You dont have " + items[block_->id].name);
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("You dont have " + items[block_->id].name);
							p.CreatePacket(p_);
						}
						break;
					}
					int remove_count = add_count * -1;
					if (modify_inventory(p_, block_->id, remove_count) == 0) {
						block_->pr += add_count;
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("Items added.");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("Items added.");
							p.CreatePacket(p_);
						}
					}
				}
				bool found_ = false;
				for (int i_ = 0; i_ < world_->machines.size(); i_++) {
					WorldMachines* machine_ = &world_->machines[i_];
					if (machine_->x == x_ and machine_->y == y_) {
						machine_->enabled = block_->enabled;
						machine_->target_item = block_->id;
						found_ = true;
						break;
					}
				} if (not found_) {
					//cout << "created new world machine" << endl;
					WorldMachines new_machine;
					new_machine.enabled = block_->enabled;
					new_machine.x = x_, new_machine.y = y_;
					new_machine.id = block_->fg;
					new_machine.target_item = block_->id;
					world_->machines.push_back(new_machine);
					if (find(t_worlds.begin(), t_worlds.end(), world_->name) == t_worlds.end()) {
						t_worlds.push_back(world_->name);
					}
				}
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
			}
			break;
		}
		else if (a_[i_] == "itemsucker_block") {
			if (a_.size() != 13 and a_.size() != 16 and a_.size() != 14) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (owner_name != user_name and not pInfo(p_)->dev and not owner_name.empty() and a_[11] != "getplantationdevice" and a_.size() != 14) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (check_lock->owner_name != pInfo(p_)->tankIDName and a_[11] != "getplantationdevice" and a_.size() != 14) break;
					}
					else {
						break;
					}
				}
				if (not items[t_].item_sucker) break;
				if (a_.size() == 14 or a_[11] == "getplantationdevice") {
					if (block_->id != 0 and block_->fg == 5638) {
						if (items[block_->id].collisionType != 1 and items[block_->id].blockType != BACKGROUND and items[block_->id].blockType != SEED and not items[block_->id].farmable or items[block_->id].rarity == 999) {
							break;
						}
						if (pInfo(p_)->magnetron_x != 0 and pInfo(p_)->magnetron_y != 0 and pInfo(p_)->magnetron_x != x_ and pInfo(p_)->magnetron_x != y_) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("You received a " + items[5640].name + ".");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(p_);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("You received a " + items[5640].name + ".");
								p.CreatePacket(p_);
							}
							{
								pInfo(p_)->magnetron_id = block_->id;
								pInfo(p_)->magnetron_x = x_;
								pInfo(p_)->magnetron_y = y_;
								gamepacket_t p;
								p.Insert("OnPlanterActivated");
								p.Insert(block_->id);
								p.Insert(x_);
								p.Insert(y_);
								p.CreatePacket(p_);
							}
						}
						else {
							int c_ = 0;
							modify_inventory(p_, 5640, c_);
							if (c_ == 0) {
								{
									int c_ = 1;
									if (modify_inventory(p_, 5640, c_) == 0) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You received a " + items[5640].name + ".");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("You received a " + items[5640].name + ".");
											p.CreatePacket(p_);
										}
										{
											pInfo(p_)->magnetron_id = block_->id;
											pInfo(p_)->magnetron_x = x_;
											pInfo(p_)->magnetron_y = y_;
											gamepacket_t p;
											p.Insert("OnPlanterActivated");
											p.Insert(block_->id);
											p.Insert(x_);
											p.Insert(y_);
											p.CreatePacket(p_);
										}
									}
								}
							}
						}
					}
					break;
				}
				if (a_.size() == 13 and a_[i_ + 7] == "selectitem") {
					if (not isdigit(a_[i_ + 8][0])) break;
					uint32_t putting_item = atoi(a_[i_ + 8].c_str());
					if (putting_item >= items.size() or putting_item < 0) break;
					if (t_ == 5638) {
						if (items[putting_item].untradeable or items[putting_item].rarity == 999 and items[putting_item].blockType == BlockTypes::CLOTHING and items[putting_item].blockType != BlockTypes::CONSUMABLE) {
							if (not items[putting_item].farmable || items[putting_item].blockType == BlockTypes::CLOTHING) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("This item is not compatible.");
								p.Insert(0), p.Insert(1);
								p.CreatePacket(p_);
								{
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("This item is not compatible.");
									p.CreatePacket(p_);
								}
								break;
							}
						}
						block_->id = putting_item;
						block_->enabled = true;
					}
					else if (t_ == 6948) {
						if (items[putting_item].blockType == BlockTypes::SEED) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("You cannot store seeds in this machine.");
							p.Insert(0), p.Insert(1);
							p.CreatePacket(p_);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("You cannot store seeds in this machine.");
								p.CreatePacket(p_);
							}
							break;
						}
						if (items[putting_item].collisionType != 1 or items[putting_item].rarity == 999) {
							if (items[putting_item].blockType != BACKGROUND or items[putting_item].rarity == 999) {
								if (not items[putting_item].farmable) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("This item is not compatible.");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("This item is not compatible.");
										p.CreatePacket(p_);
									}
									break;
								}
							}
						}
						block_->id = putting_item;
						block_->enabled = true;
					}
					else if (t_ == 6946) {
						if (items[putting_item].blockType != BlockTypes::SEED) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("You can only store seeds in this machine.");
							p.Insert(0), p.Insert(1);
							p.CreatePacket(p_);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("You can only store seeds in this machine.");
								p.CreatePacket(p_);
							}
							break;
						}
						block_->id = putting_item;
						block_->enabled = true;
					}
				}
				else {
					for (int b_ = 0; b_ < a_.size(); b_++) {
						if (a_[b_] == "retrieveitem") {
							if (block_->id != 0) {
								int c_ = 0;
								modify_inventory(p_, block_->id, c_);
								if (c_ < 200) {
									gamepacket_t p;
									p.Insert("OnDialogRequest");
									p.Insert("set_default_color|`o\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label_with_icon|small|`2" + items[block_->id].name + "``|left|" + to_string(block_->id) + "|\nadd_textbox|`wHow many `2" + items[block_->id].name + "`` would you like to remove?``|left||\nadd_text_input|itemtoremove|Amount:|" + (block_->pr + c_ > 200 ? (block_->pr > 200 ? to_string(200 - c_) : (block_->pr > c_ ? to_string(200 - block_->pr) : to_string(200 - c_))) : to_string(block_->pr)) + "|20|\nend_dialog|itemremovedfromsucker|Close|Retrieve|\nadd_spacer|small|");
									p.CreatePacket(p_);
								}
							}
							break;
						}
						else if (a_[b_] == "additem") {
							if (block_->id != 0) {
								int c_ = 0;
								modify_inventory(p_, block_->id, c_);
								if (c_ != 0) {
									gamepacket_t p;
									p.Insert("OnDialogRequest");
									p.Insert("set_default_color|`o\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label_with_icon|small|`2" + items[block_->id].name + "``|left|" + to_string(block_->id) + "|\nadd_smalltext|You have " + to_string(c_) + " `2" + items[block_->id].name + "`` in your backpack.|left|\nadd_textbox|`wHow many `2" + items[block_->id].name + "`` would you like to add?``|left|\nadd_text_input|itemtoadd|Amount:|" + (block_->pr + c_ > (block_->fg == 5638 ? 5000 : 1500) ? to_string((block_->fg == 5638 ? 5000 : 1500) - block_->pr) : to_string(c_)) + "|20|\nend_dialog|itemaddedtosucker|Close|Add|\nadd_spacer|small|");
									p.CreatePacket(p_);
								}
							}
							break;
						}
						else if (a_[b_] == "clearitem") {
							if (block_->id != 0 and block_->pr == 0) {
								if (block_->fg == 5638 and pInfo(p_)->magnetron_id != 0 and pInfo(p_)->magnetron_x == x_ and pInfo(p_)->magnetron_y == y_) {
									int c_ = 0;
									modify_inventory(p_, 5640, c_);
									if (c_ != 0) {
										c_ *= -1;
										modify_inventory(p_, 5640, c_);
										pInfo(p_)->magnetron_id = 0;
										pInfo(p_)->magnetron_x = 0;
										pInfo(p_)->magnetron_y = 0;
									}
								}
								block_->id = 0, block_->enabled = true;
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert(get_sucker(p_, world_, block_, x_, y_));
								p.CreatePacket(p_);
								break;
							}
							break;
						}
						else if (a_[b_].substr(0, 4) == "chk_") {
							vector<string> target_ = explode("_", a_[b_]);
							if (target_[1] == "enablesucking") {
								block_->enabled = (a_[b_ + 1] == "1" and not block_->enabled ? true : (a_[b_ + 1] == "0" and block_->enabled ? false : false));
							}
						}
					}
				}
				bool found_ = false;
				for (int i_ = 0; i_ < world_->machines.size(); i_++) {
					WorldMachines* machine_ = &world_->machines[i_];
					if (machine_->x == x_ and machine_->y == y_) {
						machine_->enabled = block_->enabled;
						machine_->target_item = block_->id;
						found_ = true;
						break;
					}
				} if (not found_) {
					//cout << "created new world machine" << endl;
					WorldMachines new_machine;
					new_machine.enabled = block_->enabled;
					new_machine.x = x_, new_machine.y = y_;
					new_machine.id = block_->fg;
					new_machine.target_item = block_->id;
					world_->machines.push_back(new_machine);
					if (find(t_worlds.begin(), t_worlds.end(), world_->name) == t_worlds.end()) {
						t_worlds.push_back(world_->name);
					}
				}
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
			}
			break;
		}
		else if (a_[i_] == "autoactionblock") {
			if (a_.size() != 15 and a_.size() != 16) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (owner_name != user_name and not pInfo(p_)->dev) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (check_lock->owner_name != pInfo(p_)->tankIDName) break;
					}
					else {
						break;
					}
				}
				switch (t_) {
				case 6950: case 6952:
				{
					for (int b_ = 0; b_ < a_.size(); b_++) {
						if (a_[b_] == "refillfuel") {
							if (not isdigit(a_[b_ + 1][0])) return;
							int target_amount = atoi(a_[b_ + 1].c_str());
							if (target_amount > pInfo(p_)->gems) target_amount = pInfo(p_)->gems;
							if (target_amount == 0) continue;
							if (block_->pr + target_amount > 8000) {
								target_amount = 8000 - block_->pr;
							}
							pInfo(p_)->gems -= target_amount;
							{
								gamepacket_t p;
								p.Insert("OnSetBux");
								p.Insert(pInfo(p_)->gems);
								p.Insert(0);
								p.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
								if (pInfo(p_)->supp >= 2) {
									p.Insert((float)33796, (float)1, (float)0);
								}
								p.CreatePacket(p_);
							}
							block_->pr += target_amount;
						}
						else if (a_[b_] == "selecttarget") {
							if (not isdigit(a_[b_ + 1][0])) return;
							uint32_t target_item = atoi(a_[b_ + 1].c_str());
							if (t_ == 6952) {
								if (items[target_item].blockType == BlockTypes::SEED) target_item--;
								if (items[target_item].rarity == 999) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Sorry that item is `4NOT`` allowed in this machine!");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("Sorry that item is `4NOT`` allowed in this machine!");
										p.CreatePacket(p_);
									}
									return;
								} if (items[target_item].blockType == BlockTypes::CLOTHING or items[target_item].properties & Property_Mod) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("`4NOPE!``");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("`4NOPE!``");
										p.CreatePacket(p_);
									}
									return;
								}
							}
							else {
								if (items[target_item].blockType != BlockTypes::SEED) target_item++;
								if (items[target_item].rarity == 999) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Sorry that item is `4NOT`` allowed in this machine!");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("Sorry that item is `4NOT`` allowed in this machine!");
										p.CreatePacket(p_);
									}
									return;
								}
								if (items[target_item].collisionType != 1 and items[target_item].blockType != BlockTypes::SEED) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("`4NOPE!``");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("`4NOPE!``");
										p.CreatePacket(p_);
									}
									return;
								}
							}
							block_->id = target_item;
						}
					}
					{
						bool found_ = false;
						for (int i_ = 0; i_ < world_->machines.size(); i_++) {
							WorldMachines* machine_ = &world_->machines[i_];
							if (machine_->x == x_ and machine_->y == y_) {
								machine_->enabled = block_->enabled;
								machine_->target_item = block_->id;
								found_ = true;
								break;
							}
						} if (not found_) {
							//cout << "created new world machine" << endl;
							WorldMachines new_machine;
							new_machine.enabled = block_->enabled;
							new_machine.x = x_, new_machine.y = y_;
							new_machine.id = block_->fg;
							new_machine.target_item = block_->id;
							world_->machines.push_back(new_machine);
							if (find(t_worlds.begin(), t_worlds.end(), world_->name) == t_worlds.end()) {
								t_worlds.push_back(world_->name);
							}
						}
					}
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, p_, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
					if (block_->locked) {
						upd_lock(*block_, *world_, p_);
					}
					break;
				}
				default:
					break;
				}
			}
			break;
		}
		else if (a_[i_] == "boombox_edit") {
			if (a_.size() != 15) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				if (not items[t_].can_be_changed_two_types) break;
				block_->flags = (block_->flags & 0x00800000 and a_[i_ + 8] == "0" ? block_->flags ^ 0x00800000 : (a_[i_ + 8] == "1" ? block_->flags | 0x00800000 : block_->flags));
				block_->flags = (block_->flags & 0x02000000 and a_[i_ + 10] == "0" ? block_->flags ^ 0x02000000 : (a_[i_ + 10] == "1" ? block_->flags | 0x02000000 : block_->flags));
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
			}
			break;
		}
		else if (a_[i_] == "switcheroo_edit") {
			if (a_.size() != 13) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				if (not items[t_].entrance and not items[t_].can_be_changed_to_public) break;
				block_->flags = (block_->flags & 0x00800000 and a_[i_ + 8] == "0" ? block_->flags ^ 0x00800000 : (a_[i_ + 8] == "1" ? block_->flags | 0x00800000 : block_->flags));
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
			}
			break;
		}
		else if (a_[i_] == "trade_item") {
			if (a_.size() != 10) break;
			if (not isdigit(a_[5][0]) or not isdigit(a_[8][0])) break;
			int item_id = atoi(a_[5].c_str()), item_count = atoi(a_[8].c_str()), c_ = 0;
			modify_inventory(p_, item_id, c_);
			if (c_ < item_count or c_ == 0) break;
			mod_trade(p_, atoi(a_[5].c_str()), atoi(a_[8].c_str()));
			break;
		}
		else if (a_[i_] == "door_edit") {
			if (a_.size() != 19 and a_.size() != 17) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				if (items[t_].blockType != BlockTypes::DOOR and items[t_].blockType != BlockTypes::PORTAL) break;
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (not world_->open_to_public and owner_name != user_name and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (not check_lock->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				string door_name = a_[i_ + 8];
				string door_target = a_[i_ + 10];
				string door_id = a_[i_ + 12];
				if (a_.size() == 19) {
					string checkbox_locked = a_[i_ + 14];
					block_->open = (checkbox_locked == "0" ? false : true);
				}
				if (door_name.size() > 100) break;
				if (door_target.size() > 24) break;
				if (door_id.size() > 11) break;
				transform(door_target.begin(), door_target.end(), door_target.begin(), ::toupper);
				transform(door_id.begin(), door_id.end(), door_id.begin(), ::toupper);
				block_->door_destination = door_target, block_->door_id = door_id;
				block_->txt = door_name;
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + door_name.size() + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 112 + door_name.size() + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
			}
			break;
		}
		else if (a_[i_] == "vending") {
			if (a_.size() != 14 and a_.size() != 13 and a_.size() != 20 and a_.size() != 17 and a_.size() != 19 and a_.size() != 23) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			if (a_.size() == 13 and not isdigit(a_[i_ + 8][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			if (abs(x_ * 32 - pInfo(p_)->x) > 15 || abs(y_ * 32 - pInfo(p_)->y) > 15) {
				gamepacket_t p;
				p.Insert("OnTalkBubble");
				p.Insert(pInfo(p_)->netID);
				p.Insert("Get closer!");
				p.Insert(0), p.Insert(0);
				p.CreatePacket(p_);
				break;
			}
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				if (items[t_].blockType != BlockTypes::VENDING) break;
				if (a_.size() == 19 or a_.size() == 23) {
					if (not isdigit(a_[i_ + 11][0])) break;
					int expectprice = atoi(a_[i_ + 8].c_str()), expectitem = atoi(a_[i_ + 11].c_str()), buycount = atoi(a_[i_ + 14].c_str());
					if (a_.size() == 23) {
						buycount = atoi(a_[i_ + 11].c_str()), expectprice = atoi(a_[i_ + 14].c_str()), expectitem = atoi(a_[i_ + 17].c_str());
					}
					if (expectprice != block_->pr) break;
					if (expectitem != block_->id) break;
					if (buycount < 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("NEGATIVE, DOES NOT COMPUTE");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(p_);
						break;
					}
					if (buycount == 0) break;
					int normal_price = (block_->pr > 0 ? block_->pr : (block_->pr * -1));
					int actual_buy_count = (block_->pr > 0 ? buycount : (normal_price < buycount ? buycount / normal_price : normal_price / buycount) * (block_->pr * -1));
					if (actual_buy_count == 0 or actual_buy_count > block_->c_) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("There aren't enough available to fulfill your order!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("There aren't enough available to fulfill your order!");
							p.CreatePacket(p_);
						}
						break;
					}
					if (block_->pr < 0) {
						if (buycount < (block_->pr * -1)) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("You have to buy at least 1 World Lock's worth.");
							p.Insert(0), p.Insert(1);
							p.CreatePacket(p_);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("You have to buy at least 1 World Lock's worth.");
								p.CreatePacket(p_);
							}
							break;
						}
					}
					int my_wls = get_wls(p_);
					int cost_ = (block_->pr > 0 ? block_->pr * buycount : (normal_price < buycount ? buycount / normal_price : normal_price / buycount));
					if (cost_ > my_wls) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You can't afford that many!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("You can't afford that many!");
							p.CreatePacket(p_);
						}
						break;
					}
					int has_alr = 0;
					modify_inventory(p_, block_->id, has_alr);
					if (has_alr + actual_buy_count > 200) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You don't have room in your backpack!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("You don't have room in your backpack!");
							p.CreatePacket(p_);
						}
						break;
					}
					int free_slots = get_free_slots(pInfo(p_));
					if (free_slots == 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You don't have room in your backpack!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("You don't have room in your backpack!");
							p.CreatePacket(p_);
						}
						break;
					}
					if (a_.size() == 19) {
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wPurchase Confirmation``|left|1366|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|\nadd_textbox|`4You'll give:``|left|\nadd_spacer|small|\nadd_label_with_icon|small|(`w" + to_string(cost_) + "``) `8World Locks``|left|242|\nadd_spacer|small|\nadd_textbox|`2You'll get:``|left|\nadd_spacer|small|\nadd_label_with_icon|small|(`w" + to_string(actual_buy_count) + "``) `2" + items[block_->id].ori_name + "``|left|" + to_string(block_->id) + "|\nadd_spacer|small|\nadd_spacer|small|\nadd_textbox|Are you sure you want to make this purchase?|left|\nembed_data|verify|1\nembed_data|buycount|" + to_string(buycount) + "\nembed_data|expectprice|" + to_string(expectprice) + "\nembed_data|expectitem|" + to_string(expectitem) + "\nend_dialog|vending|Cancel|OK|");
						p.CreatePacket(p_);
						break;
					}
					int diamond_lock = 0, world_lock = 0, grazinti_wl = 0;
					int is_viso_worldlock = cost_;
					while (is_viso_worldlock >= 100) {
						is_viso_worldlock -= 100;
						diamond_lock++;
					}
					world_lock = is_viso_worldlock;
					int c_ = 0;
					modify_inventory(p_, 242, c_);
					int turi_world_lock = c_, t_w = c_ * -1;
					c_ = 0;
					modify_inventory(p_, 1796, c_);
					int turi_diamond_lock = c_, t_d = c_ * -1;
					while (diamond_lock > turi_diamond_lock && turi_world_lock >= 100) {
						turi_diamond_lock++, turi_world_lock -= 100;
					} if (diamond_lock > turi_diamond_lock) break;
					while (world_lock > turi_world_lock && turi_diamond_lock >= 1) {
						turi_diamond_lock--, turi_world_lock += 100;
					} if (world_lock > turi_world_lock) break;
					turi_world_lock -= world_lock, turi_diamond_lock -= diamond_lock;
					int a_ = actual_buy_count;
					if (modify_inventory(p_, block_->id, a_) == 0) {
						modify_inventory(p_, 242, t_w), modify_inventory(p_, 1796, t_d);
						modify_inventory(p_, 242, turi_world_lock), modify_inventory(p_, 1796, turi_diamond_lock);
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`7[```9" + pInfo(p_)->tankIDName + " bought " + to_string(actual_buy_count) + " " + items[block_->id].ori_name + " for " + to_string(cost_) + " World Locks.```7]``");
						gamepacket_t p2(0, pInfo(p_)->netID);
						p2.Insert("OnPlayPositioned");
						p2.Insert("audio/cash_register.wav");
						PlayerMoving data_{};
						data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
						data_.packetType = 19, data_.plantingTree = 100;
						data_.punchX = block_->id, data_.punchY = pInfo(p_)->netID;
						int32_t to_netid = pInfo(p_)->netID;
						BYTE* raw = packPlayerMoving(&data_);
						raw[3] = 5;
						memcpy(raw + 8, &to_netid, 4);
						block_->c_ -= actual_buy_count, block_->wl += cost_;
						if (block_->c_ <= 0) {
							block_->id = 0, block_->pr = 0;
						}
						PlayerMoving data_vending{};
						data_vending.packetType = 5, data_vending.punchX = x_, data_vending.punchY = y_, data_vending.characterState = 0x8;
						BYTE* v_ = packPlayerMoving(&data_vending, 112 + alloc_(world_, block_));
						BYTE* blc = v_ + 56;
						form_visual(blc, *block_, *world_, p_, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, v_, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								p.CreatePacket(currentPeer);
								p2.CreatePacket(currentPeer);
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[]raw, v_, blc;
						if (block_->locked) {
							upd_lock(*block_, *world_, p_);
						}
						break;
					}
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("You don't have room in your backpack!");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(p_);
					{
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("You don't have room in your backpack!");
						p.CreatePacket(p_);
					}
					break;
				}
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (owner_name != user_name and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end() && world_->v_p == false) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (check_lock->owner_name != pInfo(p_)->tankIDName) break;
					}
					else break;
				}
				bool update_ = false;
				if (cch.find("chk_peritem|1") != string::npos and cch.find("chk_perlock|1") != string::npos) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("You can't have it both ways.");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(p_);
					{
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("You can't have it both ways.");
						p.CreatePacket(p_);
					}
					break;
				} if (a_.size() == 20 or a_.size() == 17 or a_.size() == 14) {
					for (int b_ = 0; b_ < a_.size(); b_++) {
						if (a_[b_].substr(0, 4) == "chk_") {
							vector<string> target_ = explode("_", a_[b_]);
							if (target_[1] == "peritem") {
								if (block_->pr < 0 and a_[b_ + 1] == "1") {
									block_->pr *= -1, update_ = true;
								}
							}
							else if (target_[1] == "perlock") {
								if (block_->pr > 0 and a_[b_ + 1] == "1") {
									if (block_->pr > block_->c_) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough in there for anyone to buy at that price!");
										p.Insert(0), p.Insert(1);
										p.CreatePacket(p_);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("You don't have enough in there for anyone to buy at that price!");
											p.CreatePacket(p_);
										}
										update_ = false;
										break;
									}
									block_->pr = block_->pr * -1;
									update_ = true;
								}
							}
						}
						else if (a_[b_] == "setprice") {
							if (pInfo(p_)->tankIDName == world_->owner_name or find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) != world_->admins.end() && world_->v_p) {
								int price_ = atoi(a_[b_ + 1].c_str());
								if (price_ == 0 or not isdigit(a_[b_ + 1][0]) and price_ >= 0) {
									block_->pr = 0;
									update_ = true;
								}
								else if (price_ < 0 or price_ > 20000) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Well, that's a silly price.");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									break;
								}
								else {
									if (block_->pr < 0) {
										if (price_ > block_->c_) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(p_)->netID);
											p.Insert("You don't have enough in there for anyone to buy at that price!");
											p.Insert(0), p.Insert(1);
											p.CreatePacket(p_);
											{
												gamepacket_t p;
												p.Insert("OnConsoleMessage");
												p.Insert("You don't have enough in there for anyone to buy at that price!");
												p.CreatePacket(p_);
											}
											update_ = false;
											break;
										} if (price_ > 200) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(p_)->netID);
											p.Insert("That price is so low, nobody can carry a World Lock worth of items!");
											p.Insert(0), p.Insert(1);
											p.CreatePacket(p_);
											{
												gamepacket_t p;
												p.Insert("OnConsoleMessage");
												p.Insert("That price is so low, nobody can carry a World Lock worth of items!");
												p.CreatePacket(p_);
											}
											break;
										}
									}
									block_->pr = (block_->pr < 0 ? price_ * -1 : price_);
									update_ = true;
								}
							}
						}
						else if (a_[b_] == "addstock") {
							if (pInfo(p_)->tankIDName == world_->owner_name or find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) != world_->admins.end() && world_->v_p) {
								if (block_->id != 0) {
									int c_ = 0;
									modify_inventory(p_, block_->id, c_);
									int has_ = c_;
									c_ *= -1;
									if (modify_inventory(p_, block_->id, c_) == 0) {
										block_->c_ += has_;
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("Added " + to_string(has_) + " items to the machine.");
										p.Insert(0), p.Insert(1);
										p.CreatePacket(p_);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("Added " + to_string(has_) + " items to the machine.");
											p.CreatePacket(p_);
										}
									}
								}
								update_ = false;
								break;
							}
						}
						else if (a_[b_] == "withdraw") {
							if (pInfo(p_)->tankIDName == world_->owner_name or find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) != world_->admins.end() && world_->v_p) {
								if (block_->wl != 0) {
									int a_ = block_->wl;
									if (modify_inventory(p_, 242, a_) != 0) {
										if (a_ < 100) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(p_)->netID);
											p.Insert("You don't have room in your backpack!");
											p.Insert(0), p.Insert(1);
											p.CreatePacket(p_);
											{
												gamepacket_t p;
												p.Insert("OnConsoleMessage");
												p.Insert("You don't have room in your backpack!");
												p.CreatePacket(p_);
											}
											break;
										}
										int diamond_locks = a_ / 100;
										int world_locks = a_ - (diamond_locks * 100);
										int turi_dl = 0;
										modify_inventory(p_, 1796, turi_dl);
										int turi_wl = 0;
										modify_inventory(p_, 242, turi_wl);
										uint32_t grazinti = -1;
										if (diamond_locks > 200) {
											grazinti = diamond_locks - 200;
											diamond_locks = 200;
										}
										if (turi_wl + world_locks > 200 or turi_dl + diamond_locks > 200) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(p_)->netID);
											p.Insert("You don't have room in your backpack!");
											p.Insert(0), p.Insert(1);
											p.CreatePacket(p_);
											{
												gamepacket_t p;
												p.Insert("OnConsoleMessage");
												p.Insert("You don't have room in your backpack!");
												p.CreatePacket(p_);
											}
											break;
										}
										int as2 = world_locks, as4 = diamond_locks;
										modify_inventory(p_, 242, world_locks);
										modify_inventory(p_, 1796, diamond_locks);
										block_->wl = grazinti != -1 ? grazinti * 100 : 0;
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										string collected_ = "";
										collected_ += (as4 != 0 ? "" + to_string(as4) + " Diamond Locks" : "");
										string aa_ = (not collected_.empty() ? " and " : " ");
										collected_ += (as2 != 0 ? aa_ + to_string(as2) + " World Locks" : "");
										collected_ += ".";
										p.Insert("You collected " + collected_);
										p.Insert(0), p.Insert(1);
										p.CreatePacket(p_);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("You collected " + collected_);
											p.CreatePacket(p_);
										}
										break;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You collected " + to_string(block_->wl) + " World Locks.");
										p.Insert(0), p.Insert(1);
										p.CreatePacket(p_);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("You collected " + to_string(block_->wl) + " World Locks.");
											p.CreatePacket(p_);
										}
										block_->wl = 0;
									}
								}
								update_ = false;
							}
							break;
						}
						else if (a_[b_] == "upgradedigital") {
							if (pInfo(p_)->tankIDName == world_->owner_name or find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) != world_->admins.end() && world_->v_p) {
								gamepacket_t p;
								if (pInfo(p_)->gems >= 4000) {
									pInfo(p_)->gems -= 4000;
									p.Insert("OnSetBux"), p.Insert(pInfo(p_)->gems), p.Insert(0), p.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
									if (pInfo(p_)->supp >= 2) p.Insert((float)33796, (float)1, (float)0);
									p.CreatePacket(p_);
									block_->fg = 9268;
									PlayerMoving data_{};
									data_.packetType = 17, data_.netID = 44, data_.YSpeed = 44, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
									BYTE* raw = packPlayerMoving(&data_);
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
										send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
									delete[] raw;
									update_ = false;
								}
								else p.Insert("OnTalkBubble"), p.Insert(pInfo(p_)->netID), p.Insert("You don't have enough gems!."), p.Insert(0), p.Insert(1);
								p.CreatePacket(p_);
								break;
							}
						}
						else if (a_[b_] == "pullstock") {
							if (pInfo(p_)->tankIDName == world_->owner_name or find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) != world_->admins.end() && world_->v_p) {
								int c_ = block_->c_;
								if (modify_inventory(p_, block_->id, c_) == 0) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("You picked up " + to_string(block_->c_) + " " + items[block_->id].ori_name + ".");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("You picked up " + to_string(block_->c_) + " " + items[block_->id].ori_name + ".");
										p.CreatePacket(p_);
									}
									block_->c_ = 0, block_->id = 0, block_->pr = 0;
								}
								else if (block_->c_ > 200) {
									int has_ = 0;
									modify_inventory(p_, block_->id, has_);
									int give_ = 200 - has_;
									block_->c_ -= give_;
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("You picked up " + to_string(give_) + " " + items[block_->id].ori_name + ", leaving " + to_string(block_->c_) + " in the machine.");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("You picked up " + to_string(give_) + " " + items[block_->id].ori_name + ", leaving " + to_string(block_->c_) + " in the machine.");
										p.CreatePacket(p_);
									}
									modify_inventory(p_, block_->id, give_);
								}
								update_ = false;
								break;
							}
						}
					}
				}
				else {
					if (pInfo(p_)->tankIDName == world_->owner_name or find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) != world_->admins.end() && world_->v_p) {
						if (block_->id != 0) break;
						int item_id = atoi(a_[i_ + 8].c_str());
						int c_ = 0, am_ = 0;
						modify_inventory(p_, item_id, c_);
						if (c_ == 0) break;
						if (items[item_id].untradeable or item_id == 1424 or item_id == 5816 or item_id == 242 or item_id == 1796 or item_id == 9770 or item_id == 10362 or item_id == 9846 or item_id == 9772 or item_id == 5480 or item_id == 1424 or item_id == 7188 or items[item_id].blockType == BlockTypes::FISH) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert((items[item_id].blockType == BlockTypes::LOCK or item_id == 1424 or item_id == 5816 ? "No no no." : "Can't put that in a " + items[block_->fg].name + "."));
							p.Insert(0), p.Insert(1);
							p.CreatePacket(p_);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert((items[item_id].blockType == BlockTypes::LOCK or item_id == 1424 or item_id == 5816 ? "No no no." : "Can't put that in a " + items[block_->fg].name + "."));
								p.CreatePacket(p_);
							}
							break;
						}
						am_ = c_;
						c_ *= -1;
						if (modify_inventory(p_, item_id, c_) == 0) {
							block_->id = item_id;
							block_->c_ = am_;
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("`7[``" + pInfo(p_)->tankIDName + " put `2" + items[item_id].ori_name + "`` in the " + items[block_->fg].name + ".`7]``");
							p.Insert(0);
							gamepacket_t p2;
							p2.Insert("OnConsoleMessage");
							p2.Insert("`7[``" + pInfo(p_)->tankIDName + " put `2" + items[item_id].ori_name + "`` in the " + items[block_->fg].name + ".`7]``");
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == world_->name) {
									p.CreatePacket(currentPeer);
									p2.CreatePacket(currentPeer);
								}
							}
							{
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert(get_vending(p_, world_, block_, x_, y_));
								p.CreatePacket(p_);
							}
						}
					}
				}
				if (update_) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert((block_->pr == 0 ? "`7[``" + pInfo(p_)->tankIDName + " disabled the Vending Machine.```7]``" : "`7[``" + pInfo(p_)->tankIDName + " changed the price of `2" + items[block_->id].ori_name + "`` to " + (block_->pr < 0 ? "`6" + to_string(block_->pr * -1) + " per World Lock.```7]``" : "`5" + to_string(block_->pr) + " World Locks each.```7]``")));
					p.Insert(0);
					gamepacket_t p2;
					p2.Insert("OnConsoleMessage");
					p2.Insert((block_->pr == 0 ? "`7[``" + pInfo(p_)->tankIDName + " disabled the Vending Machine.```7]``" : "`7[``" + pInfo(p_)->tankIDName + " changed the price of `2" + items[block_->id].ori_name + "`` to " + (block_->pr < 0 ? "`6" + to_string(block_->pr * -1) + " per World Lock.```7]``" : "`5" + to_string(block_->pr) + " World Locks each.```7]``")));
					PlayerMoving data_{};
					data_.packetType = 17;
					data_.netID = 44;
					data_.YSpeed = 44;
					data_.x = x_ * 32 + 16;
					data_.y = y_ * 32 + 16;
					BYTE* raw = packPlayerMoving(&data_);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							p.CreatePacket(currentPeer);
							p2.CreatePacket(currentPeer);
							packet_(currentPeer, "action|play_sfx\nfile|audio/terraform.wav\ndelayMS|0");
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw;
				}
				PlayerMoving data_{};
				data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
				BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
				BYTE* blc = raw + 56;
				form_visual(blc, *block_, *world_, p_, false);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw, blc;
				if (block_->locked) {
					upd_lock(*block_, *world_, p_);
				}
			}
			break;
		}
		else if (a_[i_] == "displayblock") {
			if (a_.size() != 11) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
				if (items[t_].blockType != BlockTypes::DISPLAY) break;
				string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
				if (owner_name != user_name and not owner_name.empty()) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (check_lock->owner_name != pInfo(p_)->tankIDName) break;
					}
					else {
						break;
					}
				}
				if (a_.size() == 11) {
					int c_ = 1;
					if (modify_inventory(p_, block_->id, c_) == 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You removed `5" + items[block_->id].name + "`` from the " + items[block_->fg].name + ".");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(p_);
						block_->id = 0;
						{
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, p_, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == world_->name) {
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, p_);
							}
						}
					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You don't have room to pick that up!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(p_);
					}
				}
			}
			break;
		}
		else if (a_[i_] == "trade_confirm") {
			if (a_.size() != 8) break;
			if (a_[5] == "back") {
				cancel_trade(p_, true);
			}
			else if (a_[5] == "accept") {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(p_)->world) {
						if (pInfo(currentPeer)->netID == pInfo(p_)->trading_with and pInfo(p_)->netID == pInfo(currentPeer)->trading_with) {
							pInfo(p_)->accept_the_offer = true;
							if (pInfo(currentPeer)->accept_the_offer and pInfo(p_)->accept_the_offer) {
								string name_ = pInfo(p_)->world;
								vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
								if (p != worlds.end()) {
									World* world_ = &worlds[p - worlds.begin()];
									if (not trade_space_check(p_, currentPeer)) {
										cancel_trade(p_);
										return;
									}
									else if (not trade_space_check(currentPeer, p_)) {
										cancel_trade(p_);
										return;
									}
									bool c_ = false;
									for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
										if (c_) break;
										map<string, int>::iterator it;
										for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {
											if (it->first == 1424 or it->first == 5816) {
												for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
													if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
														uint16_t id_ = world_->blocks[i_].fg;
														if (id_ == 202 or id_ == 204 or id_ == 206 or id_ == 4994) {
															cancel_trade(p_);
															return;
														}
													}
												}
												c_ = true;
												break;
											}
										}
									}
									c_ = false;
									for (int i_ = 0; i_ < pInfo(currentPeer)->trade_items.size(); i_++) {
										if (c_) break;
										map<string, int>::iterator it;
										for (auto it = pInfo(currentPeer)->trade_items[i_].begin(); it != pInfo(currentPeer)->trade_items[i_].end(); it++) {
											if (it->first == 1424 or it->first == 5816) {
												for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
													if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
														uint16_t id_ = world_->blocks[i_].fg;
														if (id_ == 202 or id_ == 204 or id_ == 206 or id_ == 4994) {
															cancel_trade(currentPeer);
															return;
														}
													}
												}
												c_ = true;
												break;
											}
										}
									}
									vector<string> traded_p;
									int time_out = 0;
									for (int i_ = 0; i_ < pInfo(p_)->trade_items.size(); i_++) {
										map<string, int>::iterator it;
										for (auto it = pInfo(p_)->trade_items[i_].begin(); it != pInfo(p_)->trade_items[i_].end(); it++) {

											int c_ = it->second * -1;
											if (modify_inventory(p_, it->first, c_, true) == 0) {
												traded_p.push_back(to_string(it->second) + " " + items[it->first].name);
												if (it->first == 1424 or it->first == 5816) {
													transfer_world(world_, p_, currentPeer);
												}
												else {
													int c2_ = it->second;
													modify_inventory(currentPeer, it->first, c2_, true);
												}
												PlayerMoving data_{};
												time_out += 450;
												data_.packetType = 19, data_.plantingTree = (i_ + 1) * 450, data_.netID = pInfo(currentPeer)->netID;
												data_.punchX = it->first, data_.punchY = it->first;
												int32_t to_netid = pInfo(p_)->netID;
												BYTE* raw = packPlayerMoving(&data_);
												raw[3] = 3;
												memcpy(raw + 8, &to_netid, 4);
												for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
													if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
													if (pInfo(currentPeer2)->world == world_->name) {
														send_raw(currentPeer2, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
													}
												}
												delete[]raw;
												{
													gamepacket_t p((i_ + 1) * 450, pInfo(p_)->netID);
													p.Insert("OnPlayPositioned");
													p.Insert("audio/change_clothes.wav");
													p.CreatePacket(p_);
												}
												{
													gamepacket_t p((i_ + 1) * 450, pInfo(currentPeer)->netID);
													p.Insert("OnPlayPositioned");
													p.Insert("audio/change_clothes.wav");
													p.CreatePacket(currentPeer);
												}
											}
										}
									}
									string traded_ = "";
									if (traded_p.size() != 0) {
										for (int i_ = 0; i_ < traded_p.size(); i_++) {
											if (traded_p.size() == i_ + 1)
												traded_ += traded_p[i_];
											else if (traded_p.size() - 2 == i_)
												traded_ += traded_p[i_] + " and ";
											else
												traded_ += traded_p[i_] + ", ";
										}
									}
									else {
										traded_ = "nothing";
									}
									traded_p.clear();
									for (int i_ = 0; i_ < pInfo(currentPeer)->trade_items.size(); i_++) {
										map<string, int>::iterator it;
										for (auto it = pInfo(currentPeer)->trade_items[i_].begin(); it != pInfo(currentPeer)->trade_items[i_].end(); it++) {

											int c_ = it->second * -1;
											if (modify_inventory(currentPeer, it->first, c_, true) == 0) {
												traded_p.push_back(to_string(it->second) + " " + items[it->first].name);
												if (it->first == 1424 or it->first == 5816) {
													transfer_world(world_, currentPeer, p_);
												}
												else {
													int c2_ = it->second;
													modify_inventory(p_, it->first, c2_, true);
												}
												PlayerMoving data_{};
												data_.packetType = 19, data_.plantingTree = (i_ + 1) * 450 + time_out, data_.netID = pInfo(p_)->netID;
												data_.punchX = it->first, data_.punchY = it->first;
												int32_t to_netid = pInfo(currentPeer)->netID;
												BYTE* raw = packPlayerMoving(&data_);
												raw[3] = 3;
												memcpy(raw + 8, &to_netid, 4);
												for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
													if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
													if (pInfo(currentPeer2)->world == world_->name) {
														send_raw(currentPeer2, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
													}
												}
												delete[]raw;
												{
													gamepacket_t p((i_ + 1) * 450 + time_out, pInfo(p_)->netID);
													p.Insert("OnPlayPositioned");
													p.Insert("audio/change_clothes.wav");
													p.CreatePacket(p_);
												}
												{
													gamepacket_t p((i_ + 1) * 450 + time_out, pInfo(currentPeer)->netID);
													p.Insert("OnPlayPositioned");
													p.Insert("audio/change_clothes.wav");
													p.CreatePacket(currentPeer);
												}
											}
										}
									}
									string traded2_ = "";
									if (traded_p.size() != 0) {
										for (int i_ = 0; i_ < traded_p.size(); i_++) {
											if (traded_p.size() == i_ + 1)
												traded2_ += traded_p[i_];
											else if (traded_p.size() - 2 == i_)
												traded2_ += traded_p[i_] + " and ";
											else
												traded2_ += traded_p[i_] + ", ";
										}
									}
									else {
										traded2_ = "nothing";
									}
									{
										//grow4good(p_, false, "trade", 1);
										//grow4good(currentPeer, false, "trade", 1);
										gamepacket_t p2;
										p2.Insert("OnConsoleMessage");
										p2.Insert("`1" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "`` traded " + traded2_ + " to " + pInfo(p_)->tankIDName + ".``");
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert("`1" + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` traded " + traded_ + " to " + pInfo(currentPeer)->tankIDName + ".``");
										ServerLog(pInfo(p_)->tankIDName + " traded " + traded_ + " to " + traded2_ + " with " + pInfo(currentPeer)->tankIDName);
										pInfo(currentPeer)->onTrade = false;
										for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
											if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
											if (pInfo(currentPeer2)->world == world_->name) {
												p.CreatePacket(currentPeer2);
												p2.CreatePacket(currentPeer2);
											}
										}
									}
									{
										gamepacket_t p(1250, pInfo(currentPeer)->netID);
										p.Insert("OnPlayPositioned");
										p.Insert("audio/keypad_hit.wav");
										p.CreatePacket(currentPeer), p.CreatePacket(p_);
									}
									//if (not pInfo(currentPeer)->invalid_data) save_player(pInfo(currentPeer), (f_saving_ ? false : true));
									//if (not pInfo(p_)->invalid_data) save_player(pInfo(p_), (f_saving_ ? false : true));
									pInfo(currentPeer)->block_trade = false, pInfo(currentPeer)->accept_the_offer = false, pInfo(currentPeer)->trade_accept = false, pInfo(currentPeer)->trading_with = -1, pInfo(currentPeer)->trade_items.clear();
									pInfo(p_)->block_trade = false, pInfo(p_)->trading_with = -1, pInfo(p_)->trade_accept = false, pInfo(p_)->accept_the_offer = false, pInfo(p_)->trade_items.clear();
								}
								return;
							}
							for (int i_ = 0; i_ < pInfo(currentPeer)->trade_items.size(); i_++) {
								map<string, int>::iterator it;
								for (auto it = pInfo(currentPeer)->trade_items[i_].begin(); it != pInfo(currentPeer)->trade_items[i_].end(); it++) {
									if (it->first == 1424 or it->first == 5816) {
										pInfo(p_)->accept_the_offer = false;
										send_trade_confirm_dialog(p_, currentPeer, true);
										{
											gamepacket_t p;
											p.Insert("OnTextOverlay");
											p.Insert("`6[``you must wait for the other player to accept first`6]``");
											p.CreatePacket(p_);
										}
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(currentPeer)->netID);
										p.Insert("`6[``You must accept first because you're selling a World Key`6]``");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(currentPeer);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("`6[``You must accept first because you're selling a World Key`6]``");
											p.CreatePacket(currentPeer);
										}
										return;
									}
								}
							}
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("`6[``Trade accepted, waiting for other player to accept`6]``");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(p_);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("`6[``Trade accepted, waiting for other player to accept`6]``");
								p.CreatePacket(p_);
							}
							{
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(currentPeer)->netID);
								p.Insert("`6[``Trade accepted by other player, waiting for you`6]``");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(currentPeer);
							}
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("`6[``Trade accepted by other player, waiting for you`6]``");
								p.CreatePacket(currentPeer);
							}
							return;
						}
					}
				}
				gamepacket_t p;
				p.Insert("OnTextOverlay");
				p.Insert("The other person left the trade!");
				p.CreatePacket(p_);
				pInfo(p_)->block_trade = false, pInfo(p_)->trading_with = -1, pInfo(p_)->trade_accept = false, pInfo(p_)->accept_the_offer = false, pInfo(p_)->trade_items.clear();
			}
			break;
		}
		else if (a_[i_] == "friends_remove_finish") {
			send_friends(p_);
			break;
		}
		else if (a_[i_] == "friends_remove") {
			if (a_.size() != 11) break;
			if (a_[8] == "back") {
				send_info_friend(p_, a_[5]);
				break;
			}
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				remove_friend(p_, world_, a_[5]);
			}
			break;
		}
		else if (a_[i_] == "mute_friend" or a_[i_] == "block_friend") {
			if (a_.size() != 8) break;
			if (a_[5] == "back") {
				send_info_friend(p_, pInfo(p_)->last_edit);
			}
			else if (a_[i_] == "mute_friend" and a_[5] == "ok") {
				for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
					if (pInfo(p_)->friends[c_].name == pInfo(p_)->last_edit) {
						if (pInfo(p_)->friends[c_].mute)
							pInfo(p_)->friends[c_].mute = false;
						else
							pInfo(p_)->friends[c_].mute = true;
					}
				}
				send_info_friend(p_, pInfo(p_)->last_edit);
			}
			else if (a_[i_] == "block_friend" and a_[5] == "ok") {
				for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
					if (pInfo(p_)->friends[c_].name == pInfo(p_)->last_edit) {
						if (pInfo(p_)->friends[c_].block_trade)
							pInfo(p_)->friends[c_].block_trade = false;
						else
							pInfo(p_)->friends[c_].block_trade = true;
					}
				}
				send_info_friend(p_, pInfo(p_)->last_edit);
			}
			break;
		}
		else if (a_[i_] == "friends_message") {
			if (a_.size() != 13) break;
			if (a_[8] == "back") {
				send_info_friend(p_, a_[5]);
			}
			else if (a_[8] == "send") {
				string message = explode("\n", explode("|", cch)[11])[0].c_str();
				SendCmd(p_, "/msg " + pInfo(p_)->last_wrenched + " " + message, true);
			}
			break;
		}
		else if (a_[i_] == "friends_edit" || a_[i_] == "friends_message") {
			if (a_.size() != 11) break;
			if (a_[8] == "back") {
				send_friends(p_);
			}
			else if (a_[8] == "remove" or a_[8] == "back") {
				edit_friend(p_, a_[5], (a_[8] == "back" ? true : false));
			}
			else if (a_[8] == "goto") {
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->tankIDName == a_[5]) {
						for (int c_ = 0; c_ < pInfo(currentPeer)->friends.size(); c_++) {
							if (pInfo(currentPeer)->friends[c_].name == pInfo(p_)->tankIDName) {
								if (pInfo(currentPeer)->show_location_) {
									if (pInfo(currentPeer)->world.empty()) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("Hmm, my friend isn't in a world right now.");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
										break;
									}
									else if (pInfo(currentPeer)->world == pInfo(p_)->world) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You want to warp to the same world you're in?  That's illogical, captain.");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
										break;
									}
									join_world(p_, pInfo(currentPeer)->world);
								}
								break;
							}
						}
					}
				}
			}
			else if (a_[8] == "msg") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`5Message to ``" + a_[5] + "|left|660|\nadd_spacer|small|\nadd_text_input|text|||80|left|\nadd_spacer|small|\nembed_data|friendID|" + a_[5] + "\nadd_button|send|`5Send``|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|friends_message|||\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			else if (a_[8] == "mute" or a_[8] == "trade_block") {
				for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
					if (pInfo(p_)->friends[c_].name == a_[5]) {
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						if (a_[8] == "mute") {
							if (not pInfo(p_)->friends[c_].mute)
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|Are you sure you want to `4Mute`` " + a_[5] + "? You will not receive any messages from this player until you unmute, consider this /ignore a friend|left|\nadd_button|ok|OK|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|mute_friend|||\nadd_quick_exit|");
							else
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|Are you sure you want to `4Un Mute`` " + a_[5] + "? You will receive any messages from this player until you mute.|left|\nadd_button|ok|OK|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|mute_friend|||\nadd_quick_exit|");
						}
						else {
							if (not pInfo(p_)->friends[c_].block_trade)
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|Are you sure you want to `4Disable Trade`` with " + a_[5] + "? You will not receive any trade request until you enable trading again.|left|\nadd_button|ok|OK|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|block_friend|||\nadd_quick_exit|");
							else
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|Are you sure you want to `4Enable Trade`` with " + a_[5] + "? You will receive any trade request until you disable trading again.|left|\nadd_button|ok|OK|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|block_friend|||\nadd_quick_exit|");
						}
						p.CreatePacket(p_);
					}
				}
			}
			break;
		}
		else if (a_[i_] == "friends_options") {
			if (a_.size() != 12) break;
			if (a_[7] == "checkbox_public") {
				if (not pInfo(p_)->show_location_ and a_[8] == "1") {
					pInfo(p_)->show_location_ = true;
				}
				else if (pInfo(p_)->show_location_ and a_[8] == "0") {
					pInfo(p_)->show_location_ = false;
				}
			}
			if (a_[9] == "checkbox_notifications") {
				if (not pInfo(p_)->show_friend_notifications_ and a_[10] == "1") {
					pInfo(p_)->show_friend_notifications_ = true;
				}
				else if (pInfo(p_)->show_friend_notifications_ and a_[10] == "0") {
					pInfo(p_)->show_friend_notifications_ = false;
				}
			}
			if (a_[5] == "back") {
				vector<string> friends_;
				for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
					friends_.push_back(pInfo(p_)->friends[c_].name);
				}
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (find(friends_.begin(), friends_.end(), pInfo(currentPeer)->tankIDName) != friends_.end()) {
						send_friends(p_, true);
						return;
					}
				}
				send_friends(p_);
			}
			break;
		}
		else if (a_[i_] == "mute_all_friends" or a_[i_] == "remove_all_friends" or a_[i_] == "block_all_friends") {
			if (a_.size() != 8) break;
			if (a_[5] == "back") {
				send_all_edit_friends(p_);
				break;
			}
			if (a_[5] == "close")
				break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
					if (find(pInfo(p_)->last_friends_selection.begin(), pInfo(p_)->last_friends_selection.end(), c_) != pInfo(p_)->last_friends_selection.end()) {
						if (a_[i_] == "mute_all_friends") {
							if (pInfo(p_)->friends[c_].mute)
								pInfo(p_)->friends[c_].mute = false;
							else
								pInfo(p_)->friends[c_].mute = true;
						}
						else if (a_[i_] == "block_all_friends") {
							if (pInfo(p_)->friends[c_].block_trade)
								pInfo(p_)->friends[c_].block_trade = false;
							else
								pInfo(p_)->friends[c_].block_trade = true;
						}
						else if (a_[i_] == "remove_all_friends") {
							remove_friend(p_, world_, pInfo(p_)->friends[c_].name, false);
						}
					}
				}
				send_all_edit_friends(p_);
			}
			break;
		}
		else if (a_[i_] == "all_friends") {
			if (a_.size() < 10) break;
			if (a_[5] == "back") {
				vector<string> friends_;
				for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
					friends_.push_back(pInfo(p_)->friends[c_].name);
				} for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (find(friends_.begin(), friends_.end(), pInfo(currentPeer)->tankIDName) != friends_.end()) {
						send_friends(p_, true);
						return;
					}
				}
				send_friends(p_);
				break;
			}
			pInfo(p_)->last_friends_selection.clear();
			string action_ = a_[5];
			try {
				for (int b_ = 0; b_ < a_.size(); b_++) {
					if (a_.at(b_).substr(0, 3) == "cf_") {
						if (a_.at(b_ + 1) == "1")
							pInfo(p_)->last_friends_selection.push_back(atoi(explode("_", a_.at(b_)).at(1).c_str()));
					}
				}
			}
			catch (out_of_range) {
				break;
			}
			if (pInfo(p_)->last_friends_selection.size() == 0) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|`oYou have not selected any friends|left|\nadd_spacer|small|\nadd_button|back|`wBack``|noflags|0|0|\nadd_button|close|`wClose``|noflags|0|0|\nend_dialog|remove_all_friends|||\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			else {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				if (action_ == "mute_multi_friends")
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|`oAre you sure you want to `4mute`` " + to_string(pInfo(p_)->last_friends_selection.size()) + " friends?|left|\nadd_spacer|small|\nadd_button|confirm|`wYes``|noflags|0|0|\nadd_button|back|`wBack``|noflags|0|0|\nadd_button|close|`wClose``|noflags|0|0|\nend_dialog|mute_all_friends|||\nadd_quick_exit|");
				else if (action_ == "block_multi_friends")
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|`oAre you sure you want to `4block trade`` " + to_string(pInfo(p_)->last_friends_selection.size()) + " friends?|left|\nadd_spacer|small|\nadd_button|confirm|`wYes``|noflags|0|0|\nadd_button|back|`wBack``|noflags|0|0|\nadd_button|close|`wClose``|noflags|0|0|\nend_dialog|block_all_friends|||\nadd_quick_exit|");
				else
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wConfirm``|left|1366|\nadd_textbox|`oAre you sure you want to `4remove`` " + to_string(pInfo(p_)->last_friends_selection.size()) + " friends?|left|\nadd_spacer|small|\nadd_button|confirm|`wYes``|noflags|0|0|\nadd_button|back|`wBack``|noflags|0|0|\nadd_button|close|`wClose``|noflags|0|0|\nend_dialog|remove_all_friends|||\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			break;
		}
		else if (a_[i_] == "friends") {
			if (a_.size() != 8) break;
			if (a_[5] == "back") {
				send_social(p_);
			}
			else if (a_[5] == "all_friends") {
				send_all_edit_friends(p_);
			}
			else if (a_[5] == "friends_options") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wFriend Options``|left|1366|\nadd_spacer|small|\nadd_checkbox|checkbox_public|Show location to friends|" + to_string(pInfo(p_)->show_location_) + "\nadd_checkbox|checkbox_notifications|Show friend notifications|" + to_string(pInfo(p_)->show_friend_notifications_) + "\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog|friends_options|||\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			else if (a_[5] == "friend_all") {
				send_friends(p_, true);
			}
			else {
				send_info_friend(p_, a_[5]);
			}
			break;
		}
		else if (a_[i_] == "leave_guild") {
			if (pInfo(p_)->guild_id == 0) break;
			uint32_t guild_id = pInfo(p_)->guild_id;
			vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				Guild* guild_information = &guilds[p - guilds.begin()];
				leave_guild(p_);
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`4Leave Guild``|left|1366|\nadd_spacer|small|\nadd_textbox|`o You are no longer in the guild.|left|\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog||||\nadd_quick_exit|");
				p.CreatePacket(p_);
				if (guild_information->guild_world == pInfo(p_)->world) {
					string name_ = pInfo(p_)->world;
					vector<World>::iterator p_w = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
					if (p_w != worlds.end()) {
						World* world_ = &worlds[p_w - worlds.begin()];
						int x_ = 0, y_ = 0;
						int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
						for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
							if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
								uint16_t id_ = world_->blocks[i_].fg;
								if (id_ == 5814) {
									x_ = i_ % xSize;
									y_ = i_ / xSize;
									break;
								}
							}
						}
						WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, p_, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == guild_information->guild_world) {
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, blc;
					}
				}
			}
			break;
		}
		else if (a_[i_] == "show_guild_logs") {
			if (a_.size() != 8) break;
			if (pInfo(p_)->guild_id == 0) break;
			if (a_[5] == "back") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_info(p_));
				p.CreatePacket(p_);
			}
			break;
		}
		else if (a_[i_] == "guildpage") {
			if (a_.size() != 10) break;
			if (a_[5] == "changestatementsubmit") {
				string new_stat = a_[8];
				if (new_stat.size() < 6 or new_stat.size() > 24) {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert(get_guild_statement_edit(p_, "`1You need to enter at least `$6 characters`` to add a guild statement!``"));
					p.CreatePacket(p_);
					break;
				}
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					if (new_stat == guild_information->guild_description) break;
					uint32_t my_rank = 0;
					for (GuildMember member_search : guild_information->guild_members) {
						if (member_search.member_name == pInfo(p_)->tankIDName) {
							my_rank = member_search.role_id;
							break;
						}
					}
					if (my_rank <= 2) break;
					guild_information->guild_description = new_stat;
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert(get_guild_info(p_));
					p.CreatePacket(p_);
					create_guild_log(guild_information, "`$" + pInfo(p_)->tankIDName + "`` `wchanged guild statement to `$" + new_stat + "``", 658);
				}
			}
			break;
		}
		else if (a_[i_] == "guild_members_options") {
			if (a_.size() != 12) break;
			if (pInfo(p_)->guild_id == 0) break;
			string public_ = a_[8];
			if (public_ != "0" and public_ != "1") break;
			string notifications_ = a_[10];
			if (notifications_ != "0" and notifications_ != "1") break;
			uint32_t guild_id = pInfo(p_)->guild_id;
			vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
			if (p != guilds.end()) {
				Guild* guild_information = &guilds[p - guilds.begin()];
				for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
					GuildMember* member_search = &guild_information->guild_members[i_];
					if (member_search->member_name == pInfo(p_)->tankIDName) {
						if (not member_search->public_location and public_ == "1") {
							member_search->public_location = true;
						}
						else if (member_search->public_location and public_ == "0") {
							member_search->public_location = false;
						}
						{
							if (not member_search->show_notifications and notifications_ == "1") {
								member_search->show_notifications = true;
							}
							else if (member_search->show_notifications and notifications_ == "0") {
								member_search->show_notifications = false;
							}
						}
						break;
					}
				}
			}
			if (a_[5] == "back") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_info(p_));
				p.CreatePacket(p_);
			}
			break;
		}
		else if (a_[i_] == "guildmembers") {
			if (a_.size() != 8) break;
			if (pInfo(p_)->guild_id == 0) break;
			if (a_[5] == "guild_members_all") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_info(p_, true));
				p.CreatePacket(p_);
			}
			else if (a_[5] == "guild_members_options") {
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					for (GuildMember member_search : guild_information->guild_members) {
						if (member_search.member_name == pInfo(p_)->tankIDName) {
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							string notify_ = (member_search.show_notifications ? "1" : "0");
							string public_ = (member_search.public_location ? "1" : "0");
							string guild_foreground = (guild_information->guild_mascot[0] == 0 ? "5814" : to_string(guild_information->guild_mascot[0]));
							string guild_background = (guild_information->guild_mascot[1] == 0 ? "0" : to_string(guild_information->guild_mascot[1]));
							p.Insert("set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Member Options``|left|" + guild_background + "|" + guild_foreground + "|1.0|0|\nadd_spacer|small|\nadd_checkbox|checkbox_public|Show location to guild members|" + public_ + "\nadd_checkbox|checkbox_notifications|Show guild member notifications|" + notify_ + "\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog|guild_members_options|||\nadd_quick_exit|");
							p.CreatePacket(p_);
							break;
						}
					}
				}
			}
			else if (a_[5] == "changestatement") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_statement_edit(p_));
				p.CreatePacket(p_);
			}
			else if (a_[5] == "guild_logs") {
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					vector<string> logs{};
					vector<vector<string>> sort_by_time;
					for (GuildLog log_ : guild_information->guild_logs) {
						sort_by_time.push_back({
							to_string(log_.date),
							log_.info,
							to_string(log_.display_id)
							});
					}
					sort(sort_by_time.begin(), sort_by_time.end(), [](const vector< string >& a, const vector< string >& b) {
						return atoi(a[1].c_str()) > atoi(b[1].c_str());
						});
					for (int i = sort_by_time.size() - 1; i >= 0; i--) {
						char* endptr = NULL;
						long long laikas_ = strtoll(sort_by_time[i][0].c_str(), &endptr, 10);
						const time_t* temp = &laikas_;
						string the_time = strtok(ctime(temp), "\n");
						logs.push_back("\nadd_label_with_icon|small|" + sort_by_time[i][1] + " `wat " + the_time + "|left|" + sort_by_time[i][2] + "|\nadd_spacer|small|");
					}
					if (logs.size() == 0) {
						logs.push_back("\nadd_label_with_icon|small|There are no logs at the moment!|left|8|\nadd_spacer|small|");
					}
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big| `w" + guild_information->guild_name + " Logs``|left|1436\nadd_spacer|small|" + join(logs, "") + "\nadd_button|back|`wBack``|noflags|0|0|\nend_dialog|show_guild_logs|||\nadd_quick_exit|");
					p.CreatePacket(p_);
				}
			}
			else if (a_[5] == "warphome") {
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					if (pInfo(p_)->world == guild_information->guild_world) {
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("You want to warp to the same world you're in?  That's illogical, captain.");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(p_);
						}

						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("You want to warp to the same world you're in?  That's illogical, captain.");
						p.CreatePacket(p_);
						break;
					}
					gamepacket_t p;
					p.Insert("OnTextOverlay");
					p.Insert("Moving to guild home (`2" + guild_information->guild_world + "``) ...");
					p.CreatePacket(p_);
					join_world(p_, guild_information->guild_world);
				}
			}
			else if (a_[5] == "back") {
				send_social(p_);
			}
			else if (a_[5] == "leave_guild") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wLeave Guild``|left|1366|\nadd_spacer|small|\nadd_textbox|`oAre you sure you wish to `4leave`` the guild?|left|\nadd_spacer|small|\nadd_button|leave_guild_confirmed|`4Leave Guild``|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|leave_guild|||\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			else {
				string guild_member_name = a_[5];
				send_guild_member_info(p_, guild_member_name);
			}
			break;
		}
		else if (a_[i_] == "guild_member_role_change_finish") {
			if (a_.size() != 8) break;
			if (a_[5] == "back") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_info(p_));
				p.CreatePacket(p_);
			}
			break;
		}
		else if (a_[i_] == "guild_member_role_change") {
			if (a_.size() != 14) break;
			if (a_[11] == "back") {
				string guild_member_name = a_[5];
				send_guild_member_info(p_, guild_member_name);
			}
			else if (a_[11] == "promote" or a_[11] == "demote") {
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					uint32_t my_rank = 0;
					for (GuildMember member_search : guild_information->guild_members) {
						if (member_search.member_name == pInfo(p_)->tankIDName) {
							my_rank = member_search.role_id;
							break;
						}
					}
					for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
						GuildMember* member_search = &guild_information->guild_members[i_];
						if (member_search->member_name == a_[5]) {
							bool can_promote = false;
							bool can_demote = false;
							if (member_search->role_id != 3) {
								if (member_search->role_id == 1 and my_rank == 3) {
									can_promote = true;
									can_demote = true;
								}
								else if (member_search->role_id == 2 and my_rank == 3) {
									can_promote = false;
									can_demote = true;
								}
								else if (member_search->role_id != 3 and my_rank >= 2 and member_search->role_id != 2) {
									can_promote = true;
								}
							}
							if (can_promote and a_[11] == "promote") {
								member_search->role_id++;
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGuild Member Promoted``|left|1366|\nadd_spacer|small|\nadd_textbox|`o" + a_[8] + " is `2promoted`` to " + (member_search->role_id == 3 ? "Leader" : member_search->role_id == 2 ? "Co-Leader" : member_search->role_id == 1 ? "Elder" : "Member") + "!|left|\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog|guild_member_role_change_finish|||\nadd_quick_exit|");
								p.CreatePacket(p_);
								{
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("`5[GUILD ALERT]`` `2" + a_[8] + "`` has been `2promoted`` `oto " + (member_search->role_id == 3 ? "Leader" : member_search->role_id == 2 ? "Co-Leader" : member_search->role_id == 1 ? "Elder" : "Member") + "!");
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->guild_id == guild_id) {
											p.CreatePacket(currentPeer);
										}
										if (pInfo(currentPeer)->tankIDName == a_[8]) {
											string name_ = pInfo(currentPeer)->world;
											vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
											if (p != worlds.end()) {
												World* world_ = &worlds[p - worlds.begin()];
												update_guild_name(currentPeer, guild_information->guild_world, world_);
												if (pInfo(currentPeer)->world == guild_information->guild_world) {
													string name_ = pInfo(currentPeer)->world;
													vector<World>::iterator p_w = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
													if (p_w != worlds.end()) {
														World* world_ = &worlds[p_w - worlds.begin()];
														int x_ = 0, y_ = 0;
														int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
														for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
															if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
																uint16_t id_ = world_->blocks[i_].fg;
																if (id_ == 5814) {
																	x_ = i_ % xSize;
																	y_ = i_ / xSize;
																	break;
																}
															}
														}
														WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
														BYTE* blc = raw + 56;
														form_visual(blc, *block_, *world_, currentPeer, false);
														for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
															if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
															if (pInfo(currentPeer2)->world == name_) {
																send_raw(currentPeer2, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
												}
											}
										}
									}
								}
								create_guild_log(guild_information, "`$" + pInfo(p_)->tankIDName + "`` `2promoted `$" + a_[8] + "`` `oto " + (member_search->role_id == 3 ? "Leader" : member_search->role_id == 2 ? "Co-Leader" : member_search->role_id == 1 ? "Elder" : "Member"), 484);
							}
							else if (can_demote and a_[11] == "demote") {
								member_search->role_id--;
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGuild Member Demoted``|left|1366|\nadd_spacer|small|\nadd_textbox|`o" + a_[8] + " is `4demoted`` to " + (member_search->role_id == 3 ? "Leader" : member_search->role_id == 2 ? "Co-Leader" : member_search->role_id == 1 ? "Elder" : "Member") + "!|left|\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog|guild_member_role_change_finish|||\nadd_quick_exit|");
								p.CreatePacket(p_);
								{
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("`5[GUILD ALERT]`` `2" + a_[8] + "`` has been `4demoted`` `oto " + (member_search->role_id == 3 ? "Leader" : member_search->role_id == 2 ? "Co-Leader" : member_search->role_id == 1 ? "Elder" : "Member") + "!");
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->guild_id == guild_id) {
											p.CreatePacket(currentPeer);
										}
										if (pInfo(currentPeer)->tankIDName == a_[8]) {
											string name_ = pInfo(currentPeer)->world;
											vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
											if (p != worlds.end()) {
												World* world_ = &worlds[p - worlds.begin()];
												update_guild_name(currentPeer, guild_information->guild_world, world_);
												if (pInfo(currentPeer)->world == guild_information->guild_world) {
													string name_ = pInfo(currentPeer)->world;
													vector<World>::iterator p_w = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
													if (p_w != worlds.end()) {
														World* world_ = &worlds[p_w - worlds.begin()];
														int x_ = 0, y_ = 0;
														int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
														for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
															if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
																uint16_t id_ = world_->blocks[i_].fg;
																if (id_ == 5814) {
																	x_ = i_ % xSize;
																	y_ = i_ / xSize;
																	break;
																}
															}
														}
														WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
														BYTE* blc = raw + 56;
														form_visual(blc, *block_, *world_, currentPeer, false);
														for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
															if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
															if (pInfo(currentPeer2)->world == name_) {
																send_raw(currentPeer2, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
												}
											}
										}
									}
								}
								create_guild_log(guild_information, "`$" + pInfo(p_)->tankIDName + "`` `4demoted `$" + a_[8] + "`` `oto " + (member_search->role_id == 3 ? "Leader" : member_search->role_id == 2 ? "Co-Leader" : member_search->role_id == 1 ? "Elder" : "Member"), 486);
							}
							break;
						}
					}
				}
			}
			break;
		}
		else if (a_[i_] == "guild_member_remove_finish") {
			if (a_.size() != 8) break;
			if (a_[5] == "back") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_info(p_));
				p.CreatePacket(p_);
			}
			break;
		}
		else if (a_[i_] == "guild_member_remove") {
			if (a_.size() != 11) break;
			if (a_[8] == "remove") {
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					uint32_t my_rank = 0;
					for (GuildMember member_search : guild_information->guild_members) {
						if (member_search.member_name == pInfo(p_)->tankIDName) {
							my_rank = member_search.role_id;
							break;
						}
					}
					for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
						GuildMember* member_search = &guild_information->guild_members[i_];
						if (member_search->member_name == a_[5]) {
							bool can_kick = my_rank >= 1 and member_search->role_id < my_rank;
							if (can_kick) {
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGuild Member removed``|left|1366|\nadd_spacer|small|\nadd_textbox|`o" + a_[5] + " is no longer in the guild.|left|\nadd_spacer|small|\nadd_button|back|OK|noflags|0|0|\nend_dialog|guild_member_remove_finish|||\nadd_quick_exit|");
								p.CreatePacket(p_);
								{
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("`5[GUILD ALERT]`` " + a_[5] + " kicked from the guild by " + pInfo(p_)->tankIDName);
									bool on_ = false;
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->guild_id == guild_id) {
											p.CreatePacket(currentPeer);
										}
										if (pInfo(currentPeer)->tankIDName == a_[5]) {
											pInfo(currentPeer)->guild_id = 0;
											string name_ = pInfo(currentPeer)->world;
											vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
											if (p != worlds.end()) {
												World* world_ = &worlds[p - worlds.begin()];
												update_guild_name(currentPeer, guild_information->guild_world, world_);
												if (not guild_access(currentPeer, guild_id) and pInfo(currentPeer)->world == guild_information->guild_world) {
													string name_ = pInfo(currentPeer)->world;
													vector<World>::iterator p_w = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
													if (p_w != worlds.end()) {
														World* world_ = &worlds[p_w - worlds.begin()];
														int x_ = 0, y_ = 0;
														int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
														for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
															if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
																uint16_t id_ = world_->blocks[i_].fg;
																if (id_ == 5814) {
																	x_ = i_ % xSize;
																	y_ = i_ / xSize;
																	break;
																}
															}
														}
														WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
														PlayerMoving data_{};
														data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
														BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
														BYTE* blc = raw + 56;
														form_visual(blc, *block_, *world_, currentPeer, false);
														for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
															if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
															if (pInfo(currentPeer2)->world == name_) {
																send_raw(currentPeer2, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
															}
														}
														delete[] raw, blc;
													}
												}
											}
											on_ = true;
										}
									}
									if (not on_) {
										string path_ = "players/" + a_[5] + "_.json";
										if (_access_s(path_.c_str(), 0) == 0) {
											json r_;
											ifstream f_(path_, ifstream::binary);
											f_ >> r_;
											f_.close();
											r_["guild_id"] = 0;
											{
												ofstream f_(path_, ifstream::binary);
												f_ << r_;
												f_.close();
											}
										}
									}
								}
								create_guild_log(guild_information, "`$" + pInfo(p_)->tankIDName + "`` `wkicked `$" + a_[5] + "`` from the guild", 6);
								guild_information->guild_members.erase(guild_information->guild_members.begin() + i_);
							}
							break;
						}
					}
				}
			}
			else if (a_[8] == "back") {
				string guild_member_name = a_[5];
				send_guild_member_info(p_, guild_member_name);
			}
			break;
		}
		else if (a_[i_] == "guild_member_edit") {
			if (a_.size() != 14) break;
			if (a_[11] == "back") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_info(p_));
				p.CreatePacket(p_);
			}
			else if (a_[11] == "promote" or a_[11] == "demote" or a_[11] == "goto" or a_[11] == "remove") {
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					for (int i_ = 0; i_ < guild_information->guild_members.size(); i_++) {
						GuildMember* member_search = &guild_information->guild_members[i_];
						if (member_search->member_name == a_[8]) {
							if (a_[11] == "remove") {
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wKick Guild Member``|left|1366|\nadd_spacer|small|\nadd_textbox|`oAre you sure you wish to `4kick`` " + a_[8] + " from the guild?|left|\nadd_spacer|small|\nadd_button|remove|`4Kick " + a_[8] + "``|noflags|0|0|\nembed_data|guildMemberID|" + a_[8] + "\nadd_button|back|Back|noflags|0|0|\nend_dialog|guild_member_remove|||\nadd_quick_exit|");
								p.CreatePacket(p_);
							}
							else if (a_[11] == "goto") {
								string world_name = "";
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->tankIDName == a_[8]) {
										world_name = pInfo(currentPeer)->world;
										break;
									}
								}
								if (world_name.empty()) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Hmm, my friend isn't in a world right now.");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(p_);
									break;
								}
								else {
									if (world_name == pInfo(p_)->world) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You want to warp to the same world you're in?  That's illogical, captain.");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
										break;
									}
									gamepacket_t p;
									p.Insert("OnTextOverlay");
									p.Insert("Moving to guild member location (`2" + world_name + "``) ...");
									p.CreatePacket(p_);
									join_world(p_, world_name);
								}
							}
							else if (a_[11] == "promote") {
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wPromote Guild Member``|left|1366|\nadd_spacer|small|\nadd_textbox|`oAre you sure you wish to `2promote`` " + a_[8] + " to " + (member_search->role_id == 3 ? "" : member_search->role_id == 2 ? "" : member_search->role_id == 1 ? "Co-Leader" : "Elder") + "?|left|\nadd_spacer|small|\nadd_button|promote|`wPromote " + a_[8] + "``|noflags|0|0|\nembed_data|guildMemberID|" + a_[8] + "\nembed_data|guildmembername|" + a_[8] + "\nadd_button|back|Back|noflags|0|0|\nend_dialog|guild_member_role_change|||\nadd_quick_exit|");
								p.CreatePacket(p_);
							}
							else if (a_[11] == "demote") {
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wDemote Guild Member``|left|1366|\nadd_spacer|small|\nadd_textbox|`oAre you sure you wish to `4demote`` " + a_[8] + " to " + (member_search->role_id == 3 ? "" : member_search->role_id == 2 ? "Elder" : member_search->role_id == 1 ? "Member" : "") + "?|left|\nadd_spacer|small|\nadd_button|demote|`wDemote " + a_[8] + "``|noflags|0|0|\nembed_data|guildMemberID|" + a_[8] + "\nembed_data|guildmembername|" + a_[8] + "\nadd_button|back|Back|noflags|0|0|\nend_dialog|guild_member_role_change|||\nadd_quick_exit|");
								p.CreatePacket(p_);
							}
							break;
						}
					}
				}
			}
			break;
		}
		else if (a_[i_] == "confirmguild") {
			if (a_.size() != 14) break;
			string name_ = pInfo(p_)->world;
			int price = 100000;
			if (pInfo(p_)->supp > 1) price = 50000;
			if (pInfo(p_)->gems >= price) {
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					string guild_name = a_[5];
					string guild_description = a_[8];
					bool bad_name = false, already_taken = false;
					string check_name = to_lower(guild_name);
					for (int i = 0; i < swear_words.size(); i++) {
						if (check_name.find(swear_words[i]) != string::npos) {
							bad_name = true;
							break;
						}
					}
					for (Guild check_guild_name : guilds) {
						if (to_lower(check_guild_name.guild_name) == check_name) {
							already_taken = true;
							break;
						}
					}
					if (already_taken or bad_name or guild_name.size() < 3 or guild_name.size() > 15 or guild_description.size() < 6 or guild_description.size() > 24 or special_char(guild_name) or world_->owner_name != pInfo(p_)->tankIDName) break;
					Guild new_guild{};
					new_guild.guild_id = guilds.size() + 1;
					new_guild.guild_name = guild_name;
					new_guild.guild_description = guild_description;
					new_guild.guild_world = world_->name;
					GuildMember new_member{};
					new_member.member_name = pInfo(p_)->tankIDName;
					new_member.role_id = 3;
					new_member.last_online = time(NULL);
					new_guild.guild_members.push_back(new_member);
					guilds.push_back(new_guild);
					pInfo(p_)->guild_id = new_guild.guild_id;
					{
						int x_ = 0, y_ = 0;
						int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
						for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
							if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
								uint16_t id_ = world_->blocks[i_].fg;
								if (id_ != 202 and id_ != 204 and id_ != 206 or id_ != 4994) {
									x_ = i_ % xSize;
									y_ = i_ / xSize;
									break;
								}
							}
						}
						WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
						world_->guild_id = new_guild.guild_id;
						block_->fg = 5814;
						PlayerMoving data_{};
						data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						data_.netID = pInfo(p_)->id;
						data_.plantingTree = block_->fg;
						BYTE* raw = packPlayerMoving(&data_, 56);
						PlayerMoving data_2{};
						data_2.packetType = 5, data_2.punchX = x_, data_2.punchY = y_, data_2.characterState = 0x8;
						BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(world_, block_));
						BYTE* blc = raw2 + 56;
						form_visual(blc, *block_, *world_, p_, false);
						gamepacket_t p(0, pInfo(p_)->netID);
						p.Insert("OnGuildDataChanged");
						p.Insert(50478);
						p.Insert(79289404);
						p.Insert(0), p.Insert(3);
						gamepacket_t p2(0, pInfo(p_)->netID);
						p2.Insert("OnCountryState");
						p2.Insert(pInfo(p_)->country + "|showGuild");
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								send_raw(currentPeer, 4, raw2, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								p.CreatePacket(currentPeer);
								p2.CreatePacket(currentPeer);
							}
						}
						delete[] raw, raw2, blc;
						pInfo(p_)->gems -= price;
						{
							gamepacket_t p;
							p.Insert("OnSetBux");
							p.Insert(pInfo(p_)->gems);
							p.Insert(0);
							p.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
							if (pInfo(p_)->supp >= 2) {
								p.Insert((float)33796, (float)1, (float)0);
							}
							p.CreatePacket(p_);
						}
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("Guild created");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(p_);
						}
					}
				}
			}
			break;
		}
		else if (a_[i_] == "createguild") {
			if (a_.size() != 12) break;
			int price = 100000;
			if (pInfo(p_)->supp > 1) price = 50000;
			if (pInfo(p_)->gems >= price) {
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					string guild_name = a_[8];
					string guild_description = a_[10];
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					bool bad_name = false, already_taken = false;
					string check_name = to_lower(guild_name);
					for (int i = 0; i < swear_words.size(); i++) {
						if (check_name.find(swear_words[i]) != string::npos) {
							bad_name = true;
							break;
						}
					} for (Guild check_guild_name : guilds) {
						if (to_lower(check_guild_name.guild_name) == check_name) {
							already_taken = true;
							break;
						}
					} if (already_taken)
						p.Insert(get_guild_create(p_, "`4The guild name is not available!``", guild_name, guild_description));
					else if (bad_name)
						p.Insert(get_guild_create(p_, "`4Oops!`` Guild name cannot contain `$swear words``.", guild_name, guild_description));
					else if (guild_name.size() < 3 or guild_name.size() > 15)
						p.Insert(get_guild_create(p_, "You'll need a name `$3 characters`` or longer to create a Guild - select cancel and enter a longer name.", guild_name, guild_description));
					else if (guild_description.size() < 6 or guild_description.size() > 24)
						p.Insert(get_guild_create(p_, "You need to enter at least `$6 characters`` to add a guild statement!", guild_name, guild_description));
					else if (special_char(guild_name))
						p.Insert(get_guild_create(p_, "`4Oops!`` You can only use letters and numbers in your `$Guild`` name.", guild_name, guild_description));
					else if (world_->owner_name != pInfo(p_)->tankIDName)
						p.Insert(get_guild_create(p_, "You can only create the guild inside a world which is owned by you!", guild_name, guild_description));
					else
						p.Insert(get_guild_create(p_, "", guild_name, guild_description, true));
					p.CreatePacket(p_);
				}
			}
			break;
		}
		else if (a_[i_] == "requestcreateguildpage") {
			if (a_.size() != 8) break;
			string b_ = a_[5];
			if (b_ == "back") {
				send_social(p_);
			}
			else if (b_ == "showcreateguild") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_create(p_));
				p.CreatePacket(p_);
			}
			break;
		}
		else if (a_[i_] == "unaccess") {
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
				bool upd_ = false;
				for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
					if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
						WorldBlock* block_ = &world_->blocks[i_];
						if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
							if (find(block_->admins.begin(), block_->admins.end(), pInfo(p_)->tankIDName) != block_->admins.end()) {
								block_->admins.erase(remove(block_->admins.begin(), block_->admins.end(), pInfo(p_)->tankIDName), block_->admins.end());
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = i_ % xSize, data_.punchY = i_ / xSize, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[]raw, blc;
								if (block_->locked) {
									upd_lock(*block_, *world_, p_);
								}
								upd_ = true;
							}
							//...
						}
						else {
							if (find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) != world_->admins.end()) {
								world_->admins.erase(remove(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName), world_->admins.end());
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = i_ % xSize, data_.punchY = i_ / xSize, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[]raw, blc;
								upd_ = true;
								gamepacket_t p2(0, pInfo(p_)->netID);
								{
									p2.Insert("OnNameChanged");
									if (pInfo(p_)->adminLevel == 0) pInfo(p_)->name_color = "`0";
									p2.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + (pInfo(p_)->is_legend ? " of Legend" : "") + "``");
								}
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										p2.CreatePacket(currentPeer);
									}
								}
							}
						}
					}
				} if (upd_) {
					packet_(p_, "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0");
					{
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("Removed your access from all locks.");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
					}
					{
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("Removed your access from all locks.");
						p.CreatePacket(p_);
					}

					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert(pInfo(p_)->tankIDName + " removed their own access from all locks.");
					gamepacket_t p2(0, pInfo(p_)->netID);
					{
						p2.Insert("OnNameChanged");
						if (pInfo(p_)->adminLevel == 0) pInfo(p_)->name_color = "`0";
						p2.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + (pInfo(p_)->is_legend ? " of Legend" : "") + "``");
					}
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							p.CreatePacket(currentPeer);
						}
					}
				}
				else {
					{
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("You didn't have access on any locks!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(p_);
					}
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("You didn't have access on any locks!");
					p.CreatePacket(p_);
				}
			}
			break;
		}
		else if (a_[i_] == "socialportal") {
			if (a_.size() != 8) break;
			string b_ = a_[5];
			if (b_ == "showfriend") {
				send_friends(p_);
			}
			else if (b_ == "bpoi") {
				gamepacket_t h;
				h.Insert("OnDialogRequest");
				h.Insert("\nadd_label_with_icon|big|`cBreakpoint Hub|left|18|\nadd_spacer|small|\nadd_textbox|`!Would you like to make your efforts even more valuable?|\nadd_textbox|`!You earn one breakpoint each block you break.|\nadd_textbox|`!You can exchange your breakpoints in here!|\nadd_spacer|small|\nadd_label_with_icon|small|`cYou have:`w " + to_string(pInfo(p_)->bpoi) + " Breakpoint|left|1488|\nadd_spacer|small|\nadd_button_with_icon|bpo_9386| `03000 Point |staticBlueFrame|9386|\nadd_button|klro|`wClose|\nadd_quick_exit|");
				h.CreatePacket(p_);
			}
			else if (b_ == "ray") {
				raymanupg(p_);
			}
			else if (b_ == "showguild") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(get_guild_info(p_));
				p.CreatePacket(p_);
			}
			break;
		}
		else if (a_[i_] == "acceptaccess") {
			if (pInfo(p_)->ac_.size() == 0) break;
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
				if (pInfo(currentPeer)->world == pInfo(p_)->world) {
					if (pInfo(p_)->ac_.find(pInfo(currentPeer)->netID) != pInfo(p_)->ac_.end()) {
						string name_ = pInfo(p_)->world;
						vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
						if (p != worlds.end()) {
							World* world_ = &worlds[p - worlds.begin()];
							if (world_->admins.size() >= 26) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("World has reached access limit!");
								p.Insert(0);
								p.Insert(0);
								p.CreatePacket(p_);
								continue;
							}
							string peer_name = pInfo(p_)->tankIDName, owner_name = world_->owner_name, user_name = pInfo(currentPeer)->tankIDName;
							if (owner_name != user_name and not pInfo(currentPeer)->dev) break;
							//world_->admins.push_back(peer_name);
							int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
							int x_ = (pInfo(p_)->ac_[pInfo(currentPeer)->netID]) % xSize, y_ = (pInfo(p_)->ac_[pInfo(currentPeer)->netID]) / xSize;
							if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
							WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
								if (block_->owner_name != user_name) break;
								if (block_->admins.size() >= 26) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Lock has reached access limit!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								block_->admins.push_back(peer_name);
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert(pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` was given access to a " + items[block_->fg].name + ".");
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == pInfo(p_)->world) {
										p.CreatePacket(currentPeer);
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc;
							}
							else {
								if (owner_name != user_name) break;
								if (world_->admins.size() >= 26) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("World has reached access limit!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								world_->admins.push_back(peer_name);
								gamepacket_t p2(0, pInfo(p_)->netID);
								{
									p2.Insert("OnNameChanged");
									if (pInfo(p_)->adminLevel == 0) pInfo(p_)->name_color = "`^";
									p2.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : pInfo(p_)->name_color + pInfo(p_)->tankIDName) + (pInfo(p_)->is_legend ? " of Legend" : "") + "``");
								}
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert(pInfo(p_)->name_color + pInfo(p_)->tankIDName + "`` was given access to a " + items[block_->fg].name + ".");
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == pInfo(p_)->world) {
										p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc;
							}
							packet_(p_, "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0");
							if (block_->locked) {
								upd_lock(*block_, *world_, p_);
							}
						}
						pInfo(p_)->ac_.clear();
						return;
					}
				}
			}
			gamepacket_t p;
			p.Insert("OnTalkBubble");
			p.Insert(pInfo(p_)->netID);
			p.Insert("The lock owner has left!");
			p.Insert(0), p.Insert(0);
			p.CreatePacket(p_);
			pInfo(p_)->ac_.clear();
			break;
		}
		else if (a_[i_] == "worlds_list") {
			if (a_.size() != 8 and a_.size() != 5) break;
			if (a_.size() == 5) {
				send_wrench_self(p_);
				break;
			} if (pInfo(p_)->home_world == a_[5]) {
				bool a___ = false;
				for (pair<string, long long int> p : home_timed) {
					if (p.first == pInfo(p_)->tankIDName) {
						if (p.second + HOME_TIME > (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
							a___ = true;
							gamepacket_t no;
							no.Insert("OnTalkBubble");
							no.Insert(pInfo(p_)->netID);
							no.Insert("`4Cooldown active`` - You can use `5home warp`` in `5" + to_string(((p.second + HOME_TIME - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000) - ((((p.second + HOME_TIME - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000) / 60) * 60)) + " ``seconds.");
							no.Insert(0), no.Insert(0);
							no.CreatePacket(p_);
							break;
						}
					}
				}
				if (a___)
					break;
				home_timed.push_back(make_pair(pInfo(p_)->tankIDName, (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()));
			}
			join_world(p_, a_[5]);
			break;
		}
		else if (a_[i_] == "popup") {
			if (a_.size() == 8 and a_[5] == "my_worlds") {
				string home_world_ = "";
				string worlds_owned_ = "";
				if (not pInfo(p_)->home_world.empty()) {
					home_world_ += "\nadd_textbox|Your home world|left|\nadd_button|" + pInfo(p_)->home_world + "|" + pInfo(p_)->home_world + "|noflags|0|0|\nadd_spacer|small|";
				} for (int w_ = 0; w_ < pInfo(p_)->worlds_owned.size(); w_++) {
					worlds_owned_ += "\nadd_button|" + pInfo(p_)->worlds_owned[w_] + "|" + pInfo(p_)->worlds_owned[w_] + "|noflags|0|0|";
				} if (worlds_owned_.empty()) {
					worlds_owned_ = "\nadd_textbox|You do not have any World-Locked worlds.``|left|";
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label|big|Worlds Locked|right\nadd_spacer|small|" + home_world_ + "\nadd_textbox|Your locked worlds|left|\nadd_textbox|You must be a Supporter or Super Supporter to warp to these worlds.|left|" + worlds_owned_ + "\nadd_quick_exit|\nadd_spacer|small|\nend_dialog|worlds_list||Back|");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "bonus") {
				if (pInfo(p_)->gp == 1) {
					int growpassid = 6124;
					if (today_day == pInfo(p_)->gd) growpassid = 6292;
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|Grow Pass Rewards|left|9222|\nadd_smalltext|`9You can claim your daily reward everyday here.``|left|\nadd_button_with_icon|claim_reward||staticBlueFrame|" + to_string(growpassid) + "||\nadd_button_with_icon|claim_reward||staticBlueFrame|" + to_string(growpassid) + "||\nadd_button_with_icon|claim_reward||staticBlueFrame|" + to_string(growpassid) + "||\nadd_button_with_icon|claim_reward||staticBlueFrame|" + to_string(growpassid) + "||\nadd_button_with_icon|claim_reward||staticBlueFrame|" + to_string(growpassid) + "||\nadd_button_with_icon||END_LIST|noflags|0||\nadd_smalltext|Update: `2We will be adding a lot of grow pass updates soon!``|left|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
					p.CreatePacket(p_);
				}
			}
			else if (a_.size() == 8 and a_[5] == "account_security") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`0Account Security``|left|1424|\nadd_spacer|small|\nadd_textbox|`6Network Info``|left|\nadd_smalltext|Status: `2ONLINE``|left|\nadd_smalltext|Email: `5" + pInfo(p_)->email + "``|left|\nadd_smalltext|IP: `5" + pInfo(p_)->ip + "``|left|\nadd_smalltext|RID: `5" + pInfo(p_)->rid + "``|left|\nadd_smalltext|MAC Address: `5" + pInfo(p_)->mac + "``|left|\nadd_smalltext|Country Code: `5" + pInfo(p_)->country + "``|left|\nadd_spacer|small\nadd_textbox|`6Assets Info``|left|\nadd_smalltext|Level: `5" + to_string(pInfo(p_)->level) + "``|left|\nadd_smalltext|Gems: `5" + setGems(pInfo(p_)->gems) + "``|left|\nadd_smalltext|XP: `5" + setGems(pInfo(p_)->xp) + "``|left|\nadd_smalltext|You need " + setGems((50 * (pInfo(p_)->level * pInfo(p_)->level) + 2) - pInfo(p_)->xp) + " XP to be level " + to_string(pInfo(p_)->level + 1) + "|left|\nadd_spacer|small|\nadd_smalltext|Type what do you want to `5change``? (email/password)|left|\nadd_text_input|change|||10|\nend_dialog|account_security|OK|Continue|\n");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "emojis") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|Growmojis|left|1366|\nadd_spacer|small|\nadd_smalltext_forced| (sigh) |left|\nadd_smalltext_forced| (mad) |left|\nadd_smalltext_forced| (smile) |left|\nadd_smalltext_forced| (tongue) |left|\nadd_smalltext_forced| (wow) |left|\nadd_smalltext_forced| (no) |left|\nadd_smalltext_forced| (shy) |left|\nadd_smalltext_forced| (wink) |left|\nadd_smalltext_forced| (music) |left|\nadd_smalltext_forced| (lol) |left|\nadd_smalltext_forced| (kiss) |left|\nadd_smalltext_forced| (agree) |left|\nadd_smalltext_forced| (cactus) |left|\nadd_smalltext_forced| (pine) |left|\nadd_smalltext_forced| (song) |left|\nadd_smalltext_forced| (lucky) |left|\nadd_spacer|small|\nadd_smalltext|`9You need to be a Super Supporter to get these Growmojis.``|left|\nadd_smalltext_forced_alpha| (yes) |0.5|left|\nadd_smalltext_forced_alpha| (love) |0.5|left|\nadd_smalltext_forced_alpha| (megaphone) |0.5|left|\nadd_smalltext_forced_alpha| (heart) |0.5|left|\nadd_smalltext_forced_alpha| (cool) |0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need 30 friends to get this Growmoji.``|left|\nadd_smalltext_forced_alpha| (see-no-evil) |0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need 40 friends to get this Growmoji.``|left|\nadd_smalltext_forced_alpha| (dance) |0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need 50 friends to get this Growmoji.``|left|\nadd_smalltext_forced_alpha| (build) |0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in a secret event.``|left|\nadd_smalltext_forced_alpha| (oops) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in a secret event.``|left|\nadd_smalltext_forced_alpha| (sleep) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in a secret event.``|left|\nadd_smalltext_forced_alpha| (punch) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in a secret event.``|left|\nadd_smalltext_forced_alpha| (bheart) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in a secret event.``|left|\nadd_smalltext_forced_alpha| (cry) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (bunny) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (peace) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (terror) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (troll) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (fireworks) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (party) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (ghost) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (nuke) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in an event.``|left|\nadd_smalltext_forced_alpha| (halo) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in a secret event.``|left|\nadd_smalltext_forced_alpha| (eyes) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9This Growmoji can be found in a secret event.``|left|\nadd_smalltext_forced_alpha| (weary) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need to purchase this Growmoji from the store.``|left|\nadd_smalltext_forced_alpha| (wl) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need to purchase this Growmoji from the store.``|left|\nadd_smalltext_forced_alpha| (grow) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need to purchase this Growmoji from the store.``|left|\nadd_smalltext_forced_alpha| (gems) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need to purchase this Growmoji from the store.``|left|\nadd_smalltext_forced_alpha| (gtoken) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need to purchase this Growmoji from the store.``|left|\nadd_smalltext_forced_alpha| (vend) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9You need to purchase this Growmoji from the store.``|left|\nadd_smalltext_forced_alpha| (football) | 0.5|left|\nadd_spacer|small|\nadd_smalltext|`9These Growmojis can be found in the Growmoji Chest sold by Locke the Traveling Salesman.``|left|\nadd_smalltext_forced_alpha| (alien) |0.5|left|\nadd_smalltext_forced_alpha| (evil) |0.5|left|\nadd_smalltext_forced_alpha| (pizza) |0.5|left|\nadd_smalltext_forced_alpha| (clap) |0.5|left|\nadd_smalltext_forced_alpha| (turkey) |0.5|left|\nadd_smalltext_forced_alpha| (gift) |0.5|left|\nadd_smalltext_forced_alpha| (cake) |0.5|left|\nadd_smalltext_forced_alpha| (heartarrow) |0.5|left|\nadd_smalltext_forced_alpha| (shamrock) |0.5|left|\nadd_smalltext_forced_alpha| (grin) |0.5|left|\nadd_smalltext_forced_alpha| (ill) |0.5|left|\nadd_spacer|small|\nend_dialog|worlds_list||Back|\nadd_quick_exit|\n");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "title_edit") {
				string titles = "";
				if (pInfo(p_)->lgnd) titles += "\nadd_checkbox|11111|Legend Title|" + to_string(pInfo(p_)->is_legend) + "|";
				if (pInfo(p_)->drtitle) titles += "\nadd_checkbox|22222|Doctor Title|" + to_string(pInfo(p_)->drt) + "|";
				if (pInfo(p_)->gp) titles += "\nadd_checkbox|33333|Grow4Good Title|" + to_string(pInfo(p_)->donor) + "|";
				if (pInfo(p_)->mp) titles += "\nadd_checkbox|44444|Mentor Title|" + to_string(pInfo(p_)->master) + "|";
				if (pInfo(p_)->level >= 125) titles += "\nadd_checkbox|55555|Level Title|" + to_string(pInfo(p_)->lvl125) + "|";
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(a + "set_default_color|`o\nadd_label|big|" + (titles == "" ? "No Titles Obtained" : "Select Title:") + "|right|" + titles + "\nadd_spacer|small|\nadd_button||OK|noflags|0|0|\nend_dialog|title_edit||\n");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "Ezio") {
				int transform = pInfo(p_)->necklace;
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTransform|left|" + to_string(transform) + "|\nadd_spacer|small|\nadd_button|trans_" + to_string(transform) + "|`$Transform to " + items[transform].name + "|\nadd_button|trans_256|`$Transform to Human|\nadd_spacer|small|\nadd_button|cl0se|`wClose|\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "Space") {
				int transform = transform = pInfo(p_)->hand;
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTransform|left|" + to_string(transform) + "|\nadd_spacer|small|\nadd_button|trans_" + to_string(transform) + "|`$Transform to " + items[transform].name + "|\nadd_button|trans_256|`$Transform to Human|\nadd_spacer|small|\nadd_button|cl0se|`wClose|\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "notebook_edit") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label|big|Notebook|left|0|\nadd_text_box_input|personal_note||" + pInfo(p_)->note + "|128|5|\nadd_spacer|small|\nadd_button|save|Save|noflags|0|0|\nadd_button|clear|Clear|noflags|0|0|\nadd_button|cancel|Cancel|noflags|0|0|\nend_dialog|notebook_edit||\nadd_quick_exit|\n");
				p.CreatePacket(p_);
			}
			//else if (a_.size() == 8 and a_[5] == "g4g_personal_dialog") grow4good(p_, true, "tab_tasks", 0);
			else if (a_.size() == 8 and a_[5] == "billboard_edit") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTrade Billboard``|left|8282|\nadd_spacer|small|" + (pInfo(p_)->b_i != 0 ? "\nadd_label_with_icon|small|`w" + items[pInfo(p_)->b_i].name + "``|left|" + to_string(pInfo(p_)->b_i) + "|" : "") + "\nadd_item_picker|billboard_item|`wSelect Billboard Item``|Choose an item to put on your billboard!|\nadd_spacer|small|\nadd_checkbox|billboard_toggle|`$Show Billboard``|" + (pInfo(p_)->b_a == 0 ? "0" : "1") + "\nadd_text_input|setprice|Price of item:|" + to_string(pInfo(p_)->b_p) + "|5|\nadd_checkbox|chk_peritem|World Locks per Item|" + (pInfo(p_)->b_w == 0 ? "0" : "1") + "\nadd_checkbox|chk_perlock|Items per World Lock|" + (pInfo(p_)->b_w == 0 ? "1" : "0") + "\nadd_spacer|small|\nend_dialog|billboard_edit|Close|Update|\n");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "scarf_of_seasons_edit") {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`wEquinox Scarf``|left|11818|\nadd_spacer|small|\nadd_textbox|Scarf Design|left|\nadd_spacer|small|\nadd_checkbox|checkbox_color_0|      Spring |" + (pInfo(p_)->i_11818_1 == 0 ? "1" : "0") + "\nadd_checkbox|checkbox_color_1|      Summer |" + (pInfo(p_)->i_11818_1 == 1 ? "1" : "0") + "\nadd_checkbox|checkbox_color_2|      Autumn |" + (pInfo(p_)->i_11818_1 == 2 ? "2" : "0") + "\nadd_checkbox|checkbox_color_3|      Winter |" + (pInfo(p_)->i_11818_1 == 3 ? "1" : "0") + "\nadd_textbox|Scarf Attack|left|\nadd_spacer|small|\nadd_checkbox|checkbox_punch_0|      Spring |" + (pInfo(p_)->i_11818_2 == 0 ? "1" : "0") + "\nadd_checkbox|checkbox_punch_1|      Summer |" + (pInfo(p_)->i_11818_2 == 1 ? "1" : "0") + "\nadd_checkbox|checkbox_punch_2|      Autumn |" + (pInfo(p_)->i_11818_2 == 2 ? "1" : "0") + "\nadd_checkbox|checkbox_punch_3|      Winter |" + (pInfo(p_)->i_11818_2 == 3 ? "1" : "0") + "\nadd_spacer|small|\nadd_button|restore_default|Restore to Default|noflags|0|0|\nend_dialog|dialog_scarf_of_seasons|Cancel|Update|\nadd_quick_exit|");
				p.CreatePacket(p_);
			}
			else if (a_.size() == 8 and a_[5] == "goals") {
				daily_quest_info(p_);
			}

			else if (a_.size() == 14 and a_[11] == "trade" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					int my_netid_ = atoi(a_[5].c_str()), other_netid_ = atoi(a_[8].c_str());
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(p_)->world and pInfo(currentPeer)->netID == other_netid_ and not pInfo(currentPeer)->invis) {
							for (int c_ = 0; c_ < pInfo(currentPeer)->friends.size(); c_++) {
								if (pInfo(currentPeer)->friends[c_].name == pInfo(p_)->tankIDName) {
									if (pInfo(currentPeer)->friends[c_].block_trade)
										return;
								}
							}
							if (pInfo(currentPeer)->trading_with != -1 and pInfo(currentPeer)->trading_with != pInfo(p_)->netID) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("That person is busy.");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								pInfo(p_)->block_trade = false, pInfo(p_)->trading_with = -1;
								{
									gamepacket_t p;
									p.Insert("OnForceTradeEnd");
									p.CreatePacket(p_);
									pInfo(p_)->onTrade = false;
								}
								return;
							}
							pInfo(p_)->trading_with = pInfo(currentPeer)->netID;
							pInfo(p_)->trade_accept = 0;
							pInfo(currentPeer)->trade_accept = 0;
							gamepacket_t p;
							p.Insert("OnStartTrade");
							p.Insert(pInfo(currentPeer)->tankIDName);
							p.Insert(pInfo(currentPeer)->netID);
							p.CreatePacket(p_);
							if (pInfo(currentPeer)->trading_with != -1) {
								// as neisivaizduoju kdl real gt taip daro bet noriu kad butu kaip rgt.
								gamepacket_t p;
								p.Insert("OnTradeStatus");
								p.Insert(pInfo(p_)->netID);
								p.Insert("");
								p.Insert("`o" + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "``'s offer.``");
								p.Insert("locked|0\nreset_locks|1\naccepted|0");
								p.CreatePacket(p_);
								{
									gamepacket_t p;
									p.Insert("OnTradeStatus");
									p.Insert(pInfo(p_)->netID);
									p.Insert("");
									p.Insert("`o" + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "``'s offer.``");
									p.Insert("locked|0\naccepted|1");
									p.CreatePacket(p_);
								}
								{
									gamepacket_t p;
									p.Insert("OnTradeStatus");
									p.Insert(pInfo(p_)->netID);
									p.Insert("");
									p.Insert("`o" + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "``'s offer.``");
									p.Insert("locked|0\nreset_locks|1\naccepted|0");
									p.CreatePacket(p_);
								}
								{
									gamepacket_t p;
									p.Insert("OnTradeStatus");
									p.Insert(pInfo(currentPeer)->netID);
									p.Insert("");
									p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
									p.Insert(make_trade_offer(pInfo(currentPeer), true) + "locked|0\nreset_locks|1\naccepted|0");
									p.CreatePacket(p_);
									{
										gamepacket_t p;
										p.Insert("OnTradeStatus");
										p.Insert(pInfo(currentPeer)->netID);
										p.Insert("");
										p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
										p.Insert("locked|0\nreset_locks|1\naccepted|0");
										p.CreatePacket(currentPeer);
									}
									{
										gamepacket_t p;
										p.Insert("OnTradeStatus");
										p.Insert(pInfo(currentPeer)->netID);
										p.Insert("");
										p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
										p.Insert("locked|0\naccepted|1");
										p.CreatePacket(currentPeer);
									}
									{
										gamepacket_t p;
										p.Insert("OnTradeStatus");
										p.Insert(pInfo(currentPeer)->netID);
										p.Insert("");
										p.Insert("`o" + pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName + "``'s offer.``");
										p.Insert(make_trade_offer(pInfo(currentPeer), true) + "locked|0\nreset_locks|1\naccepted|0");
										p.CreatePacket(currentPeer);
									}
									{
										gamepacket_t p;
										p.Insert("OnTradeStatus");
										p.Insert(pInfo(p_)->netID);
										p.Insert("");
										p.Insert("`o" + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "``'s offer.``");
										p.Insert(make_trade_offer(pInfo(p_), true) + "locked|0\nreset_locks|1\naccepted|0");
										p.CreatePacket(currentPeer);
									}
								}
								break;
							}
							packet_(currentPeer, "action|play_sfx\nfile|audio/cash_register.wav\ndelayMS|0");
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("`#TRADE ALERT:`` `w" + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "```` wants to trade with you!  To start, use the `wWrench`` on that person's wrench icon, or type `w/trade " + pInfo(p_)->name_color + pInfo(p_)->tankIDName + "``");
								p.CreatePacket(currentPeer);
							}
							break;
						}
					}
				}
			}
			else if (a_.size() == 14 and a_[11] == "mute_player" and isdigit(a_[5][0]) and isdigit(a_[8][0]) or a_.size() == 14 and a_[11] == "unmute_player" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				int my_netid_ = atoi(a_[5].c_str()), other_netid_ = atoi(a_[8].c_str());
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(p_)->world and pInfo(currentPeer)->netID == other_netid_) {
						for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
							if (pInfo(p_)->friends[c_].name == pInfo(currentPeer)->tankIDName) {
								if (a_[11] == "mute_player")
									pInfo(p_)->friends[c_].mute = true;
								else
									pInfo(p_)->friends[c_].mute = false;
								break;
							}
						}
						break;
					}
				}
			}
			else if (a_.size() == 14 and a_[11] == "worldban" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				SendCmd(p_, "/ban " + pInfo(p_)->last_wrenched, true);
			}
			else if (a_.size() == 14 and a_[11] == "pull" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				SendCmd(p_, "/pull " + pInfo(p_)->last_wrenched, true);
			}
			else if (a_.size() == 14 and a_[11] == "kick" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				SendCmd(p_, "/kick " + pInfo(p_)->last_wrenched, true);
			}
			else if (a_.size() == 14 and a_[11] == "punish_view" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				if (pInfo(p_)->adminLevel >= 1) {
					SendCmd(p_, "/punish " + pInfo(p_)->last_wrenched, true);
				}
			}
			else if (a_.size() == 14 and a_[11] == "start_surg" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				bool has_recovery = false;
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(p_)->world or pInfo(p_)->last_wrenched != pInfo(currentPeer)->tankIDName or pInfo(currentPeer)->hospital_bed == false) continue;
					for (int i_ = 0; i_ < pInfo(currentPeer)->playmods.size(); i_++) if (pInfo(currentPeer)->playmods[i_].id == 89) has_recovery = true;
					if (has_recovery == false) {
						if (setstats(p_, pInfo(currentPeer)->surgery_type, pInfo(currentPeer)->tankIDName, (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``")) {
							PlayMods new_playmod{};
							int seconds = 3600;
							if (pInfo(currentPeer)->necklace == 8954) seconds *= 0.75;
							new_playmod.id = 89, new_playmod.time = time(nullptr) + seconds;
							pInfo(currentPeer)->playmods.push_back(new_playmod);
							gamepacket_t p2;
							p2.Insert("OnConsoleMessage"), p2.Insert(a + "You are recovering from surgery. (`$Recovery`` mod added, `$" + (pInfo(currentPeer)->necklace == 8954 ? "45 mins" : "1 hour") + "`` left)"), p2.CreatePacket(currentPeer);
							pInfo(currentPeer)->surgery_type = rand() % 30;
						}
					}
				}
			}
			else if (a_.size() == 14 and a_[11] == "invitetoguild" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				int my_netid_ = atoi(a_[5].c_str()), other_netid_ = atoi(a_[8].c_str());
				if (pInfo(p_)->guild_id == 0) break;
				uint32_t guild_id = pInfo(p_)->guild_id;
				vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
				if (p != guilds.end()) {
					Guild* guild_information = &guilds[p - guilds.begin()];
					for (GuildMember member_search : guild_information->guild_members) {
						if (member_search.member_name == pInfo(p_)->tankIDName) {
							if (member_search.role_id != 3 and member_search.role_id != 2 and member_search.role_id != 1) return;
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == pInfo(p_)->world and pInfo(currentPeer)->netID == other_netid_) {
									if (pInfo(currentPeer)->guild_id != 0) return;
									if (guild_information->guild_members.size() >= guild_information->guild_level * 5) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("Guild is at maximum capacity of " + to_string(guild_information->guild_level * 5) + " peoples!");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("Guild is at maximum capacity of " + to_string(guild_information->guild_level * 5) + " peoples!");
											p.CreatePacket(p_);
										}
										return;
									}
									pInfo(currentPeer)->pending_guild = pInfo(p_)->guild_id;
									packet_(currentPeer, "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0");
									{
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("`5[``Guild request sent to " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "```5]``");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
									}
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("`5GUILD REQUEST:`` You've been invited to join `2" + guild_information->guild_name + " `` by " + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``! To accept, `wwrench yourself`` and then choose `2Join " + guild_information->guild_name + "``.");
									p.CreatePacket(currentPeer);
									create_guild_log(guild_information, "`$" + pInfo(currentPeer)->tankIDName + "`` `wwas invited by`` `$" + pInfo(p_)->tankIDName + "``", 6);
									return;
								}
							}
							break;
						}
					}
				}
				{
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("Hmm, that person left.");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(p_);
				}
			}
			else if (a_.size() == 14 and a_[11] == "friend_add" and isdigit(a_[5][0]) and isdigit(a_[8][0])) {
				int my_netid_ = atoi(a_[5].c_str()), other_netid_ = atoi(a_[8].c_str());
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(p_)->world and pInfo(currentPeer)->netID == other_netid_) {
							if (find(pInfo(currentPeer)->pending_friends.begin(), pInfo(currentPeer)->pending_friends.end(), pInfo(p_)->tankIDName) != pInfo(currentPeer)->pending_friends.end()) {
								packet_(p_, "action|play_sfx\nfile|audio/love_in.wav\ndelayMS|0");
								long long time_t = time(NULL);
								Friends new_friend_;
								new_friend_.name = pInfo(currentPeer)->tankIDName;
								new_friend_.mute = false;
								new_friend_.block_trade = false;
								new_friend_.last_seen = time_t;
								pInfo(p_)->friends.push_back(new_friend_);
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("`3FRIEND ADDED:`` You're now friends with " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "``!");
								p.CreatePacket(p_);
								{
									packet_(currentPeer, "action|play_sfx\nfile|audio/love_in.wav\ndelayMS|0");
									Friends new_friend_;
									new_friend_.name = pInfo(p_)->tankIDName;
									new_friend_.mute = false;
									new_friend_.block_trade = false;
									new_friend_.last_seen = time_t;
									pInfo(currentPeer)->friends.push_back(new_friend_);
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("`3FRIEND ADDED:`` You're now friends with " + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``!");
									p.CreatePacket(currentPeer);
									if (pInfo(p_)->friends.size() == 10 || pInfo(p_)->friends.size() == 20 || pInfo(p_)->friends.size() == 30 || pInfo(p_)->friends.size() == 40 || pInfo(p_)->friends.size() == 50) form_emoji(p_);
									if (pInfo(currentPeer)->friends.size() == 10 || pInfo(p_)->friends.size() == 20 || pInfo(p_)->friends.size() == 30 || pInfo(p_)->friends.size() == 40 || pInfo(p_)->friends.size() == 50) form_emoji(currentPeer);
								}
								pInfo(currentPeer)->pending_friends.erase(remove(pInfo(currentPeer)->pending_friends.begin(), pInfo(currentPeer)->pending_friends.end(), pInfo(p_)->tankIDName), pInfo(currentPeer)->pending_friends.end());
							}
							else {
								for (int c_ = 0; c_ < pInfo(p_)->friends.size(); c_++) {
									if (pInfo(p_)->friends[c_].name == pInfo(currentPeer)->tankIDName) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("That's already my friend!");
										p.Insert(0), p.Insert(0);
										return;
									}
								}
								if (abs((pInfo(currentPeer)->x / 32) - (pInfo(p_)->x / 32)) >= 3) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("`5[```4Too far away`` `0- Stand closer to`` " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "```0 first!```5]``");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(p_);
									return;
								}
								pInfo(p_)->pending_friends.push_back(pInfo(currentPeer)->tankIDName);
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("`5[``Friend request sent to " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "```5]``");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
								{
									packet_(currentPeer, "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0");
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("`3FRIEND REQUEST:`` You've received a `wfriend request`` from " + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "``! To accept, press the `wwrench by his/her name`` and then choose `wAdd as friend``.");
									p.CreatePacket(currentPeer);
								}
							}
							return;
						}
					}
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("Hmm, that person left.");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(p_);
				}
			}
			else if (a_.size() == 8 and a_[5] == "acceptguild") {
				if (pInfo(p_)->pending_guild == 0 or pInfo(p_)->guild_id != 0) break;
				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					uint32_t guild_id = pInfo(p_)->pending_guild;
					vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
					if (p != guilds.end()) {
						Guild* guild_information = &guilds[p - guilds.begin()];
						if (guild_information->guild_members.size() >= guild_information->guild_level * 5) {
							pInfo(p_)->pending_guild = 0;
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("The Guild is full and cannot accept any new members at this time!");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(p_);
							break;
						}
						GuildMember new_member{};
						new_member.member_name = pInfo(p_)->tankIDName;
						new_member.role_id = 0;
						new_member.last_online = time(NULL);
						guild_information->guild_members.push_back(new_member);
						pInfo(p_)->pending_guild = 0;
						pInfo(p_)->guild_id = guild_information->guild_id;
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(p_)->netID);
							p.Insert("You Succesfully joined " + guild_information->guild_name);
							p.Insert(0), p.Insert(0);
							p.CreatePacket(p_);
						}
						update_clothes(p_);
						gamepacket_t p_2;
						p_2.Insert("OnConsoleMessage");
						p_2.Insert("`5[GUILD ALERT]`` " + (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` joined the guild!");
						if (pInfo(p_)->world == guild_information->guild_world and guild_access(p_, guild_id)) {
							int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
							for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
								if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
									uint16_t id_ = world_->blocks[i_].fg;
									if (id_ == 5814) {
										int x_ = i_ % xSize;
										int y_ = i_ / xSize;
										WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
										PlayerMoving data_2{};
										data_2.packetType = 5, data_2.punchX = x_, data_2.punchY = y_, data_2.characterState = 0x8;
										BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(world_, block_));
										BYTE* blc = raw2 + 56;
										form_visual(blc, *block_, *world_, p_, false);
										update_clothes(p_);
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == pInfo(p_)->world) {
												send_raw(currentPeer, 4, raw2, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
											}
											if (pInfo(currentPeer)->guild_id == pInfo(p_)->guild_id) {
												p_2.CreatePacket(currentPeer);
											}
										}
										delete[] raw2, blc;
										break;
									}
								}
							}
						}
						else {
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->guild_id == pInfo(p_)->guild_id) {
									p_2.CreatePacket(currentPeer);
								}
							}
						}
						create_guild_log(guild_information, "`$" + pInfo(p_)->tankIDName + "`` `wjoined the guild", 5948);
					}
				}
			}
			else if (a_.size() == 8 and a_[5] == "acceptlock") {
				if (pInfo(p_)->ac_.size() == 0) break;
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == pInfo(p_)->world) {
						if (pInfo(p_)->ac_.find(pInfo(currentPeer)->netID) != pInfo(p_)->ac_.end()) {
							string name_ = pInfo(p_)->world;
							vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
							if (p != worlds.end()) {
								World* world_ = &worlds[p - worlds.begin()];
								string owner_name = world_->owner_name, user_name = pInfo(currentPeer)->tankIDName;
								if (owner_name != user_name and not pInfo(p_)->dev) break;
								int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
								int x_ = (pInfo(p_)->ac_[pInfo(currentPeer)->netID]) % xSize, y_ = (pInfo(p_)->ac_[pInfo(currentPeer)->netID]) / xSize;
								if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
								WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
								if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
									if (block_->owner_name != user_name) break;
								}
								else {
									if (owner_name != user_name) break;
								}
								gamepacket_t p;
								p.Insert("OnDialogRequest");
								p.Insert("set_default_color|`o\nadd_label_with_icon|small|Accept Access To World|left|242|\nadd_smalltext|When you have access to a world, you are responsible for anything the world's owners or other admins do.|left|\nadd_smalltext|Don't accept access to a world unless it is from people you trust.|left|\nadd_smalltext|You can remove your access later by either wrenching the lock, or typing `2/unaccess`` to remove yourself from all locks in the world.|left|\nadd_spacer|small|\nadd_textbox|Are you sure you want to be added to this " + items[block_->fg].name + "?|left|\nend_dialog|acceptaccess|No|Yes|");
								p.CreatePacket(p_);
							}
							break;
						}
					}
				}
			}
			break;
		}
		else if (a_[i_] == "lock_edit" or a_[i_] == "editguildlock") {
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				/*if (a_.size() != 23 and a_.size() != 25 and a_.size() != 26 and a_.size() != 11) break;
				if (not isdigit(a_[i_+2][0]) and a_.size() != 11 or not isdigit(a_[i_+5][0]) and a_.size() != 11) break;*/
				int x_ = 0, y_ = 0;

				try {
					x_ = atoi(a_.at(i_ + 2).c_str()), y_ = atoi(a_.at(i_ + 5).c_str());
				}
				catch (out_of_range) {
					return;
				}
				if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
				if (p != worlds.end()) {
					WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
					uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
					if (items[t_].blockType != BlockTypes::LOCK) break;
					string owner_name = world_->owner_name, user_name = pInfo(p_)->tankIDName;
					if (a_.size() == 11) { // remove my access
						if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
							if (find(block_->admins.begin(), block_->admins.end(), user_name) != block_->admins.end()) {
								block_->admins.erase(remove(block_->admins.begin(), block_->admins.end(), user_name), block_->admins.end());
								packet_(p_, "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0");
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert(user_name + " removed their access from a " + items[t_].name);
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										p.CreatePacket(currentPeer);
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									} if (pInfo(currentPeer)->world == world_->name and pInfo(currentPeer)->tankIDName == user_name) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("I've removed my access!");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(currentPeer);
									}
								}
								delete[] raw, blc;
								if (block_->locked) {
									upd_lock(*block_, *world_, p_);
								}
							}
						}
						else if (find(world_->admins.begin(), world_->admins.end(), user_name) != world_->admins.end()) {
							world_->admins.erase(remove(world_->admins.begin(), world_->admins.end(), user_name), world_->admins.end());
							packet_(p_, "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0");
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert(user_name + " removed their access from a " + items[t_].name);
							gamepacket_t p2(0, pInfo(p_)->netID);
							{
								p2.Insert("OnNameChanged");
								if (pInfo(p_)->mod == 0 && pInfo(p_)->dev == 0) pInfo(p_)->name_color = "`0";
								p2.Insert((not pInfo(p_)->d_name.empty() ? pInfo(p_)->d_name : (pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name)) + (pInfo(p_)->is_legend ? " of Legend" : "") + "``");
							}
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, p_, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == world_->name) {
									p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								} if (pInfo(currentPeer)->world == world_->name and pInfo(currentPeer)->tankIDName == user_name) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("I've removed my access!");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(currentPeer);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, p_);
							}
						}
						break;
					}
					if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
						if (block_->owner_name != user_name and not pInfo(p_)->dev) break;
					}
					else {
						if (owner_name != user_name and not pInfo(p_)->dev) break;
					}
					bool reapply = false;
					for (int b_ = 0; b_ < a_.size(); b_++) {
						bool upd_ = false;
						if (a_[b_] == "getKey") {
							if (pInfo(p_)->tankIDName != world_->owner_name) break;
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
							int key_ = 1424;
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									uint32_t my_rank = 0;
									for (GuildMember member_search : guild_information->guild_members) {
										if (member_search.member_name == pInfo(p_)->tankIDName) {
											my_rank = member_search.role_id;
											break;
										}
									}
									if (my_rank < 3) break;
									key_ = 5816;
									gamepacket_t p;
									p.Insert("OnDialogRequest");
									p.Insert((guild_information->guild_mascot[0] != 0 || guild_information->guild_mascot[1] != 0 ? "add_dual_layer_icon_label|big|`wGet Guild Key``|left|" + to_string(guild_information->guild_mascot[0]) + "|" + to_string(guild_information->guild_mascot[1]) + "|1.0|0|" : "add_label_with_icon|big|`wGet Guild Key``|left|" + to_string(key_) + "|") + "\nadd_spacer|small|\nadd_textbox|The key to this lock can be used to transfer leadership of the guild to another guild Member.|left|\nadd_textbox|Use it like a `5World Lock Key``, but you can only give it to another Member of your guild!|left|\nadd_spacer|small|\nadd_textbox|`4Warning!`` By giving the `5Guild Key`` to another Member, you are effectively `rpromoting`` them to Guild Leader and `4demoting`` yourself at the same time!|left|\nadd_textbox|Are you sure you want to take the `5" + items[key_].name + "`` from the " + items[block_->fg].name + "?|left|\nend_dialog|confirmguildlockkey|Cancel|OK|\nadd_quick_exit|");
									p.CreatePacket(p_);
									return;
								}
							}
							int c_ = 0;
							if (pInfo(p_)->tankIDName == world_->owner_name) modify_inventory(p_, 1424, c_);
							if (c_ != 0) break;
							for (int i_ = 0; i_ < world_->drop.size(); i_++) {
								if (world_->drop[i_].x == -1 or world_->drop[i_].id == 0) continue;
								WorldBlock* block_ = &world_->blocks[(world_->drop[i_].x / 32) + ((world_->drop[i_].y / 32) * 100)];
								if (items[block_->fg].collisionType != 1) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("`4Oops!... Can't trade a world with floating items that are unblocked or in treasure chests!``");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(p_);
									return;
								}
							}
							for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
								if (world_->blocks[i_].fg == 4516) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("`4To trade a world, you will need to remove Untrade-a-Box!``");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(p_);
									return;
								}
							}
							for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
								if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
									uint16_t id_ = world_->blocks[i_].fg;
									if (id_ == 202 or id_ == 204 or id_ == 206 or id_ == 4994) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("To trade a world, you can only have one lock on it, the `5World Lock``.  Remove the rest!");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(p_);
										return;
									}
								}
							}
							if (world_->admins.size() != 0) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("You'll first need to remove all players with access to your " + items[block_->fg].name + " to get a " + items[key_].name + ".");
								p.Insert(0), p.Insert(1);
								p.CreatePacket(p_);
								return;
							}
							c_ = 1;
							if (modify_inventory(p_, key_, c_) == 0) {
								packet_(p_, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								p.Insert("You got a `#" + items[key_].name + "``! You can now trade this world to other players.");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(p_);
							}
						}




						else if (a_[b_] == "clear_a_world") {
							if (pInfo(p_)->tankIDName != world_->owner_name)
							{
								gamepacket_t packet;
								packet.Insert("OnTalkBubble");
								packet.Insert(pInfo(p_)->netID);
								packet.Insert("`wOnly the owner of this world can clear it!");
								packet.CreatePacket(p_);
								return;
							}
							std::string dialog = "set_default_color|`o|\n";
							dialog += "add_label_with_icon|big|`wAre you sure yopu want top clear it?|left|2|\n";
							dialog += "add_spacer|small|\nadd_textbox|`wClearing worlds costs `95000 `wgems. Are you sure you want to do this?|\n";
							dialog += "add_textbox|`wWhat happens if you clear this world?|\n";
							dialog += "add_label_with_icon|small|`w- `4All blocks will be removed!|left|2|\n";
							dialog += "add_label_with_icon|small|`w- `9The World Lock will stay in its positions.|left|242|\n";
							dialog += "add_label_with_icon|small|`w- Door Mover & Bedrock are going to stay in their positions.|left|8|\n";
							dialog += "\nadd_spacer|small|\nadd_textbox|`wPlease click the 'Clear Confirm' to clear this world.|\n";
							dialog += "end_dialog|clear_this_world|`wCancel|`wClear Confirm|\n";
							dialog += "add_quick_exit|noflags|0|0|";

							gamepacket_t packet;
							packet.Insert("OnDialogRequest");
							packet.Insert(dialog);
							packet.CreatePacket(p_);
						}



						else if (a_[b_] == "minimum_entry_level" and isdigit(a_[b_ + 1][0])) {
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
							int new_entry_level_ = atoi(a_[b_ + 1].c_str());
							if (world_->entry_level != new_entry_level_) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(p_)->netID);
								if (new_entry_level_ < 1) {
									p.Insert("Minimum entry level can't be lower than 1.");
									p.CreatePacket(p_);
									continue;
								}
								if (new_entry_level_ > 124) {
									p.Insert("Minimum entry level can't be higher than 124.");
									p.CreatePacket(p_);
									continue;
								}
								world_->entry_level = new_entry_level_;
								p.Insert("Minimum entry level for this world is set to `2Level " + to_string(new_entry_level_) + "``.");
								p.CreatePacket(p_);
							}
						}
						else if (a_[b_] == "sessionlength_dialog") {
							if (pInfo(p_)->tankIDName != world_->owner_name) break;
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wSet World Timer``|left|1482|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|\nadd_textbox|Select a time limit for how long guests can stay in your world.|left|\nend_dialog|sessionlength_edit|Nevermind|Set Time Limit|");
							p.CreatePacket(p_);
						}
						else if (a_[b_] == "changecat") {
							if (pInfo(p_)->tankIDName != world_->owner_name) break;
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wSet World Category``|left|3802|\nembed_data|chosencat|-1\nadd_textbox|Select a category for your world.|left|\nadd_button|cat0|None|noflags|0|0|\nadd_button|cat1|Adventure|noflags|0|0|\nadd_button|cat2|Art|noflags|0|0|\nadd_button|cat3|Farm|noflags|0|0|\nadd_button|cat4|Game|noflags|0|0|\nadd_button|cat5|Information|noflags|0|0|\nadd_button|cat15|Music|noflags|0|0|\nadd_button|cat6|Parkour|noflags|0|0|\nadd_button|cat14|Puzzle|noflags|0|0|\nadd_button|cat7|Roleplay|noflags|0|0|\nadd_button|cat8|Shop|noflags|0|0|\nadd_button|cat9|Social|noflags|0|0|\nadd_button|cat10|Storage|noflags|0|0|\nadd_button|cat11|Story|noflags|0|0|\nadd_button|cat12|Trade|noflags|0|0|\nadd_smalltext|Worlds in the category \"None\" can't be rated by players, and they are only listed on the normal World Select screen.|left|\nadd_smalltext|`4Warning:`` Changing your category will delete all ratings on your world.|left|\nend_dialog|worldcategory|Nevermind||");
							p.CreatePacket(p_);
						}
						else if (a_[b_] == "tempo" and isdigit(a_[b_ + 1][0])) {
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
							uint32_t new_bpm_ = atoi(a_[b_ + 1].c_str());
							if (world_->music_bpm != new_bpm_) {
								if (new_bpm_ < 20 or new_bpm_ > 200) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Tempo must be from 20-200 BPM.");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								world_->music_bpm = new_bpm_, upd_ = true;
							}
						}
						//recalcLock
						else if (a_[b_] == "recalcLock") {
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
								reapply = true;
							}
							//break;
						}
						else if (a_[b_] == "editguildmascot") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									uint32_t my_rank = 0;
									for (GuildMember member_search : guild_information->guild_members) {
										if (member_search.member_name == pInfo(p_)->tankIDName) {
											my_rank = member_search.role_id;
											break;
										}
									}
									if (my_rank < 3) break;
									gamepacket_t p;
									p.Insert("OnDialogRequest");
									p.Insert((guild_information->guild_mascot[0] != 0 || guild_information->guild_mascot[1] != 0 ? "add_dual_layer_icon_label|big|`wGrow Guild Mascot Editor ``|left|" + to_string(guild_information->guild_mascot[0]) + "|" + to_string(guild_information->guild_mascot[1]) + "|1.0|0|" : "add_label_with_icon|big|`wGrow Guild Mascot Editor ``|left|5814|") + "\nadd_spacer|small|\nadd_textbox|Create a unique Guild Mascot for your guild! Only `950,000 Gems``!|left|\nadd_textbox|Choose items from your inventory to use as your Guild Mascot.|left|\nadd_spacer|small|\nadd_item_picker|selectitembackground|`wChoose Background Item``|Choose the mascot background item!|\nadd_item_picker|selectitemforeground|`wChoose Foreground Item``|Choose the mascot foreground item!|\nadd_spacer|small|\nadd_dual_layer_icon_label|small|`wGuild Mascot Preview: ``|left|" + to_string(guild_information->guild_mascot[0]) + "|" + to_string(guild_information->guild_mascot[1]) + "|5.0|1|\nadd_spacer|small|\nadd_textbox|Increase your membership to `w30`` or more for access exclusive foreground only mascots!|left|\nadd_spacer|small|\nadd_textbox|You have not yet changed your Guild Mascot!|left|\nembed_data|bgID|" + to_string(guild_information->guild_mascot[0]) + "\nembed_data|fgID|" + to_string(guild_information->guild_mascot[1]) + "\nend_dialog|editmascot|Cancel||\nadd_quick_exit|");
									p.CreatePacket(p_);
								}
							}
						}
						else if (a_[b_] == "abondonguildconfirm") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									uint32_t my_rank = 0;
									for (GuildMember member_search : guild_information->guild_members) {
										if (member_search.member_name == pInfo(p_)->tankIDName) {
											my_rank = member_search.role_id;
											break;
										}
									}
									if (my_rank < 3) break;
									if (guild_information->guild_members.size() != 1) {
										gamepacket_t p;
										p.Insert("OnDialogRequest");
										p.Insert((guild_information->guild_mascot[0] != 0 || guild_information->guild_mascot[1] != 0 ? "add_dual_layer_icon_label|big|`wAbandon Guild``|left|" + to_string(guild_information->guild_mascot[0]) + "|" + to_string(guild_information->guild_mascot[1]) + "|1.0|0|" : "add_label_with_icon|big|`wAbandon Guild``|left|5814|") + "\nadd_textbox|`1You need to kick all guild members before you can abandon the guild! `` |left|\nadd_button|back|Back|noflags|0|0|\nend_dialog|abondonguild|||");
										p.CreatePacket(p_);
										break;
									}
									gamepacket_t p;
									p.Insert("OnDialogRequest");
									p.Insert((guild_information->guild_mascot[0] != 0 || guild_information->guild_mascot[1] != 0 ? "add_dual_layer_icon_label|big|`wAbandon Guild``|left|" + to_string(guild_information->guild_mascot[0]) + "|" + to_string(guild_information->guild_mascot[1]) + "|1.0|0|" : "add_label_with_icon|big|`wAbandon Guild``|left|5814|") + "\nadd_spacer|small|\nadd_item_picker|selectworldlock|`wSelect a World Lock``|Choose a World Lock to replace the Guild Lock|\nadd_button|back|Back|noflags|0|0|\nend_dialog|abondonguild|||");
									p.CreatePacket(p_);
								}
								break;
							}
						}
						else if (a_[b_] == "create_guild_mascot") {
							/*
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									uint32_t my_rank = 0;
									for (GuildMember member_search : guild_information->guild_members) {
										if (member_search.member_name == pInfo(p_)->tankIDName) {
											my_rank = member_search.role_id;
											break;
										}
									}
									if (my_rank < 3) break;
									gamepacket_t p;
									p.Insert("OnDialogRequest");
									p.Insert((guild_information->guild_mascot[0] != 0 || guild_information->guild_mascot[1] != 0 ? "add_dual_layer_icon_label|big|`wGrow Guild Mascot Editor ``|left|" + to_string(guild_information->guild_mascot[0]) + "|" + to_string(guild_information->guild_mascot[1]) + "|1.0|0|" : "add_label_with_icon|big|`wGrow Guild Mascot Editor ``|left|5814|") + "\nadd_spacer|small|\nadd_textbox|Create a unique Guild Mascot for your guild! Only `950,000 Gems``!|left|\nadd_textbox|Choose items from your inventory to use as your Guild Mascot.|left|\nadd_spacer|small|\nadd_item_picker|selectitembackground|`wChoose Background Item``|Choose the mascot background item!|\nadd_item_picker|selectitemforeground|`wChoose Foreground Item``|Choose the mascot foreground item!|\nadd_spacer|small|\nadd_dual_layer_icon_label|small|`wGuild Mascot Preview: ``|left|" + to_string(guild_information->guild_mascot[0]) + "|" + to_string(guild_information->guild_mascot[1]) + "|5.0|1|\nadd_spacer|small|\nadd_textbox|Increase your membership to `w30`` or more for access exclusive foreground only mascots!|left|\nadd_spacer|small|\nadd_textbox|You have not yet changed your Guild Mascot!|left|\nembed_data|bgID|" + to_string(guild_information->guild_mascot[0]) + "\nembed_data|fgID|" + to_string(guild_information->guild_mascot[1]) + "\nend_dialog|editmascot|Cancel||\nadd_quick_exit|");
									p.CreatePacket(p_);
								}
							}
							*/
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("add_label|big|`wChange Guild Mascot``|left|\nadd_spacer|small|\nadd_textbox|Create a unique Guild Mascot for your guild! Only `9250,000 Gems! ``Choose items from your inventory to use as your Guild Mascot.|left|\nadd_spacer|small|\nadd_item_picker|select_bg_mascot|`wChoose Background Item``|Choose a Background for Guild Mascot|\nadd_item_picker|select_fg_mascot|`wChoose Foreground Item``|Choose a Foreground for Guild Mascot|\nadd_spacer|small|\nend_dialog|make_mascotss|Cancel||");
							p.CreatePacket(p_);
						}
						else if (a_[b_] == "upg2") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 200000) {
										pInfo(p_)->gems -= 200000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 2!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg3") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 300000) {
										pInfo(p_)->gems -= 300000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 3!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg4") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 400000) {
										pInfo(p_)->gems -= 400000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 4!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg5") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 500000) {
										pInfo(p_)->gems -= 500000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 5!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg6") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 1000000) {
										pInfo(p_)->gems -= 1000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 6!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg7") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 2000000) {
										pInfo(p_)->gems -= 2000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 7!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg8") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 3000000) {
										pInfo(p_)->gems -= 3000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 8!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg9") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 4000000) {
										pInfo(p_)->gems -= 4000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 9!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg10") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 5000000) {
										pInfo(p_)->gems -= 5000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 10!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg11") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 6000000) {
										pInfo(p_)->gems -= 6000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 11!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg12") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 8000000) {
										pInfo(p_)->gems -= 8000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 12!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg13") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 9000000) {
										pInfo(p_)->gems -= 9000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 13!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg14") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 10000000) {
										pInfo(p_)->gems -= 10000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level 14!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_] == "upg15") {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									if (pInfo(p_)->gems >= 15000000) {
										pInfo(p_)->gems -= 15000000;
										gamepacket_t pg;
										pg.Insert("OnSetBux"), pg.Insert(pInfo(p_)->gems), pg.Insert(0), pg.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
										if (pInfo(p_)->supp >= 2) pg.Insert((float)33796, (float)1, (float)0);
										pg.CreatePacket(p_);
										guild_information->guild_level += 1;
										guild_information->guild_xp = 0;
										gamepacket_t p0;
										p0.Insert("OnAddNotification");
										p0.Insert("interface/large/gd_lup.rttex");
										p0.Insert("Awesome! You reached Guild Level Max!");
										p0.Insert("audio/hub_open.wav");
										p0.Insert(0);
										p0.CreatePacket(p_);
										//cout << "called upgradeguild function [LVL 2]" << endl;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("You don't have enough gems!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(p_);
										break;
									}
								}
								break;
							}
						}
						else if (a_[b_].substr(0, 9) == "checkbox_") {
							// checkboxes
							vector<string> target_ = explode("_", a_[b_]);
							if (target_[1] == "disable") {
								if (target_.size() == 4 and target_[2] == "music" and target_[3] == "render") {
									if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
									if (not world_->make_music_blocks_invisible and a_[b_ + 1] == "1") {
										world_->make_music_blocks_invisible = true, upd_ = true;
									}
									else if (world_->make_music_blocks_invisible and a_[b_ + 1] == "0") {
										world_->make_music_blocks_invisible = false, upd_ = true;
									}
								}
								else if (target_[2] == "music") {
									if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
									// music disable
									if (not world_->disable_music_blocks and a_[b_ + 1] == "1") {
										world_->disable_music_blocks = true, upd_ = true;
									}
									else if (world_->disable_music_blocks and a_[b_ + 1] == "0") {
										world_->disable_music_blocks = false, upd_ = true;
									}
								}
							}
							else if (target_.size() == 5 and target_[4] == "world") {
								if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) break;
								// set as home world
								if (pInfo(p_)->home_world != world_->name and a_[b_ + 1] == "1") {
									pInfo(p_)->home_world = world_->name;
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert(world_->name + " has been set as your home world!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
								}
								else if (pInfo(p_)->home_world == world_->name and a_[b_ + 1] == "0") {
									pInfo(p_)->home_world = "";
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert(world_->name + " has been removed as your home world!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
								}
							}
							else if (target_[1] == "member") {
								if (block_->fg == 5814) {
									uint32_t guild_id = world_->guild_id;
									vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
									if (p != guilds.end()) {
										Guild* guild_information = &guilds[p - guilds.begin()];
										if (not guild_information->all_access and a_[b_ + 1] == "1") {
											guild_information->all_access = true;
											upd_ = true;
										}
										else if (guild_information->all_access and a_[b_ + 1] == "0") {
											guild_information->all_access = false;
											upd_ = true;
										}
									}
								}
							}
							else if (target_[1] == "elder") {
								if (block_->fg == 5814) {
									uint32_t guild_id = world_->guild_id;
									vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
									if (p != guilds.end()) {
										Guild* guild_information = &guilds[p - guilds.begin()];
										if (not guild_information->coleader_elder_access and a_[b_ + 1] == "1") {
											guild_information->coleader_elder_access = true;
											upd_ = true;
										}
										else if (guild_information->coleader_elder_access and a_[b_ + 1] == "0") {
											guild_information->coleader_elder_access = false;
											upd_ = true;
										}
									}
								}
							}
							else if (target_[1] == "coleader") {
								if (block_->fg == 5814) {
									uint32_t guild_id = world_->guild_id;
									vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
									if (p != guilds.end()) {
										Guild* guild_information = &guilds[p - guilds.begin()];
										if (not guild_information->coleader_access and a_[b_ + 1] == "1") {
											guild_information->coleader_access = true;
											upd_ = true;
										}
										else if (guild_information->coleader_access and a_[b_ + 1] == "0") {
											guild_information->coleader_access = false;
											upd_ = true;
										}
									}
								}
							}
							else if (target_[1] == "displaymascot") {
								if (block_->fg == 5814) {
									uint32_t guild_id = world_->guild_id;
									vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
									if (p != guilds.end()) {
										Guild* guild_information = &guilds[p - guilds.begin()];
										if (not guild_information->unlocked_mascot and a_[b_ + 1] == "1") {
											guild_information->unlocked_mascot = true;
										}
										else if (guild_information->unlocked_mascot and a_[b_ + 1] == "0") {
											guild_information->unlocked_mascot = false;
										}
									}
								}
							}
							else if (target_[1] == "ignore") {
								if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
									if (not block_->empty_air and a_[b_ + 1] == "1") {
										block_->empty_air = true;
									}
									else if (block_->empty_air and a_[b_ + 1] == "0") {
										block_->empty_air = false;
									}
								}
							}
							else if (target_[1] == "buildonly") {
								if (block_->fg == 4994) {
									if (not block_->build_only and a_[b_ + 1] == "1") {
										block_->build_only = true;
									}
									else if (block_->build_only and a_[b_ + 1] == "0") {
										block_->build_only = false;
									}
								}
							}
							else if (target_[1] == "admins") {
								if (block_->fg == 4994) {
									if (not block_->limit_admins and a_[b_ + 1] == "1") {
										block_->limit_admins = true;
									}
									else if (block_->limit_admins and a_[b_ + 1] == "0") {
										block_->limit_admins = false;
									}
								}
							}
							else if (target_[1] == "silence") {
								if (block_->fg == 4802) {
									if (not world_->silence and a_[b_ + 1] == "1") {
										world_->silence = true;
									}
									else if (world_->silence and a_[b_ + 1] == "0") {
										world_->silence = false;
									}
								}
							}
							else if (target_[1] == "rainbows") {
								if (block_->fg == 4802) {
									if (not world_->rainbows and a_[b_ + 1] == "1") {
										world_->rainbows = true;
									}
									else if (world_->rainbows and a_[b_ + 1] == "0") {
										world_->rainbows = false;
									}
									upd_ = true;
								}
							}
							else if (target_[1] == "public") {
								if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
									if (not block_->open_to_public and a_[b_ + 1] == "1") {
										block_->open_to_public = true;
										upd_ = true;
									}
									else if (block_->open_to_public and a_[b_ + 1] == "0") {
										block_->open_to_public = false;
										upd_ = true;
									}
								}
								else {
									if (not world_->open_to_public and a_[b_ + 1] == "1") {
										world_->open_to_public = true;
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										if (pInfo(p_)->mod == 0 && pInfo(p_)->dev == 0)pInfo(p_)->name_color = "`2";
										p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` has set the `$World Lock`` to `$PUBLIC");
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == world_->name) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else if (world_->open_to_public and a_[b_ + 1] == "0") {
										world_->open_to_public = false;
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										if (pInfo(p_)->mod == 0 && pInfo(p_)->dev == 0)pInfo(p_)->name_color = "`2";
										p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` has set the `$World Lock`` to `4PRIVATE``");
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == world_->name) {
												p.CreatePacket(currentPeer);
											}
										}
									}
								}
							}
							else if (target_[1] == "vending") {
								if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
								}
								else {
									if (not world_->v_p and a_[b_ + 1] == "1") {
										world_->v_p = true;
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										if (pInfo(p_)->mod == 0 && pInfo(p_)->dev == 0)pInfo(p_)->name_color = "`2";
										p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` allows admin to edit `$Vending``");
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == world_->name) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else if (world_->v_p and a_[b_ + 1] == "0") {
										world_->v_p = false;
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										if (pInfo(p_)->mod == 0 && pInfo(p_)->dev == 0)pInfo(p_)->name_color = "`2";
										p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` disallow admins to edit `$Vending``");
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == world_->name) {
												p.CreatePacket(currentPeer);
											}
										}
									}
								}
							}
							else if (target_.size() == 2 and a_[b_ + 1] == "0") {
								string user_name = target_[1].erase(0, 1);
								if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
									if (find(block_->admins.begin(), block_->admins.end(), user_name) != block_->admins.end()) {
										block_->admins.erase(remove(block_->admins.begin(), block_->admins.end(), user_name), block_->admins.end());
										gamepacket_t p;
										p.Insert("OnConsoleMessage");
										p.Insert(user_name + " was removed from a " + items[block_->fg].name + ".");
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == world_->name) {
												p.CreatePacket(currentPeer);
											}
											if (pInfo(currentPeer)->tankIDName == user_name) {
												packet_(currentPeer, "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0");
												gamepacket_t p;
												p.Insert("OnTalkBubble");
												p.Insert(pInfo(currentPeer)->netID);
												if (pInfo(p_)->mod == 0 && pInfo(p_)->dev == 0)pInfo(p_)->name_color = "`2";
												p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` has `4removed`` your access from a lock on world `w" + world_->name + "``.");
												p.Insert(0), p.Insert(0);
												p.CreatePacket(currentPeer);
												if (pInfo(currentPeer)->world == world_->name) {
													PlayerMoving data_{};
													data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
													BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
													BYTE* blc = raw + 56;
													form_visual(blc, *block_, *world_, p_, false);
													for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
														if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
														if (pInfo(currentPeer2)->world == world_->name) {
															send_raw(currentPeer2, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
														}
													}
													delete[] raw, blc;
													if (block_->locked) {
														upd_lock(*block_, *world_, p_);
													}
												}
											}
										}
									}
								}
								else if (find(world_->admins.begin(), world_->admins.end(), user_name) != world_->admins.end()) {
									world_->admins.erase(remove(world_->admins.begin(), world_->admins.end(), user_name), world_->admins.end());
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert(user_name + " was removed from a " + items[block_->fg].name + ".");
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											p.CreatePacket(currentPeer);
										}
										if (pInfo(currentPeer)->tankIDName == user_name) {
											packet_(currentPeer, "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0");
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(currentPeer)->netID);
											if (pInfo(p_)->mod == 0 && pInfo(p_)->dev == 0)pInfo(p_)->name_color = "`2";
											p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` has `4removed`` your access from a lock on world `w" + world_->name + "``.");
											p.Insert(0), p.Insert(0);
											p.CreatePacket(currentPeer);
											gamepacket_t p2(0, pInfo(currentPeer)->netID);
											{
												p2.Insert("OnNameChanged");
												if (pInfo(currentPeer)->mod == 0 && pInfo(currentPeer)->dev == 0)pInfo(currentPeer)->name_color = "`0";
												p2.Insert((not pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->d_name : (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name)) + (pInfo(currentPeer)->is_legend ? " of Legend" : "") + "``");
											}
											if (pInfo(currentPeer)->world == world_->name) {
												PlayerMoving data_{};
												data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
												BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
												BYTE* blc = raw + 56;
												form_visual(blc, *block_, *world_, p_, false);
												for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
													if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
													if (pInfo(currentPeer2)->world == world_->name) {
														p2.CreatePacket(currentPeer2);
														send_raw(currentPeer2, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
													}
												}
												delete[] raw, blc;
												if (block_->locked) {
													upd_lock(*block_, *world_, p_);
												}
											}
										}
									}
								}
							}
						}
						else if (a_[b_] == "playerNetID" and isdigit(a_[b_ + 1][0])) { // access kazka
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
								if (block_->admins.size() >= 26) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("Lock has reached access limit!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								size_t id_ = atoi(a_[b_ + 1].c_str());
								if (id_ == pInfo(p_)->netID and not pInfo(p_)->superdev) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("I already have access!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								/*---- end debug print ----
								0: OnTalkBubble
								1: 3
								2: `wG2W`` already has access to the lock.
								3: 0
								4: 0*/
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->netID == id_ and pInfo(currentPeer)->world == world_->name) {
										if (pInfo(currentPeer)->ac_.find(pInfo(p_)->netID) != pInfo(currentPeer)->ac_.end()) break;
										string user_name = pInfo(currentPeer)->tankIDName;
										if (user_name == block_->owner_name or find(block_->admins.begin(), block_->admins.end(), user_name) != block_->admins.end()) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(p_)->netID);
											p.Insert((pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "`` already has access to the lock.");
											p.Insert(0);
											p.Insert(0);
											p.CreatePacket(p_);
											break;
										}
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("Offered " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "`` access to lock.");
										p.Insert(0);
										p.Insert(0);
										p.CreatePacket(p_);
										{
											pInfo(currentPeer)->ac_.insert({ pInfo(p_)->netID, (x_ + (y_ * 100)) });
											packet_(currentPeer, "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0");
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` wants to add you to a " + items[block_->fg].name + ". Wrench yourself to accept.");
											p.CreatePacket(currentPeer);
										}
										break;
									}
								}
							}
							else {
								if (world_->admins.size() >= 26) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("World has reached access limit!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								size_t id_ = atoi(a_[b_ + 1].c_str());
								if (id_ == pInfo(p_)->netID and not pInfo(p_)->superdev) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(p_)->netID);
									p.Insert("I already have access!");
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(p_);
									continue;
								}
								/*---- end debug print ----
								0: OnTalkBubble
								1: 3
								2: `wG2W`` already has access to the lock.
								3: 0
								4: 0*/
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->netID == id_ and pInfo(currentPeer)->world == world_->name) {
										if (pInfo(currentPeer)->ac_.find(pInfo(p_)->netID) != pInfo(currentPeer)->ac_.end()) break;
										string user_name = pInfo(currentPeer)->tankIDName;
										if (user_name == world_->owner_name or find(world_->admins.begin(), world_->admins.end(), user_name) != world_->admins.end()) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(p_)->netID);
											p.Insert((pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "`` already has access to the lock.");
											p.Insert(0);
											p.Insert(0);
											p.CreatePacket(p_);
											break;
										}
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(p_)->netID);
										p.Insert("Offered " + (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name) + "`` access to lock.");
										p.Insert(0);
										p.Insert(0);
										p.CreatePacket(p_);
										{
											pInfo(currentPeer)->ac_.insert({ pInfo(p_)->netID, (x_ + (y_ * 100)) });
											packet_(currentPeer, "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0");
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert((pInfo(p_)->mod && pInfo(p_)->d_name.empty() ? pInfo(p_)->name_color : "`0") + "" + (pInfo(p_)->d_name.empty() ? pInfo(p_)->tankIDName : pInfo(p_)->d_name) + "`` wants to add you to a " + items[block_->fg].name + ". Wrench yourself to accept.");
											p.CreatePacket(currentPeer);
										}
										break;
									}
									//break;
								}
							}
							break;
						}
						if (upd_) {
							if (block_->fg == 5814) {
								uint32_t guild_id = world_->guild_id;
								vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
								if (p != guilds.end()) {
									Guild* guild_information = &guilds[p - guilds.begin()];
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											if (pInfo(currentPeer)->guild_id == guild_information->guild_id) {
												if (guild_access(currentPeer, guild_id)) {
													gamepacket_t p2(0, pInfo(currentPeer)->netID);
													{
														p2.Insert("OnNameChanged");
														if (pInfo(currentPeer)->mod == 0 && pInfo(currentPeer)->dev == 0) pInfo(currentPeer)->name_color = "`^";
														p2.Insert((not pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->d_name : (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name)) + (pInfo(currentPeer)->is_legend ? " of Legend" : "") + "``");
													} for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
														if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
														if (pInfo(currentPeer2)->world == world_->name) {
															p2.CreatePacket(currentPeer2);
														}
													}
												}
												else if (find(world_->admins.begin(), world_->admins.end(), pInfo(currentPeer)->tankIDName) == world_->admins.end()) {
													if (pInfo(currentPeer)->tankIDName != world_->owner_name) {
														gamepacket_t p2(0, pInfo(currentPeer)->netID);
														{
															p2.Insert("OnNameChanged");
															if (pInfo(currentPeer)->mod == 0 && pInfo(currentPeer)->dev == 0) pInfo(currentPeer)->name_color = "`0";
															p2.Insert((not pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->d_name : (pInfo(currentPeer)->mod && pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->name_color : "`0") + "" + (pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->tankIDName : pInfo(currentPeer)->d_name)) + (pInfo(currentPeer)->is_legend ? " of Legend" : "") + "``");
														} for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
															if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
															if (pInfo(currentPeer2)->world == world_->name) {
																p2.CreatePacket(currentPeer2);
															}
														}
													}
												}
											}
										}
									}
								}
							}
							if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc;
							}
							else {
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc;
							}
							if (block_->locked) {
								upd_lock(*block_, *world_, p_);
							}
						}
					}
					if (reapply) {
						//remove lock from current
						{
							vector<int> new_tiles{};
							vector<WorldBlock> shadow_copy_2 = world_->blocks;
							new_tiles.push_back(x_ + (y_ * 100));
							int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
							for (int i2 = 0; i2 < new_tiles.size(); i2++) {
								int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
								if (s_x_ < 99 and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].lock_origin == (x_ + (y_ * 100))) {
									if (not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned) {
										shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned = true;
										new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
										world_->blocks[s_x_ + 1 + (s_y_ * 100)].locked = false;
										world_->blocks[s_x_ + 1 + (s_y_ * 100)].lock_origin = -1;
									}
								} if (s_x_ > 0 and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].lock_origin == (x_ + (y_ * 100))) {
									if (not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned) {
										shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned = true;
										new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
										world_->blocks[s_x_ - 1 + (s_y_ * 100)].locked = false;
										world_->blocks[s_x_ - 1 + (s_y_ * 100)].lock_origin = -1;
									}
								} if (s_y_ < 59 and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].lock_origin == (x_ + (y_ * 100))) {
									if (not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned) {
										shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
										new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
										world_->blocks[s_x_ + ((s_y_ + 1) * 100)].locked = false;
										world_->blocks[s_x_ + ((s_y_ + 1) * 100)].lock_origin = -1;
									}
								} if (s_y_ > 0 and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].lock_origin == (x_ + (y_ * 100))) {
									if (not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned) {
										shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
										new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
										world_->blocks[s_x_ + ((s_y_ - 1) * 100)].locked = false;
										world_->blocks[s_x_ + ((s_y_ - 1) * 100)].lock_origin = -1;
									}
								}
							}
						}
						int lock_size = block_->fg == 202 ? 10 : (block_->fg == 204 ? 48 : (block_->fg == 202 ? 200 : 200));
						if (not block_->empty_air) {
							{
								//apply new without empty air
								vector<vector<int>> tiles_ = lock_tiles(world_, x_, y_, lock_size);
								lock_size = tiles_.size();
								PlayerMoving data_{};
								data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								data_.netID = pInfo(p_)->id;
								data_.plantingTree = block_->fg;
								BYTE* raw;
								if (tiles_.size() != 0) {
									raw = packPlayerMoving(&data_, 112 + (lock_size * 2) + alloc_(world_, block_));
									int lalala = 8;
									memcpy(raw + 8, &lock_size, 2);
									memcpy(raw + 12, &lalala, 2);
									BYTE* blc = raw + 56;
									for (int i_ = 0; i_ < tiles_.size(); i_++) {
										vector<int> update_tiles = tiles_[i_];
										int x = update_tiles[0];
										int y = update_tiles[1];
										int sq_ = x + (y * 100);
										WorldBlock* block_ = &world_->blocks[sq_];
										if (block_->locked) {
											//continue;
										}
										else {
											block_->locked = true;
											block_->lock_origin = x_ + (y_ * 100);
											memcpy(blc + (i_ * 2), &sq_, 2);
										}
									}
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == name_) {
											packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
											send_raw(currentPeer, 4, raw, 112 + (lock_size * 2) + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] raw, blc;
								}
								else {
									raw = packPlayerMoving(&data_, 56);
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == name_) {
											packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
											send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] raw;
								}
							}
						}
						else {
							vector<int> new_tiles{};
							vector<int> lock_tiles{};
							vector<WorldBlock> shadow_copy_2 = world_->blocks;
							new_tiles.push_back(x_ + (y_ * 100));
							int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
							for (int i2 = 0; i2 < new_tiles.size(); i2++) {
								if (lock_tiles.size() >= lock_size) break;
								int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
								if (s_x_ < 99 and not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].fg != 0 and not_mod(shadow_copy_2[s_x_ + 1 + (s_y_ * 100)], s_x_, s_y_) or s_x_ < 99 and not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].bg != 0 and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].fg == 0) {
									if (not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned) {
										shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned = true;
										new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
										lock_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
										world_->blocks[s_x_ + 1 + (s_y_ * 100)].locked = true;
										world_->blocks[s_x_ + 1 + (s_y_ * 100)].lock_origin = x_ + (y_ * 100);
									}
								} if (s_x_ > 0 and not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].fg != 0 and not_mod(shadow_copy_2[s_x_ - 1 + (s_y_ * 100)], s_x_, s_y_) or s_x_ > 0 and not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].bg != 0 and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].fg == 0) {
									if (not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned) {
										shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned = true;
										new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
										lock_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
										world_->blocks[s_x_ - 1 + (s_y_ * 100)].locked = true;
										world_->blocks[s_x_ - 1 + (s_y_ * 100)].lock_origin = x_ + (y_ * 100);
									}
								} if (s_y_ < 59 and not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].fg != 0 and not_mod(shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)], s_x_, s_y_) or s_y_ < 59 and not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].bg != 0 and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].fg == 0) {
									if (not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned) {
										shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
										new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
										lock_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
										world_->blocks[s_x_ + ((s_y_ + 1) * 100)].locked = true;
										world_->blocks[s_x_ + ((s_y_ + 1) * 100)].lock_origin = x_ + (y_ * 100);
									}
								} if (s_y_ > 0 and not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].fg != 0 and not_mod(shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)], s_x_, s_y_) or s_y_ > 0 and not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].bg != 0 and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].fg == 0) {
									if (not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned) {
										shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
										new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
										lock_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
										world_->blocks[s_x_ + ((s_y_ - 1) * 100)].locked = true;
										world_->blocks[s_x_ + ((s_y_ - 1) * 100)].lock_origin = x_ + (y_ * 100);
									}
								}
							}

							//upd_lock(*block_, *world_, p_);
							lock_size = lock_tiles.size();
							if (lock_tiles.size() > 0) {
								PlayerMoving data_{};
								data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								data_.netID = block_->owner_name == pInfo(p_)->tankIDName ? pInfo(p_)->id : -1;
								data_.plantingTree = block_->fg;
								BYTE* raw;
								raw = packPlayerMoving(&data_, 112 + (lock_size * 2) + alloc_(world_, block_));
								int lalala = 8;
								memcpy(raw + 8, &lock_size, 2);
								memcpy(raw + 12, &lalala, 2);
								BYTE* blc = raw + 56;
								for (int i_ = 0; i_ < lock_tiles.size(); i_++) memcpy(blc + (i_ * 2), &lock_tiles[i_], 2);
								PlayerMoving data_2{};
								data_2.packetType = 5, data_2.punchX = x_, data_2.punchY = y_, data_2.characterState = 0x8;
								BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(world_, block_));
								BYTE* blc2 = raw2 + 56;
								form_visual(blc2, *block_, *world_, p_, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
										send_raw(currentPeer, 4, raw, 112 + (lock_size * 2) + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
										send_raw(currentPeer, 4, raw2, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc, raw2, blc2;
							}
							else {
								PlayerMoving data_{};
								data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								data_.netID = block_->owner_name == pInfo(p_)->tankIDName ? pInfo(p_)->id : -1;
								data_.plantingTree = block_->fg;
								BYTE* raw = packPlayerMoving(&data_, 56);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (world_->name == pInfo(currentPeer)->world) {
										send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										PlayerMoving data_2{};
										data_2.packetType = 5, data_2.punchX = x_, data_2.punchY = y_, data_2.characterState = 0x8;
										BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(world_, block_));
										BYTE* blc2 = raw2 + 56;
										form_visual(blc2, *block_, *world_, currentPeer, false);
										packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
										send_raw(currentPeer, 4, raw2, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
										delete[] raw2, blc2;
									}
								}
								delete[] raw;
							}
						}
					}
				}
			}
			break;
		}
		else if (a_[i_] == "abondonguild") {
			if (a_.size() != 7 and a_.size() != 8 and a_.size() != 11) break;
			if (pInfo(p_)->guild_id == 0) break;
			if (a_.size() == 8 or a_.size() == 11) {
				string button_clicked = a_.size() == 8 ? a_[5] : a_[8];
				if (button_clicked == "back") {
					string name_ = pInfo(p_)->world;
					vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
					if (p != worlds.end()) {
						World* world_ = &worlds[p - worlds.begin()];
						int x_ = 0, y_ = 0;
						int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
						for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
							if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
								uint16_t id_ = world_->blocks[i_].fg;
								if (id_ == 5814) {
									x_ = i_ % xSize;
									y_ = i_ / xSize;
									break;
								}
							}
						}
						WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
						send_edit_lock(p_, world_, block_->fg, x_, y_);
					}
				}
				else if (button_clicked == "abondonguild") {
					if (not isdigit(a_[5][0])) break;
					int planting_id_ = atoi(a_[5].c_str());
					if (planting_id_ >= items.size() or planting_id_ < 0) break;
					if (items[planting_id_].blockType != LOCK or planting_id_ == 202 or planting_id_ == 204 or planting_id_ == 206 or planting_id_ == 4994) {
						break;
					}
					string name_ = pInfo(p_)->world;
					vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
					if (p != worlds.end()) {
						World* world_ = &worlds[p - worlds.begin()];
						uint32_t guild_id = world_->guild_id;
						vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
						if (p != guilds.end()) {
							Guild* guild_information = &guilds[p - guilds.begin()];
							for (GuildMember member_search : guild_information->guild_members) {
								if (member_search.member_name == pInfo(p_)->tankIDName) {
									if (member_search.role_id != 3) break;
									int ySize = (int)world_->blocks.size() / 100, xSize = (int)world_->blocks.size() / ySize;
									for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
										if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
											uint16_t id_ = world_->blocks[i_].fg;
											if (id_ == 5814) {
												int x_ = i_ % xSize;
												int y_ = i_ / xSize;
												WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
												int c_ = -1;
												if (modify_inventory(p_, planting_id_, c_) == 0) {
													leave_guild(p_);
													block_->fg = planting_id_;
													world_->guild_id = 0;
													PlayerMoving data_{};
													data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
													data_.netID = pInfo(p_)->id;
													data_.plantingTree = block_->fg;
													BYTE* raw = packPlayerMoving(&data_, 56);
													PlayerMoving data_2{};
													data_2.packetType = 5, data_2.punchX = x_, data_2.punchY = y_, data_2.characterState = 0x8;
													BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(world_, block_));
													BYTE* blc = raw2 + 56;
													form_visual(blc, *block_, *world_, p_, false);
													for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
														if (pInfo(currentPeer)->world == world_->name) {
															send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
															send_raw(currentPeer, 4, raw2, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
														}
													}
													delete[] raw, raw2, blc;
													gamepacket_t p;
													p.Insert("OnConsoleMessage");
													p.Insert("`5[GUILD ALERT]`` Guild Abandoned!");
													p.CreatePacket(p_);
												}
												break;
											}
										}
									}
									break;
								}
							}
						}
					}
				}
				break;
			}
			if (not isdigit(a_[5][0])) break;
			int planting_id_ = atoi(a_[5].c_str());
			if (planting_id_ >= items.size() or planting_id_ < 0) break;
			if (items[planting_id_].blockType != LOCK or planting_id_ == 202 or planting_id_ == 204 or planting_id_ == 206 or planting_id_ == 4994) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("add_label_with_icon|big|`wAbandon Guild ``|left|5814|\nadd_textbox|`4You need to select a World Lock!|left||\nadd_button|back|Back|noflags|0|0|\nend_dialog|abondonguild|||");
				p.CreatePacket(p_);
				break;
			}
			gamepacket_t p;
			p.Insert("OnDialogRequest");
			p.Insert("add_label_with_icon|big|`wAbandon Guild ``|left|5814|\nadd_textbox|`1Are you sure you want to abandon the guild?``|left|\nadd_textbox|`4BEWARE:``|left|\nadd_spacer|small|\nadd_textbox|`8- The Guild Lock will NOT return to your inventory!``|left|\nadd_textbox|`8- If you purchased a Guild Mascot this will be lost and will be made available to other guilds to buy!``|left|\nadd_textbox|`8- You will not get back any of the Gems you invested in the Guild!``|left|\nadd_textbox|`8- You will lose all Guild XP and levels the guild accomplished!``|left|\nadd_textbox|`8- When the Guild is abandoned it cannot be recovered!``|left|\nembed_data|worldlockId|" + to_string(planting_id_) + "\nadd_spacer|small|\nadd_button|abondonguild|Abandon Guild|noflags|0|0|\nadd_button|back|Back|noflags|0|0|\nend_dialog|abondonguild|||");
			p.CreatePacket(p_);
			break;
		}
		else if (a_[i_] == "confirmguildlockkey") {
			if (a_.size() != 5) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				if (world_->owner_name != pInfo(p_)->tankIDName) break;
				int c_ = 0;
				modify_inventory(p_, 5816, c_);
				if (c_ != 0) break;
				for (int i_ = 0; i_ < world_->drop.size(); i_++) {
					if (world_->drop[i_].x == -1 or world_->drop[i_].id == 0) continue;
					WorldBlock* block_ = &world_->blocks[(world_->drop[i_].x / 32) + ((world_->drop[i_].y / 32) * 100)];
					if (items[block_->fg].collisionType != 1) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("`4Oops!... Can't trade a world with floating items that are unblocked or in treasure chests!``");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(p_);
						return;
					}
				}
				uint16_t locked_with = 0;
				bool alr_failed = false, untradebox = false;
				for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
					if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
						uint16_t id_ = world_->blocks[i_].fg;
						if (id_ == 202 or id_ == 204 or id_ == 206 or id_ == 4994) {
							alr_failed = true;
						}
						else {
							locked_with = id_;
						}
					}
				}
				for (int i_ = 0; i_ < world_->blocks.size(); i_++) if (world_->blocks[i_].fg == 4516) untradebox = true;
				if (locked_with == 0) break;
				if (untradebox) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("`4To trade a world, you will need to remove Untrade-a-Box!``");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(p_);
					return;
				}
				if (alr_failed) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("To trade a world, you can only have one lock on it, the `5World Lock``.  Remove the rest!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(p_);
					return;
				}
				if (world_->admins.size() != 0) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("You'll first need to remove all players with access to your " + items[locked_with].name + " to get a " + items[5816].name + ".");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(p_);
					return;
				}
				c_ = 1;
				if (modify_inventory(p_, 5816, c_) == 0) {
					packet_(p_, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(p_)->netID);
					p.Insert("You got a `#" + items[5816].name + "``! You can now transfer leadership of the guild!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(p_);
				}
			}
			break;
		}
		else if (a_[i_] == "sign_edit") {
			if (a_.size() != 13) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int x_ = atoi(a_[i_ + 2].c_str()), y_ = atoi(a_[i_ + 5].c_str());
			if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60) break;
			string tekstas = a_[i_ + 8];
			if (tekstas.size() > 128) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
				if (block_->txt == tekstas or block_->fg == 0 or items[block_->fg].blockType != BlockTypes::SIGN) break;
				if (not world_->open_to_public and world_->owner_name != pInfo(p_)->tankIDName and not pInfo(p_)->dev and not world_->owner_name.empty() and (!guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (not world_->open_to_public and check_lock->owner_name != pInfo(p_)->tankIDName and world_->owner_name.empty() and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(p_)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				if (block_->fg == 1684) {
					transform(tekstas.begin(), tekstas.end(), tekstas.begin(), ::toupper);
					block_->door_id = tekstas;
				}
				else {
					block_->txt = tekstas;
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + tekstas.size() + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, p_, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							send_raw(currentPeer, 4, raw, 112 + tekstas.size() + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
					if (block_->locked) {
						upd_lock(*block_, *world_, p_);
					}
				}
			}
			break;
		}
		else if (a_[i_] == "trash_item" or a_[i_] == "drop_item" or a_[i_] == "trash_item2") {
			if (a_.size() != 10 and a_[i_] != "trash_item2") break;
			if (a_[i_] == "trash_item2" and a_.size() != 11) break;
			if (not isdigit(a_[i_ + 2][0]) or not isdigit(a_[i_ + 5][0])) break;
			int id_ = atoi(a_[i_ + 2].c_str()), c_ = atoi(a_[i_ + 5].c_str());
			int count = 0;
			int drop_fish = 0;
			if (items[id_].blockType == BlockTypes::FISH) {
				for (int i_ = 0, remove = 0; i_ < pInfo(p_)->inv.size(); i_++) if (pInfo(p_)->inv[i_].id == id_) drop_fish = pInfo(p_)->inv[i_].count, c_ = pInfo(p_)->inv[i_].count;
			}
			if (id_ >= items.size() or id_ == 18 or id_ == 32 or id_ == 6336) break;
			string name_ = pInfo(p_)->world;
			vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
			if (p != worlds.end()) {
				World* world_ = &worlds[p - worlds.begin()];
				c_ = c_ * -1;
				if (a_[i_] == "trash_item" or a_[i_] == "trash_item2") {
					if (a_[i_] == "trash_item" and items[id_].untradeable) {
						if (id_ == 9770 or id_ == 10362 or id_ == 9846 or id_ == 9772 or id_ == 5480 or id_ == 1424) break;
						int has_ = 0;
						modify_inventory(p_, id_, has_);
						if (has_ < c_) break;
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`4Recycle`` " + to_string(c_ * -1) + " `w" + items[id_].name + "``|left|" + to_string(id_) + "|\nembed_data|itemID|" + to_string(id_) + "\nembed_data|count|" + to_string(c_ * -1) + "\nadd_textbox|You are recycling an `9UNTRADEABLE`` item. Are you absolutely sure you want to do this? There is no way to get the item back if you select yes.|left|\nend_dialog|trash_item2|NO!|Yes, I am sure|");
						p.CreatePacket(p_);

						string messages = pInfo(p_)->tankIDName + " trash " + to_string(c_) + " " + items[id_].name + " in " + pInfo(p_)->world;
						ofstream file("logs/trash.txt", ios::app);
						if (file.is_open()) {
							auto now = time(nullptr);
							file << "" << getDate() << " " << messages << "\n";
						}
						file.close();
						break;
					}
					if (modify_inventory(p_, id_, c_) == 0) {
						string messages = pInfo(p_)->tankIDName + " trash " + to_string(c_) + " " + items[id_].name + " in " + pInfo(p_)->world;
						ofstream file("logs/trash.txt", ios::app);
						if (file.is_open()) {
							auto now = time(nullptr);
							file << "" << getDate() << " " << messages << "\n";
						}
						file.close();
						packet_(p_, "action|play_sfx\nfile|audio/trash.wav\ndelayMS|0");
						a_[i_ + 5].erase(0, min(a_[i_ + 5].find_first_not_of('0'), a_[i_ + 5].size() - 1));
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						if (pInfo(p_)->supp != 0) {
							int item = id_, maxgems = 0, receivegems = 0;
							int count = atoi(a_[i_ + 5].c_str());
							if (id_ % 2 != 0) item -= 1;
							maxgems = items[item].max_gems2;
							if (items[item].max_gems2 != 0) if (maxgems != 0) for (int i = 0; i < count; i++) receivegems += rand() % maxgems;
							if (items[item].max_gems3 != 0) receivegems = count * items[item].max_gems3;
							if (receivegems != 0) {
								pInfo(p_)->gems += receivegems;
								gamepacket_t p;
								p.Insert("OnSetBux");
								p.Insert(pInfo(p_)->gems);
								p.Insert(0);
								p.Insert((pInfo(p_)->supp >= 1) ? 1 : 0);
								if (pInfo(p_)->supp >= 2) {
									p.Insert((float)33796, (float)1, (float)0);
								}
								p.CreatePacket(p_);
							}
							p.Insert((items[id_].blockType == BlockTypes::FISH ? (to_string(abs(c_))) + "lb." : a_[i_ + 5]) + " `w" + items[id_].ori_name + "`` recycled, `0" + setGems(receivegems) + "`` gems earned.");
						}
						else p.Insert((items[id_].blockType == BlockTypes::FISH ? (to_string(abs(c_))) + "lb." : a_[i_ + 5]) + " `w" + items[id_].ori_name + "`` trashed.");
						p.CreatePacket(p_);
						break;
					}
					break;
				}
				if (find(world_->active_jammers.begin(), world_->active_jammers.end(), 4758) != world_->active_jammers.end()) {
					if (to_lower(world_->owner_name) == to_lower(pInfo(p_)->tankIDName) || find(world_->admins.begin(), world_->admins.end(), to_lower(pInfo(p_)->tankIDName)) != world_->admins.end()) {

					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(p_)->netID);
						p.Insert("The Mini-Mod says no dropping items in this world!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(p_);
						break;
					}
				}
				if (items[id_].untradeable or id_ == 1424 or id_ == 5816 or id_ == 9770 or id_ == 10362 or id_ == 9846 or id_ == 9772 or id_ == 5480 or id_ == 1424) {
					gamepacket_t p;
					p.Insert("OnTextOverlay");
					p.Insert("You can't drop that.");
					p.CreatePacket(p_);
					break;
				}

				if (has_playmod(pInfo(p_), "dropped!")) {
					int time_ = 0;
					for (PlayMods peer_playmod : pInfo(p_)->playmods) {
						if (peer_playmod.id == 30) {
							time_ = peer_playmod.time - time(nullptr);
							break;
						}
					}
					packet_(p_, "action|log\nmsg|>> (" + to_playmod_time(time_) + "before you can able to drop again)", "");
					break;
				}


				string name_ = pInfo(p_)->world;
				vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
				if (p != worlds.end()) {
					World* world_ = &worlds[p - worlds.begin()];
					WorldDrop drop_{};
					drop_.id = id_;
					if (drop_fish == 0) drop_.count = atoi(a_[i_ + 5].c_str());
					else drop_.count = drop_fish;
					drop_.uid = uint16_t(world_->drop.size()) + 1;
					int a_ = rand() % 12;
					drop_.x = (pInfo(p_)->state == 16 ? pInfo(p_)->x - (a_ + 20) : (pInfo(p_)->x + 20) + a_);
					drop_.y = pInfo(p_)->y + rand() % 16;
					if (drop_.x / 32 < 0 or drop_.x / 32 >= 100 or drop_.y / 32 < 0 or drop_.y / 32 >= 60) {
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert("You can't drop that here, face somewhere with open space.");
						p.CreatePacket(p_);
						break;
					}
					BlockTypes type_ = FOREGROUND;
					WorldBlock* block_ = &world_->blocks[(pInfo(p_)->state == 16 ? drop_.x / 32 : round((double)drop_.x / 32)) + (drop_.y / 32 * 100)];
					if (items[block_->fg].collisionType == 1 || block_->fg == 6 || items[block_->fg].entrance || items[block_->fg].toggleable and is_false_state(world_->blocks[(pInfo(p_)->state == 16 ? drop_.x / 32 : round((double)drop_.x / 32)) + (drop_.y / 32 * 100)], 0x00400000)) {
						gamepacket_t p;
						p.Insert("OnTextOverlay");
						p.Insert(items[block_->fg].blockType == BlockTypes::MAIN_DOOR ? "You can't drop items on the white door." : "You can't drop that here, face somewhere with open space.");
						p.CreatePacket(p_);
						break;
					}
					int count_ = 0;
					bool dublicated = false;
					for (int i_ = 0; i_ < world_->drop.size(); i_++) {
						if (abs(world_->drop[i_].y - drop_.y) <= 16 and abs(world_->drop[i_].x - drop_.x) <= 16) {
							count_ += 1;
						}
						if (world_->drop[i_].id == id_) if (world_->drop[i_].count + drop_.count < 200) dublicated = true;
					}
					if (!dublicated) {
						if (count_ > 20) {
							gamepacket_t p;
							p.Insert("OnTextOverlay");
							p.Insert("You can't drop that here, find an emptier spot!");
							p.CreatePacket(p_);
							break;
						}
					}
					int dropped = c_;
					if (modify_inventory(p_, id_, c_) == 0) {
						string messages = pInfo(p_)->tankIDName + " drop " + to_string(c_) + " " + items[id_].name + " in " + pInfo(p_)->world;
						ofstream file("logs/trash.txt", ios::app);
						if (file.is_open()) {
							auto now = time(nullptr);
							file << "" << getDate() << " " << messages << "\n";
						}
						file.close();
						bool droppeds = false;
						PlayMods new_playmod{};
						new_playmod.id = 30, new_playmod.time = time(nullptr) + 5;
						pInfo(p_)->playmods.push_back(new_playmod);
						ServerLog("" + pInfo(p_)->tankIDName + " dropped " + to_string(abs(dropped)) + " " + items[id_].name + " in " + pInfo(p_)->world);
						add_cctv(p_, "dropped", to_string(abs(dropped)) + " " + items[id_].name);
						dropas_(world_, drop_, pInfo(p_)->netID);
					}
				}
			}
			break;
		}

		else if (a_[i_] == "growid_apply") {
			if (a_.size() != 13) break;
			string user_ = a_[i_ + 2], pass_ = a_[i_ + 4], pass_verify_ = a_[i_ + 6], email_ = a_[i_ + 8];
			try {
				if (pInfo(p_)->tankIDName != "") continue;
				string path_ = "players/" + user_ + "_.json";
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				bool bad_name = false;
				string check_user = user_;
				transform(check_user.begin(), check_user.end(), check_user.begin(), ::toupper);
				for (int i = 0; i < swear_words.size(); i++) {
					if (check_user.find(swear_words.at(i)) != string::npos) {
						bad_name = true;
						break;
					}
				}
				bool alreadyhas = false;
				if (pInfo(p_)->tankIDName != "") alreadyhas = true;
				if (alreadyhas)
					p.Insert(r_dialog("`4Oops!``  You already own account!", user_, pass_, pass_verify_, email_));
				else if (bad_name)
					p.Insert(r_dialog("`4Oops!``  Your `wGrowID`` cannot contain `$swear words``.", user_, pass_, pass_verify_, email_));
				else if (not email(email_))
					p.Insert(r_dialog("`4Oops!``  Look, if you'd like to be able try retrieve your password if you lose it, you'd better enter a real email.  We promise to keep your data 100% private and never spam you.", user_, pass_, pass_verify_, email_));
				else if (user_.size() < 3 or user_.size() > 18)
					p.Insert(r_dialog("`4Oops!``  Your `wGrowID`` must be between `$3`` and `$18`` characters long.", user_, pass_, pass_verify_, email_));
				else if (pass_.size() < 8 or pass_.size() > 18)
					p.Insert(r_dialog("`4Oops!``  Your password must be between `$8`` and `$18`` characters long.", user_, pass_, pass_verify_, email_));
				else if (pass_ != pass_verify_)
					p.Insert(r_dialog("`4Oops!``  Passwords don't match.  Try again.", user_, pass_, pass_verify_, email_));
				else if (special_char(user_))
					p.Insert(r_dialog("`4Oops!`` You can only use letters and numbers in your GrowID.", user_, pass_, pass_verify_, email_));
				else if (_access_s(path_.c_str(), 0) == 0)
					p.Insert(r_dialog("`4Oops!`` The name `w" + user_ + "`` is so cool someone else has already taken it.  Please choose a different name.", user_, pass_, pass_verify_, email_));
				else {

					if (check_perma(p_, "acc.txt")) {
						enet_peer_disconnect_later(p_, 0);
						return;
						//extra onlem
					}

					int reg = 0;
					ifstream getreg("registered/" + pInfo(p_)->ip + ".txt");
					getreg >> reg;
					getreg.close();

					if (reg < 3) {
						ofstream wr_ip("registered/" + pInfo(p_)->ip + ".txt");
						wr_ip << reg + 1;
						wr_ip.close();
					}

					time_t s__;
					s__ = time(NULL);
					int days_ = int(s__) / (60 * 60 * 24);
					pInfo(p_)->account_created = days_;
					pInfo(p_)->playtime = s__;
					pInfo(p_)->inv.push_back({ 18, 1 }), pInfo(p_)->inv.push_back({ 32, 1 }), pInfo(p_)->inv.push_back({ 6336, 1 });
					for (int i_ = 3; i_ <= 16; i_++) { // default inv dydis
						Items itm_{};
						itm_.id = 0, itm_.count = 0;
						pInfo(p_)->inv.push_back(itm_);
					}
					int count = 200;
					modify_inventory(p_, 242, count = 50);//newbie award
					modify_inventory(p_, 98, count = 1);//newbie award
					modify_inventory(p_, 678, count = 1);//newbie award
					modify_inventory(p_, 9162, count = 200);//newbie award
					//p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGrowID GET!``|left|206|\nadd_textbox|A `wGrowID`` with the log on of `w" + user_ + "`` created.  Write it and your password down as they will be required to log on from now on!|left|\nend_dialog|growid_apply|Continue||");
					// ustteki yaziyi sil
					pInfo(p_)->tankIDName = user_, pInfo(p_)->tankIDPass = pass_, pInfo(p_)->email = email_;
					{
						gamepacket_t p;
						p.Insert("SetHasGrowID");
						p.Insert(1);
						p.Insert(user_);
						p.Insert(pass_);
						p.CreatePacket(p_);
					}
					//world_menu(p_);
					send_inventory(p_);
					save_player(pInfo(p_), false);
					ServerLog("" + pInfo(p_)->tankIDName + " created account with " + pInfo(p_)->ip + "");
					if (reg == 1) pInfo(p_)->isNew = true;
					enet_peer_disconnect_later(p_, 0);
				}
				p.CreatePacket(p_);
			}
			catch (exception) {
				cout << "something failed new growid" << endl;
			}
			break;
		}
	}
}


void anansave(ENetPeer* peer, string cch) {
	if (!pInfo(peer)->tankIDName.empty()) {
		vector<string> a_ = explode("|", replace_str(cch, "\n", "|"));
		for (int i_ = 0; i_ < a_.size(); i_++) {
			if (a_[i_] == "rid") {
				pInfo(peer)->rid = a_[i_ + 1];
			}
			else if (a_[i_] == "vid") {
				pInfo(peer)->vid = a_[i_ + 1];
			}
			else if (a_[i_] == "gid") {
				pInfo(peer)->gid = a_[i_ + 1];
			}
			else if (a_[i_] == "aid") {
				pInfo(peer)->aid = a_[i_ + 1];
			}
			else if (a_[i_] == "mac") {
				pInfo(peer)->mac = a_[i_ + 1];
			}
			else if (a_[i_] == "wk") {
				pInfo(peer)->wk = a_[i_ + 1];
			}
		}
		save_player(pInfo(peer)); // memleak risk: player save baslangic
	}
}
vector<vector<string>> failed_logins{};
void player_login(ENetPeer* peer, string cch) {
	if (pInfo(peer)->tankIDName == "") {
		vector<string> a_ = explode("|", replace_str(cch, "\n", "|"));
		for (int i_ = 0; i_ < a_.size(); i_++) {
			if (a_[i_] == "tankIDName") {
				pInfo(peer)->tankIDName = a_[i_ + 1];
			}
			else if (a_[i_] == "tankIDPass") {
				pInfo(peer)->tankIDPass = a_[i_ + 1];
			}
			else if (a_[i_] == "requestedName") {
				pInfo(peer)->requestedName = a_[i_ + 1];
			}
			else if (a_[i_] == "f") {
			}
			else if (a_[i_] == "protocol") {
			}
			else if (a_[i_] == "game_version") {
			}
			else if (a_[i_] == "fz") {
			}
			else if (a_[i_] == "lmode") {
			}
			else if (a_[i_] == "cbits") {
			}
			else if (a_[i_] == "player_age") {
			}
			else if (a_[i_] == "GDPR") {
			}
			else if (a_[i_] == "meta") {
				vector<string> ex = explode("_", a_[i_ + 1]);
				if (ex.size() == 2) {
					pInfo(peer)->meta = ex[0];
				}
				else {
					pInfo(peer)->meta = a_[i_ + 1];
				}
			}
			else if (a_[i_] == "fhash") {
			}
			else if (a_[i_] == "rid") {
				pInfo(peer)->rid = a_[i_ + 1];
			}
			else if (a_[i_] == "platformID") {
				pInfo(peer)->platformid = a_[i_ + 1];
			}
			else if (a_[i_] == "deviceVersion") {
			}
			else if (a_[i_] == "country") {
				if (to_lower(a_[i_ + 1]) == "ha") {
					packet_(peer, "action|log\nmsg|`4Server protection:`` Your country seems to be incorrect. Make sure you aren't using any hacks.");
					packet_(peer, "action|logon_fail");
					enet_peer_disconnect_later(peer, 0);
					return;
				}
				pInfo(peer)->country = a_[i_ + 1];
			}
			else if (a_[i_] == "hash") {
			}
			else if (a_[i_] == "vid") {
				pInfo(peer)->vid = a_[i_ + 1];
			}
			else if (a_[i_] == "gid") {
				pInfo(peer)->gid = a_[i_ + 1];
			}
			else if (a_[i_] == "aid") {
				pInfo(peer)->aid = a_[i_ + 1];
			}
			else if (a_[i_] == "mac") {
				pInfo(peer)->mac = a_[i_ + 1];
			}
			else if (a_[i_] == "wk") {
				pInfo(peer)->wk = a_[i_ + 1];
			}
			else if (a_[i_] == "zf") {
			}
		}



		if (not pInfo(peer)->tankIDName.empty()) {
			switch (auth_(peer)) {
			case -1:
			{
				packet_(peer, "`4Unable to log on: `oThat `wGrowID`` doesn't seem valid, or the password is wrong. If you don't have one, press `wCancel``, un-check `w'I have a GrowID'``, then click `wConnect``.", "Retrieve lost password");
				packet_(peer, "action|logon_fail");
				enet_peer_disconnect_later(peer, 0);
				return;
			}
			default:
			{
				break;
			}
			}
			if (pInfo(peer)->b_t + pInfo(peer)->b_s < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
				if (not pInfo(peer)->b_r.empty() or not pInfo(peer)->b_b.empty()) {
					packet_(peer, "action|play_sfx\nfile|audio/dialog_confirm.wav\ndelayMS|0");
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`oYou are no longer banned. Now be good! (`$Ban`` mod removed)");
					p.CreatePacket(peer);
				}
				pInfo(peer)->b_t = 0;
				pInfo(peer)->b_s = 0;
				pInfo(peer)->b_b = "";
				pInfo(peer)->b_r = "";
			}
			else {
				pInfo(peer)->name_color = (pInfo(peer)->adminLevel >= 1 ? admincolor(pInfo(peer)->adminLevel) : "`0");
				long long int time = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				int actualseconds = (pInfo(peer)->b_t + pInfo(peer)->b_s - time) / 1000;
				string time_counted = "";
				if (actualseconds / 86400 >= 1) {
					time_counted += "" + to_string(actualseconds / (24 * 3600)) + " days, ";
					actualseconds = actualseconds % (24 * 3600);
				}
				if (actualseconds / 3600 >= 1) {
					time_counted += "" + to_string(actualseconds / 3600) + " hours, ";
					actualseconds %= 3600;
				}
				if (actualseconds / 60 >= 1) {
					time_counted += "" + to_string(actualseconds / 60) + " mins, ";
					actualseconds %= 60;
				}
				time_counted += "" + to_string(actualseconds) + " secs";
				packet_(peer, "action|log\nmsg|CT:[S]_ `4Sorry, this account, device or location has been temporarily suspended.``", "");
				if (pInfo(peer)->b_r != "No reason") packet_(peer, "action|log\nmsg|CT:[S]_ `4Ban Reason: " + pInfo(peer)->b_r + "``", "");
				packet_(peer, "action|log\nmsg|CT:[S]_ If you didn't do anything wrong, it could be because you're playing from the same place or on the same device as someone who did. Contact support at `5https://privategt.com/discord`` if you have any questions.", "");
				packet_(peer, "action|log\nmsg|CT:[S]_ This is a temporary ban caused by " + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` and will be removed in `0" + time_counted + "``. If that's not your name, try playing from another location or device to fix it.", "");
				packet_(peer, "action|logon_fail");
				enet_peer_disconnect_later(peer, 0);
			}
		}
		gamepacket_t p;
		p.Insert("OnSuperMainStartAcceptLogonHrdxs47254722215a");
		p.Insert(item_hash);
		p.Insert(cache_url);
		p.Insert(cache_path);
		p.Insert("cc.cz.madkite.freedom org.aqua.gg idv.aqua.bulldog com.cih.gamecih2 com.cih.gamecih com.cih.game_cih cn.maocai.gamekiller com.gmd.speedtime org.dax.attack com.x0.strai.frep com.x0.strai.free org.cheatengine.cegui org.sbtools.gamehack com.skgames.traffikrider org.sbtoods.gamehaca com.skype.ralder org.cheatengine.cegui.xx.multi1458919170111 com.prohiro.macro me.autotouch.autotouch com.cygery.repetitouch.free com.cygery.repetitouch.pro com.proziro.zacro com.slash.gamebuster");
		string pay_status = (pInfo(peer)->supp >= 1 ? "1" : "0");
		p.Insert("proto=161|choosemusic=audio/ogg/about_theme.ogg|active_holiday=0|wing_week_day=0|ubi_week_day=0|server_tick=66751743|clash_active=1|drop_lavacheck_faster=1|isPayingUser=" + pay_status + "|usingStoreNavigation=1|enableInventoryTab=1|bigBackpack=1|");
		p.Insert("2357275721");
		p.CreatePacket(peer);
	}
}

int choose_random(const int id_) {
	vector<int> ids_;
	int a_ = 0;
	while (items[id_ + a_].properties & Property_RandomGrow) {
		if (items[id_ + a_].blockType != BlockTypes::SEED) ids_.push_back(id_ + a_);
		a_++;
	}
	a_ = 0;
	while (items[id_ - a_].properties & Property_RandomGrow) {
		if (items[id_ - a_].blockType != BlockTypes::SEED) ids_.push_back(id_ - a_);
		a_++;
	}
	return ids_[rand() % ids_.size()];
}


bool use_mag(World* world_, WorldDrop drop_, int x_, int y_) {
	for (int i_ = 0; i_ < world_->machines.size(); i_++) {
		WorldMachines machine_ = world_->machines[i_];
		if (machine_.target_item == drop_.id and machine_.enabled) {
			if (machine_.id == 6948 or machine_.id == 5638 or machine_.id == 6946) {
				WorldBlock* itemas = &world_->blocks[machine_.x + (machine_.y * 100)];
				if (itemas->pr < (machine_.id == 6948 or machine_.id == 6946 ? 1500 : 5000)) {
					PlayerMoving data_{};
					data_.packetType = 19, data_.netID = -1, data_.plantingTree = 0;
					data_.x = machine_.x * 32 + 16, data_.y = machine_.y * 32 + 16;
					data_.XSpeed = x_ * 32 + 16, data_.YSpeed = y_ * 32 + 16;
					data_.punchX = drop_.id;
					BYTE* raw = packPlayerMoving(&data_);
					raw[3] = 6;
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[]raw;
					itemas->pr += drop_.count;
					if (itemas->pr >= (machine_.id == 6948 or machine_.id == 6946 ? 1500 : 5000) or itemas->pr == drop_.count) {
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = machine_.x, data_.punchY = machine_.y, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, itemas));
						BYTE* blc = raw + 56;
						form_visual(blc, *itemas, *world_, NULL, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, itemas), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, blc;
						if (itemas->locked) {
							upd_lock(*itemas, *world_, NULL);
						}
					}
					return true;
				}
			}
		}
	}
	return false;
}
void drop_rare_item(World* world_, ENetPeer* peer, int i, int x, int y, bool seed) {
	int giveitem = 0, count = 1, got = 0, remove = -1;
	if (peer != NULL and pInfo(peer)->necklace == 11406 and seed and rand() % 750 < 1) {
		giveitem = items[11406].randomitem[rand() % items[11406].randomitem.size()];
		if (rand() % 25 < 1) giveitem = 11398; // rare 11398
		if (rand() % 2 < 1) modify_inventory(peer, 11406, remove = -1); // 50% chance
	}
	if (rand() % 200 < 1) giveitem = 2914;
	if (items[i].chi == 0 || items[i].chi == 1 || items[i].chi == 2 || items[i].chi == 3) if (rand() % 75 < 1) giveitem = items[i].chi == 0 ? 5028 : items[i].chi == 1 ? 5024 : items[i].chi == 2 ? 5030 : items[i].chi == 3 ? 5026 : 0;
	if (items[i].chance != 0) if (rand() % items[i].chance < 1) giveitem = items[i].randomitem[rand() % items[i].randomitem.size()];
	int chance = 18000;
	if (peer != NULL and pInfo(peer)->hand == 11118) chance = 13000;
	// guild chest chance
	if (rand() % (chance / 50) < 1 and items[i].farmable and items[i].rarity >= 24) giveitem = 11038; //summer artifact drop
	if (i == 8566 || i == 8562 || i == 8564 || i == 8560 && rand() % 72 < 1) giveitem = 8534;
	if (peer != NULL and pInfo(peer)->hand == 8554) {
		if (rand() % 200 < 1) {
			giveitem = 8534;
			count = rand() % 10 + 1;
			if (rand() % 1000 < 1) modify_inventory(peer, 8554, remove);
		}
	}



	if (giveitem != 0) {
		WorldDrop drop_block_{};
		drop_block_.id = giveitem, drop_block_.count = count, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x * 32) + rand() % 17, drop_block_.y = (y * 32) + rand() % 17;
		if (not use_mag(world_, drop_block_, x, y)) dropas_(world_, drop_block_);
	}
}
void drop_valentine_box(ENetPeer* peer, World* world_, WorldBlock* block_, int x_, int y_, bool extra_chance = false, int add_ = 1) {
	WorldDrop drop_block_{};
	if (block_->fg == 3402 || block_->fg == 10656) {
		if (add_ > 0) {
			pInfo(peer)->booty_broken += add_;
			// valentine

			{
				gamepacket_t p;
				p.Insert("OnProgressUISet"), p.Insert(1), p.Insert(3402), p.Insert(pInfo(peer)->booty_broken), p.Insert(100), p.Insert(""), p.Insert(1);
				p.CreatePacket(peer);
			}

			gamepacket_t p;
			p.Insert("OnProgressUIUpdateValue"), p.Insert(pInfo(peer)->booty_broken), p.Insert(0);
			p.CreatePacket(peer);
		}
	}
	vector<int> list{ 13122,13146,13150,13152,13144,13132,13130, 11702, 11696,11692,11690,11688,11686,11684,11682,11680,11678, 11694, 5652, 3398, 386, 4422, 364, 9342, 9340, 9334, 9332, 9336, 9338, 4400, 7808, 7810, 4416, 7818, 7820, 7822, 7824, 5644, 390, 7826, 7830, 9324, 5658, 3396, 2384, 5660, 10654, 3400, 4418, 388, 3408, 1470, 3404, 3406, 10662, 2390, 5656, 5648, 2396, 384, 5664, 4424, 366 };
	if (block_->fg != 9976) {
		if (block_->fg == 9350)  list.insert(list.end(), { 13124,13116,13126,13128,13114 });
		if ((block_->fg == 9350 || extra_chance || pInfo(peer)->valentine ? rand() % 350 : pInfo(peer)->hand == 9874 ? rand() % 450 : rand() % 800) < 1 || (has_playmod(pInfo(peer), "Lucky in Love"))) list = {13120, 13142, 13154, 11668, 11670, 11672, 11664, 362, 362, 362,362,362, 2388, 10652, 4412, 10632, 10626, 13140};

		if ((block_->fg == 9350 ? rand() % 5000 : pInfo(peer)->hand == 9874 ? rand() % 4500 : rand() % 5000) < 1 || (has_playmod(pInfo(peer), "Lucky in Love"))) list = { 11702,362 };
		if (add_ == 0 && extra_chance && rand() % 1400 < 1)  list = { 1458, 11672, 13140, 362 };
	}
	int item = list[rand() % list.size()];
	if (extra_chance && item != 1458 && add_ == 0) item = 10660;
	if (pInfo(peer)->ghc) item = 1458;
	if (item == 1458) {
		string texts = "`4The Power of Love! `2" + admincolor(pInfo(peer)->adminLevel) + pInfo(peer)->tankIDName + "`` found a `5Golden Heart Crystal`` in a `5" + items[block_->fg].name + "``!";
		gamepacket_t p;
		p.Insert("OnConsoleMessage"), p.Insert("CP:_PL:0_OID:_CT:[S]_ `o**`` " + texts + "``");
		for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
			p.CreatePacket(currentPeer);
		}
	}
	int count = (item == 11694 || item == 11696 || item == 7810 || item == 7808 || item == 4400 || item == 390 || item == 3408 || item == 4422 || item == 3404 ? 5 : (item == 4418 || item == 5660 ? 2 : 1));
	drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17, drop_block_.id = item, drop_block_.count = count, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
	dropas_(world_, drop_block_);
}
void sendLock(ENetPeer* peer, World world_) {
	s_log(peer, "sent lock");
	vector<vector<unsigned int>> world_locks;
	uint32_t oha = 100;
	for (int i_ = 0; i_ < 6000; i_++) {
		if (world_.blocks[i_].fg == 202 or world_.blocks[i_].fg == 204 or world_.blocks[i_].fg == 206 or world_.blocks[i_].fg == 4994) world_locks.push_back({ i_ % oha, i_ / oha });
	}
	World world_pointer_ = get_world(world_.name);
	if (world_locks.size() > 0) {
		vector<WorldBlock> shadow_copy_2 = world_.blocks;
		for (vector<unsigned int> sk_ : world_locks) {
			int l_x = sk_[0];
			int l_y = sk_[1];
			WorldBlock block_ = world_.blocks[l_x + (l_y * 100)];
			block_.owner_named = block_.owner_name;
			world_pointer_.blocks[l_x + (l_y * 100)].owner_named = block_.owner_named;
			world_.blocks[l_x + (l_y * 100)].owner_named = block_.owner_name;
			vector<vector<int>> locked_tiles_around_lock{};
			vector<int> new_tiles{};
			new_tiles.push_back(l_x + (l_y * 100));
			for (int i2 = 0; i2 < new_tiles.size(); i2++) {
				int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
				if (s_x_ < 99 and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
					if (not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned) {
						shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned = true;
						new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
						locked_tiles_around_lock.push_back({ s_x_ + 1, s_y_ });
					}
				} if (s_x_ > 0 and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].lock_origin == (l_x + (l_y * 100))) {
					if (not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned) {
						shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned = true;
						new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
						locked_tiles_around_lock.push_back({ s_x_ - 1, s_y_ });
					}
				} if (s_y_ < 59 and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
					if (not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned) {
						shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
						new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
						locked_tiles_around_lock.push_back({ s_x_, s_y_ + 1 });
					}
				} if (s_y_ > 0 and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].lock_origin == (l_x + (l_y * 100))) {
					if (not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned) {
						shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
						new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
						locked_tiles_around_lock.push_back({ s_x_, s_y_ - 1 });
					}
				}
			}
			if (locked_tiles_around_lock.size() != 0) {
				PlayerMoving data_{};
				data_.packetType = 15, data_.punchX = l_x, data_.punchY = l_y, data_.characterState = 0x8;
				data_.netID = block_.owner_name == (not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->tankIDName) ? pInfo(peer)->id : -1;
				data_.plantingTree = block_.fg;
				BYTE* raw;
				int alloc = alloc_(&world_, &block_);
				raw = packPlayerMoving(&data_, 112 + (locked_tiles_around_lock.size() * 2) + alloc);
				*(int*)(raw + 8) = locked_tiles_around_lock.size();
				*(__int8*)(raw + 12) = 8;
				BYTE* blc = raw + 56;
				for (int i_ = 0; i_ < locked_tiles_around_lock.size(); i_++) {
					vector<int> update_tiles = locked_tiles_around_lock[i_];
					int x = update_tiles[0];
					int y = update_tiles[1];
					int sq_ = x + (y * 100);
					*(int*)(blc + (i_ * 2)) = sq_;
					shadow_copy_2[x + (y * 100)].scanned = false;
				}
				send_raw(peer, 4, raw, 112 + (locked_tiles_around_lock.size() * 2) + alloc, ENET_PACKET_FLAG_RELIABLE);
				PlayerMoving data_2{};
				data_2.packetType = 5, data_2.punchX = l_x, data_2.punchY = l_y, data_2.characterState = 0x8;
				BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc);
				BYTE* blc2 = raw2 + 56;
				form_visual(blc2, block_, world_, peer, false);
				send_raw(peer, 4, raw2, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
				delete[] raw, blc, raw2, blc2;
			}
		}
	}
}

bool harvest_seed(World* world_, WorldBlock* block_, int x_, int y_, int drop_count, int net_id = -1, ENetPeer* p_ = NULL) {
	pInfo(p_)->harvest_quest++;
	bool seed_drop = false;
	if (drop_count != 0) {
		if (items[block_->fg - 1].rarity != 999 and items[block_->fg - 1].blockType != BlockTypes::CLOTHING and rand() % 100 < 30) {
			seed_drop = true;
			WorldDrop drop_seed_{};
			drop_seed_.id = block_->fg;
			drop_seed_.count = 1;
			drop_seed_.uid = uint16_t(world_->drop.size()) + 1;
			drop_seed_.x = (x_ * 32) + rand() % 17;
			drop_seed_.y = (y_ * 32) + rand() % 17;
			if (pInfo(p_)->back == 8908 && modify_inventory(p_, drop_seed_.id, drop_seed_.count) == 0) {
				PlayerMoving data_{};
				data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
				data_.punchX = drop_seed_.id, data_.punchY = pInfo(p_)->netID;
				BYTE* raw;
				data_.x = (pInfo(p_)->lastwrenchx * 32) + 10, data_.y = (pInfo(p_)->lastwrenchy * 32) + 16;
				raw = packPlayerMoving(&data_);
				int32_t to_netid = pInfo(p_)->netID;
				raw[3] = 5;
				memcpy(raw + 8, &to_netid, 4);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(p_)->world) continue;
					send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
				}
				delete[] raw;
				int got = 0;
				if (rand() % 250 < 1) {
					modify_inventory(p_, 8908, got = -1);
					modify_inventory(p_, 8940, got = 1);
				}
			}
			else {
				if (not use_mag(world_, drop_seed_, x_, y_)) dropas_(world_, drop_seed_);
			}
		}
		WorldDrop drop_block_{};
		if (items[block_->fg].properties & Property_RandomGrow) {
			drop_block_.id = choose_random(block_->fg);
		}
		else
			drop_block_.id = block_->fg - 1;
		drop_block_.count = drop_count;
		drop_block_.uid = uint16_t(world_->drop.size()) + 1;
		drop_block_.x = (x_ * 32) + rand() % 17;
		drop_block_.y = (y_ * 32) + rand() % 17;
		if (pInfo(p_)->back == 8908 && modify_inventory(p_, drop_block_.id, drop_block_.count) == 0) {
			PlayerMoving data_{};
			data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
			data_.punchX = drop_block_.id, data_.punchY = pInfo(p_)->netID;
			BYTE* raw;
			data_.x = (pInfo(p_)->lastwrenchx * 32) + 10, data_.y = (pInfo(p_)->lastwrenchy * 32) + 16;
			raw = packPlayerMoving(&data_);
			int32_t to_netid = pInfo(p_)->netID;
			raw[3] = 5;
			memcpy(raw + 8, &to_netid, 4);
			for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(p_)->world) continue;
				send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
			}
			delete[] raw;
			int got = 0;
			if (rand() % 250 < 1) {
				modify_inventory(p_, 8908, got = -1);
				modify_inventory(p_, 8940, got = 1);
			}
		}
		else {
			if (not use_mag(world_, drop_block_, x_, y_)) dropas_(world_, drop_block_);
		}
	}
	if (items[block_->fg - 1].max_gems != 0) {
		if (p_ != NULL) {
			add_peer_xp(p_, (items[block_->fg].rarity / 5 > 0 ? items[block_->fg].rarity / 5 : 1));
		}
		int c_ = rand() % (items[block_->fg - 1].max_gems + 1);
		if (p_ != NULL) {
			if (has_playmod(pInfo(p_), "Lucky") and ((rand() % 100) + 1) <= 30) {
				PlayerMoving data_{};
				data_.packetType = 17;
				data_.netID = 125;
				data_.YSpeed = 125;
				data_.x = x_ * 32 + 16;
				data_.y = y_ * 32 + 16;
				BYTE* raw = packPlayerMoving(&data_);
				for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
					if (pInfo(currentPeer)->world == world_->name) {
						send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
				}
				delete[] raw;
				c_ += (rand() % 5) + 1;
			}
		}
		if (c_ != 0) {
			gems_(p_, world_, c_, x_ * 32, y_ * 32, block_->fg);
		}
	}
	PlayerMoving data_{};
	data_.packetType = 12, data_.netID = net_id, data_.plantingTree = block_->fg;
	data_.punchX = x_, data_.punchY = y_;
	int32_t item = -1;
	BYTE* raw = packPlayerMoving(&data_);
	memcpy(raw + 8, &item, 4);
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (pInfo(currentPeer)->world == world_->name) {
			send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	delete[]raw;
	reset_(block_, x_, y_, world_);
	return seed_drop;
}

void ChangeName(ENetPeer* peer, string name) {
	gamepacket_t p2(0, pInfo(peer)->netID);
	p2.Insert("OnNameChanged");
	p2.Insert(name + (pInfo(peer)->is_legend ? " of Legend``" : ""));
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
		p2.CreatePacket(currentPeer);
	}
}

void DoorMove(ENetPeer* peer, int x1, int y1) {
	string name_ = pInfo(peer)->world;
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
			if (world_->blocks[i_].fg == 6) world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
			if (i_ < 5400 && world_->blocks[i_].fg == 8) world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
		}
		world_->blocks[x1 + (y1 * 100)].fg = 6;
		world_->blocks[x1 + (y1 + 1) * 100].fg = 8;
		update_tile(peer, x1, y1, 6, false, true);
		update_tile(peer, x1, y1 + 1, 8, false, true);
	}
}

bool LockMove(ENetPeer* peer, int wx1, int wy1) {
	string name_ = pInfo(peer)->world;
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		int lock = -1;
		for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
			if (world_->blocks[i_].fg == 202 || world_->blocks[i_].fg == 204 || world_->blocks[i_].fg == 206 || world_->blocks[i_].fg == 4994) continue;
			if (items[world_->blocks[i_].fg].blockType == BlockTypes::LOCK) {
				lock = world_->blocks[i_].fg, world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
				break;
			}
		}
		if (lock != -1) {
			world_->blocks[wx1 + (wy1) * 100].fg = lock;
			update_tile(peer, wx1, wy1, lock, false, true);
			return true;
		}
	}
	return false;
}
void plant_(World* world_, ENetPeer* peer, WorldBlock* block_, int x_, int y_, int p_, bool upd_visual = true, bool mag_place = false) {
	block_->fruit = items[block_->fg].rarity == 999 ? 1 : (rand() % 4) + 1;
	if (upd_visual)
		punch_tile(peer, x_, y_, 0x3, p_, mag_place ? -1 : pInfo(peer)->netID, 0x0, 1, block_->fruit);
	int timed = items[p_].growTime / 2;
	//if (p_ == 9929) timed *= 1.85;
	if (p_ == 9929) timed *= 1.99;
	block_->planted = time(nullptr) - (timed);
	PlayerMoving data_{};
	data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
	BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
	BYTE* blc = raw + 56;
	WorldBlock* block_s = &world_->blocks[x_ + (y_ * 100)];
	form_visual(blc, *block_s, *world_, peer, false);
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
		if (pInfo(currentPeer)->world == world_->name) {
			send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
		}
	}
	delete[] raw, blc;
	if (block_->locked) {
		upd_lock(*block_, *world_, peer);
	}
}
Position2D track_steam(World world_, WorldBlock start_from, int x, int y) {
	Position2D new_pos{ -1, -1 };
	vector<int> new_tiles{};
	new_tiles.push_back((int)x + ((int)y * 100));
	int ySize = world_.blocks.size() / 100, xSize = world_.blocks.size() / ySize;
	vector<WorldBlock> shadow_copy = world_.blocks;
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int x_ = new_tiles[i2] % 100, y_ = new_tiles[i2] / 100;
		if (world_.blocks[x_ + (y_ * 100)].fg == 3724 or world_.blocks[x_ + (y_ * 100)].fg == 3286) {
			new_pos.x = x_, new_pos.y = y_;
			return new_pos;
		}
		else if (world_.blocks[x_ + 1 + (y_ * 100)].fg == 3724 or world_.blocks[x_ + 1 + (y_ * 100)].fg == 3286) {
			new_pos.x = x_ + 1, new_pos.y = y_;
			return new_pos;
		}
		else if (world_.blocks[x_ - 1 + (y_ * 100)].fg == 3724 or world_.blocks[x_ - 1 + (y_ * 100)].fg == 3286) {
			new_pos.x = x_ - 1, new_pos.y = y_;
			return new_pos;
		}
		else if (world_.blocks[x_ + ((y_ + 1) * 100)].fg == 3724 or world_.blocks[x_ + ((y_ + 1) * 100)].fg == 3286) {
			new_pos.x = x_, new_pos.y = y_ + 1;
			return new_pos;
		}
		else if (world_.blocks[x_ + ((y_ - 1) * 100)].fg == 3724 or world_.blocks[x_ + ((y_ - 1) * 100)].fg == 3286) {
			new_pos.x = x_, new_pos.y = y_ - 1;
			return new_pos;
		}

		if (x_ < 99 and shadow_copy[x_ + 1 + (y_ * 100)].fg == 3260) {
			if (not shadow_copy[x_ + 1 + (y_ * 100)].scanned) {
				shadow_copy[x_ + 1 + (y_ * 100)].scanned = true;
				new_tiles.push_back(x_ + 1 + (y_ * 100));
			}

		} if (x_ > 0 and shadow_copy[x_ - 1 + (y_ * 100)].fg == 3260) {
			if (not shadow_copy[x_ - 1 + (y_ * 100)].scanned) {
				shadow_copy[x_ - 1 + (y_ * 100)].scanned = true;
				new_tiles.push_back(x_ - 1 + (y_ * 100));
			}
		} if (y_ < 59 and shadow_copy[x_ + ((y_ + 1) * 100)].fg == 3260) {
			if (not shadow_copy[x_ + ((y_ + 1) * 100)].scanned) {
				shadow_copy[x_ + ((y_ + 1) * 100)].scanned = true;
				new_tiles.push_back(x_ + ((y_ + 1) * 100));
			}
		} if (y_ > 0 and shadow_copy[x_ + ((y_ - 1) * 100)].fg == 3260) {
			if (not shadow_copy[x_ + ((y_ - 1) * 100)].scanned) {
				shadow_copy[x_ + ((y_ - 1) * 100)].scanned = true;
				new_tiles.push_back(x_ + ((y_ - 1) * 100));
			}
		}
	}
	return new_pos;
}

Position2D track_steams(World* world_, WorldBlock* start_from, int x, int y) {
	Position2D new_pos{ -1, -1 };
	vector<int> new_tiles{};
	new_tiles.push_back((int)x + ((int)y * 100));
	int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
	vector<WorldBlock> shadow_copy = world_->blocks;
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int x_ = new_tiles[i2] % 100, y_ = new_tiles[i2] / 100;
		if (world_->blocks[x_ + (y_ * 100)].fg == 3724 or world_->blocks[x_ + (y_ * 100)].fg == 3286) {
			new_pos.x = x_, new_pos.y = y_;
			return new_pos;
		}
		else if (world_->blocks[x_ + 1 + (y_ * 100)].fg == 3724 or world_->blocks[x_ + 1 + (y_ * 100)].fg == 3286) {
			new_pos.x = x_ + 1, new_pos.y = y_;
			return new_pos;
		}
		else if (world_->blocks[x_ - 1 + (y_ * 100)].fg == 3724 or world_->blocks[x_ - 1 + (y_ * 100)].fg == 3286) {
			new_pos.x = x_ - 1, new_pos.y = y_;
			return new_pos;
		}
		else if (world_->blocks[x_ + ((y_ + 1) * 100)].fg == 3724 or world_->blocks[x_ + ((y_ + 1) * 100)].fg == 3286) {
			new_pos.x = x_, new_pos.y = y_ + 1;
			return new_pos;
		}
		else if (world_->blocks[x_ + ((y_ - 1) * 100)].fg == 3724 or world_->blocks[x_ + ((y_ - 1) * 100)].fg == 3286) {
			new_pos.x = x_, new_pos.y = y_ - 1;
			return new_pos;
		}

		if (x_ < 99 and shadow_copy[x_ + 1 + (y_ * 100)].fg == 3260) {
			if (not shadow_copy[x_ + 1 + (y_ * 100)].scanned) {
				shadow_copy[x_ + 1 + (y_ * 100)].scanned = true;
				new_tiles.push_back(x_ + 1 + (y_ * 100));
			}

		} if (x_ > 0 and shadow_copy[x_ - 1 + (y_ * 100)].fg == 3260) {
			if (not shadow_copy[x_ - 1 + (y_ * 100)].scanned) {
				shadow_copy[x_ - 1 + (y_ * 100)].scanned = true;
				new_tiles.push_back(x_ - 1 + (y_ * 100));
			}
		} if (y_ < 59 and shadow_copy[x_ + ((y_ + 1) * 100)].fg == 3260) {
			if (not shadow_copy[x_ + ((y_ + 1) * 100)].scanned) {
				shadow_copy[x_ + ((y_ + 1) * 100)].scanned = true;
				new_tiles.push_back(x_ + ((y_ + 1) * 100));
			}
		} if (y_ > 0 and shadow_copy[x_ + ((y_ - 1) * 100)].fg == 3260) {
			if (not shadow_copy[x_ + ((y_ - 1) * 100)].scanned) {
				shadow_copy[x_ + ((y_ - 1) * 100)].scanned = true;
				new_tiles.push_back(x_ + ((y_ - 1) * 100));
			}
		}
	}
	return new_pos;
}
bool patchPath(World* world_, int x, int y, int fg, ENetPeer* p_) {
	if (world_->blocks[fg].fg == 8676) return false;
	if (x < 0 || x > 3200 || y < 0 || y > 1920) return false;
	vector<int> new_tiles{};
	if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].collisionType != 1 or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].entrance or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].vipentrance) {
		if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].vipentrance and not world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.begin(), world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end(), pInfo(p_)->tankIDName) == world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end()) {
		}
		else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].entrance and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and /*!guild_access(p_, world_->guild_id) and */ find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
		}
		else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00400000)) {
		}
		else {
			new_tiles.push_back((int)x / 32 + ((int)y / 32 * 100));
		}
	} int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
	vector<WorldBlock> shadow_copy = world_->blocks;
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int x_ = new_tiles[i2] % 100, y_ = new_tiles[i2] / 100;
		if (&world_->blocks[x_ + (y_ * 100)] == &world_->blocks[fg] and items[shadow_copy[x_ + (y_ * 100)].fg].collisionType != 1) {
			return false;
		}
		if (x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].collisionType != 1 or x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].entrance or x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].vipentrance and not shadow_copy[x_ + 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ + 1 + (y_ * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + 1 + (y_ * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].entrance and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and /*!guild_access(p_, world_->guild_id) and */ find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + 1 + (y_ * 100)].scanned) {
					shadow_copy[x_ + 1 + (y_ * 100)].scanned = true;
					new_tiles.push_back(x_ + 1 + (y_ * 100));
				}
			}
		} if (x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].collisionType != 1 or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].entrance or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].vipentrance and not shadow_copy[x_ - 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ - 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ - 1 + (y_ * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ - 1 + (y_ * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].entrance and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and /*!guild_access(p_, world_->guild_id) and */ find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ - 1 + (y_ * 100)].scanned) {
					shadow_copy[x_ - 1 + (y_ * 100)].scanned = true;
					new_tiles.push_back(x_ - 1 + (y_ * 100));
				}
			}
		} if (y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].collisionType != 1 or y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].entrance or y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].vipentrance and not shadow_copy[x_ + ((y_ + 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ + 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ + 1) * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + ((y_ + 1) * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].entrance and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and /*!guild_access(p_, world_->guild_id) and */ find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + ((y_ + 1) * 100)].scanned) {
					shadow_copy[x_ + ((y_ + 1) * 100)].scanned = true;
					new_tiles.push_back(x_ + ((y_ + 1) * 100));
				}
			}
		} if (y_ > 0 and items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].collisionType != 1 or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].entrance or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].vipentrance and not shadow_copy[x_ + ((y_ - 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ - 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ - 1) * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + ((y_ - 1) * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].entrance and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and /*!guild_access(p_, world_->guild_id) and */ find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + ((y_ - 1) * 100)].scanned) {
					shadow_copy[x_ + ((y_ - 1) * 100)].scanned = true;
					new_tiles.push_back(x_ + ((y_ - 1) * 100));
				}
			}
		}
	}
	return true;
}
bool patchNoClip(World* world_, int x, int y, WorldBlock* target_, ENetPeer* p_) {
	vector<int> new_tiles{};
	if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].collisionType != 1 or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].entrance or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable or items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].vipentrance) {
		if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].vipentrance and not world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.begin(), world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end(), pInfo(p_)->tankIDName) == world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].admins.end()) {
		}
		else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].entrance and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
		}
		else if (items[world_->blocks[(int)x / 32 + ((int)y / 32 * 100)].fg].toggleable and is_false_state(world_->blocks[(int)x / 32 + ((int)y / 32 * 100)], 0x00400000)) {
		}
		else {
			new_tiles.push_back((int)x / 32 + ((int)y / 32 * 100));
		}
	} int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
	vector<WorldBlock> shadow_copy = world_->blocks;
	for (int i2 = 0; i2 < new_tiles.size(); i2++) {
		int x_ = new_tiles[i2] % 100, y_ = new_tiles[i2] / 100;

		if (&world_->blocks[x_ + (y_ * 100)] == target_ and items[shadow_copy[x_ + (y_ * 100)].fg].collisionType != 1) {
			return false;
		} if (x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].collisionType != 1 or x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].entrance or x_ < 99 and items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].vipentrance and not shadow_copy[x_ + 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ + 1 + (y_ * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + 1 + (y_ * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].entrance and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + 1 + (y_ * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + 1 + (y_ * 100)].scanned) {
					shadow_copy[x_ + 1 + (y_ * 100)].scanned = true;
					new_tiles.push_back(x_ + 1 + (y_ * 100));
				}
			}
		} if (x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].collisionType != 1 or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].entrance or x_ > 0 and items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].vipentrance and not shadow_copy[x_ - 1 + (y_ * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ - 1 + (y_ * 100)].admins.begin(), shadow_copy[x_ - 1 + (y_ * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ - 1 + (y_ * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].entrance and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ - 1 + (y_ * 100)].fg].toggleable and is_false_state(shadow_copy[x_ - 1 + (y_ * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ - 1 + (y_ * 100)].scanned) {
					shadow_copy[x_ - 1 + (y_ * 100)].scanned = true;
					new_tiles.push_back(x_ - 1 + (y_ * 100));
				}
			}
		} if (y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].collisionType != 1 or y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].entrance or y_ < 59 and items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].vipentrance and not shadow_copy[x_ + ((y_ + 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ + 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ + 1) * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + ((y_ + 1) * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].entrance and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ + 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ + 1) * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + ((y_ + 1) * 100)].scanned) {
					shadow_copy[x_ + ((y_ + 1) * 100)].scanned = true;
					new_tiles.push_back(x_ + ((y_ + 1) * 100));
				}
			}
		} if (y_ > 0 and items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].collisionType != 1 or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].entrance or y_ > 0 and items[shadow_copy[x_ + 1 + ((y_ - 1) * 100)].fg].toggleable) {
			if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].vipentrance and not shadow_copy[x_ + ((y_ - 1) * 100)].limit_admins and world_->owner_name != pInfo(p_)->tankIDName and not world_->owner_name.empty() and find(shadow_copy[x_ + ((y_ - 1) * 100)].admins.begin(), shadow_copy[x_ + ((y_ - 1) * 100)].admins.end(), pInfo(p_)->tankIDName) == shadow_copy[x_ + ((y_ - 1) * 100)].admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].entrance and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00800000) and world_->owner_name != pInfo(p_)->tankIDName and not world_->open_to_public and not world_->owner_name.empty() and !guild_access(p_, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(p_)->tankIDName) == world_->admins.end()) {
			}
			else if (items[shadow_copy[x_ + ((y_ - 1) * 100)].fg].toggleable and is_false_state(shadow_copy[x_ + ((y_ - 1) * 100)], 0x00400000)) {
			}
			else {
				if (not shadow_copy[x_ + ((y_ - 1) * 100)].scanned) {
					shadow_copy[x_ + ((y_ - 1) * 100)].scanned = true;
					new_tiles.push_back(x_ + ((y_ - 1) * 100));
				}
			}
		}
	}
	return true;
}


bool edit_tile(ENetPeer* peer, int x_, int y_, int p_, bool mag_place = false) {
	if (x_ < 0 or x_ >= 100 or y_ < 0 or y_ >= 60 or p_ < 0 or p_ >= items.size()) return false;
	if (items[p_].blocked_place) return false;
	string name_ = pInfo(peer)->world;
	if (pInfo(peer)->lastwrenchx != x_ || pInfo(peer)->lastwrenchy != y_) pInfo(peer)->random_fossil = rand() % 3 + 4;
	pInfo(peer)->lastwrenchx = x_;
	pInfo(peer)->lastwrenchy = y_;
	vector<World>::iterator p = find_if(worlds.begin(), worlds.end(), [name_](const World& a) { return a.name == name_; });
	if (p != worlds.end()) {
		World* world_ = &worlds[p - worlds.begin()];
		WorldBlock* block_ = &world_->blocks[x_ + (y_ * 100)];
		if (block_->bg >= items.size()) block_->bg = 0;
		uint16_t t_ = (block_->fg ? block_->fg : block_->bg);
		if (p_ == 3002 and t_ != 3004) return false;
		switch (p_) {
		case 18:
		{
			if (t_ == 0) {
				break;
			}
			if (items[t_].properties & Property_Mod and not pInfo(peer)->dev) {
				packet_(peer, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
				gamepacket_t p;
				p.Insert("OnTalkBubble");
				p.Insert(pInfo(peer)->netID);
				p.Insert(items[t_].blockType == BlockTypes::MAIN_DOOR ? "(stand over and punch to use)" : "It's too strong to break.");
				p.Insert(0);
				p.Insert(1);
				p.CreatePacket(peer);
				break;
			}
			else if (t_ == 3470) {
				if (pInfo(peer)->hand == 3466 || pInfo(peer)->hand == 4506) {
					WorldDrop drop_block_{};
					drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					PlayerMoving data_{};
					data_.effect_flags_check = 1, data_.packetType = 14, data_.netID = 0;
					for (int i_ = 0; i_ < world_->drop.size(); i_++) {
						if (world_->drop[i_].id == 0) continue;
						if (x_ == world_->drop[i_].x / 32 && y_ == world_->drop[i_].y / 32) {
							if (items[world_->drop[i_].id].blockType == BlockTypes::FISH || world_->drop[i_].id == 866 || world_->drop[i_].id == 872 || world_->drop[i_].id == 7050) {
								if (world_->drop[i_].id == 3032 && world_->drop[i_].count == 90 && rand() % 100 < 5) {
									drop_block_.id = 5486, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
									dropas_(world_, drop_block_);
								}
								else if (world_->drop[i_].id == 5450 && world_->drop[i_].count == 50 && rand() % 100 < 10) {
									drop_block_.id = 6806, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
									dropas_(world_, drop_block_);
								}
								data_.plantingTree = world_->drop[i_].uid;
								BYTE* raw = packPlayerMoving(&data_);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
									send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[] raw;
								if (items[world_->drop[i_].id].blockType == BlockTypes::FISH && world_->drop[i_].count < 10 && rand() % 100 < 40) {
									PlayerMoving data_{};
									data_.packetType = 17, data_.netID = 45, data_.YSpeed = 45, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
									BYTE* raw = packPlayerMoving(&data_);
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
										send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
									delete[] raw;
									world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
									break;
								}
								int drop_count = 1;
								if (items[world_->drop[i_].id].blockType == BlockTypes::FISH && world_->drop[i_].count >= 10) drop_count = world_->drop[i_].count / 10;
								if (world_->drop[i_].id == 866 || world_->drop[i_].id == 872 || world_->drop[i_].id == 7050) drop_count = world_->drop[i_].count;
								drop_block_.id = world_->drop[i_].id == 866 ? 4578 : world_->drop[i_].id == 872 ? 4588 : world_->drop[i_].id == 7050 ? 7052 : 3468, drop_block_.count = drop_count, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
								dropas_(world_, drop_block_);
								world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
							}
						}
					}
				}
			}
			else if (t_ == 758) {
				if (pInfo(peer)->i758 + 1000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
					pInfo(peer)->i758 = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					int get37 = rand() % 37;
					if (pInfo(peer)->csn != -1 && pInfo(peer)->csn < 37) get37 = pInfo(peer)->csn;
					string color = "";
					if (get37 == 36 || get37 == 34 || get37 == 32 || get37 == 30 || get37 == 27 || get37 == 25 || get37 == 23 || get37 == 21 || get37 == 19 || get37 == 18 || get37 == 16 || get37 == 12 || get37 == 9 || get37 == 7 || get37 == 5 || get37 == 3 || get37 == 1) color = "`4";
					else if (get37 == 0) color = "`2";
					else color = "`b";
					string wheel = "`7[``" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` spun the wheel and got " + color + to_string(get37) + "``!`7]``";
					gamepacket_t p(2000), p2(2000);
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert(wheel);
					p.Insert(0);
					p2.Insert("OnConsoleMessage");
					p2.Insert(wheel);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(peer)->world) {
							p.CreatePacket(currentPeer);
							p2.CreatePacket(currentPeer);
						}
					}
					punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 0x0);
				}
			}
			else if (t_ == 756) {
				if (pInfo(peer)->i756 + 1000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) {
					pInfo(peer)->i756 = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					int get1 = rand() % 10;
					string wheel = "`7[``" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` " + (get1 == 1 ? "`2wins at slots!`" : "`4loses at slots.`") + "``7]``";
					if (get1 == 1) {
						PlayerMoving data_{};
						data_.packetType = 17;
						data_.netID = 29;
						data_.YSpeed = 29;
						data_.x = (x_ * 32) + 16;
						data_.y = (y_ * 32) + 16;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(peer)->world != pInfo(currentPeer)->world) continue;
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
					}
					gamepacket_t p(2000), p2(2000), p3(2000);
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert(wheel);
					p.Insert(0);
					p2.Insert("OnConsoleMessage");
					p2.Insert(wheel);
					p3.Insert("OnPlayPositioned");
					p3.Insert(get1 == 1 ? "audio/slot_win.wav" : "audio/slot_lose.wav");
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == pInfo(peer)->world) {
							p.CreatePacket(currentPeer);
							p2.CreatePacket(currentPeer);
							p3.CreatePacket(currentPeer);
						}
					}
					punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 0x0);
				}
			}
			else if (t_ == 1482 || t_ == 2252 || t_ == 7864 || t_ == 11434) {
				struct tm newtime;
				time_t now = time(0);
				localtime_s(&newtime, &now);
				gamepacket_t p;
				p.Insert("OnTalkBubble");
				p.Insert(pInfo(peer)->netID);
				p.Insert("It's " + to_string(newtime.tm_hour) + ":" + (newtime.tm_min < 10 ? "0" + to_string(newtime.tm_min) + "" : "" + to_string(newtime.tm_min) + "") + " " + (newtime.tm_hour >= 12 ? "PM" : "AM") + " on " + to_string(newtime.tm_mon + 1) + "/" + to_string(newtime.tm_mday) + "");
				p.Insert(0);
				p.Insert(1);
				p.CreatePacket(peer);
			}
			if (items[t_].toggleable or items[t_].blockType == BlockTypes::CHEMICAL_COMBINER) {
				if (block_->flags & 0x00800000 or world_->owner_name == pInfo(peer)->tankIDName or guild_access(peer, world_->guild_id) or find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) != world_->admins.end() or world_->open_to_public or pInfo(peer)->dev) {
					block_->flags = (block_->flags & 0x00400000 ? block_->flags ^ 0x00400000 : block_->flags | 0x00400000);
					if (t_ == 226) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						if (block_->flags & 0x00400000) {
							p.Insert("Signal jammer enabled. This world is now `4hidden`` from the universe.");
						}
						else {
							p.Insert("Signal jammer disabled. This world is `2visible`` to the universe.");
						}
						p.CreatePacket(peer);
					}
					if (t_ == 1908) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						if (block_->flags & 0x00400000) {
							p.Insert("point earned");
						}
						else {
							p.Insert("huh?");
						}
						p.CreatePacket(peer);
					}
					if (t_ == 4992) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						if (block_->flags & 0x00400000) {
							p.Insert("`3Antigravity was enabled.``");
						}
						else {
							p.Insert("`4Antigravity was disabled.``");
						}
						p.CreatePacket(peer);
					}
					if (t_ == 226 or t_ == 3616 or t_ == 1276 or t_ == 1278 or t_ == 4758 or t_ == 3750 or t_ == 4992 or t_ == 3072 or t_ == 4884) {
						if (block_->flags & 0x00400000) {
							world_->active_jammers.push_back(t_);
						}
						else {
							world_->active_jammers.erase(remove(world_->active_jammers.begin(), world_->active_jammers.end(), t_), world_->active_jammers.end());
						}
					}
				}
			}
			// nuo cia non access negales nieko padaryt:
			if (items[t_].toggleable) {
				string owner_name = world_->owner_name, user_name = pInfo(peer)->tankIDName;
				if (block_->flags & 0x00800000 and not world_->owner_name.empty() and owner_name != user_name and !guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end() and not pInfo(peer)->dev) {
					gamepacket_t p(0, pInfo(peer)->netID);
					p.Insert("OnPlayPositioned");
					p.Insert("audio/punch_locked.wav");
					if (not pInfo(peer)->invis) {
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == name_) {
								p.CreatePacket(currentPeer);
							}
						}
					}
					else {
						p.CreatePacket(peer);
					}
					punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 16);
					return true;
				}
			}
			if (items[t_].properties & Property_Public) { /*cout << "public block break" << endl;*/ }
			else {
				if (block_->fg == 3918 || block_->fg == 3922 || block_->fg == 3928) {
					if (pInfo(peer)->hand == 3932) {
						pInfo(peer)->random_fossil -= 1;
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
						if (pInfo(peer)->random_fossil == 0) {
							block_->fossil = true;
							p.Insert("`2I unearthed a Fossil!`` I better be careful getting it out...");
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = pInfo(peer)->lastwrenchx, data_.punchY = pInfo(peer)->lastwrenchy, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false, true);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(peer)->world != pInfo(currentPeer)->world) continue;
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
							delete[] raw, blc;
						}
						else if (pInfo(peer)->random_fossil < 0) {
							pInfo(peer)->random_fossil = rand() % 3 + 4;
							p.Insert("`4I smashed a Fossil!``");
							block_->fg = 10;
							update_tile(peer, x_, y_, 10, false, true);
						}
						p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					}
				}
				else if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
					cout << "ETEWTWTWETWETEW" << endl;
					if (block_->owner_name != pInfo(peer)->tankIDName) {
						if (items[t_].blockType == BlockTypes::LOCK) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							string owner_name = block_->owner_name;
							if (world_->owner_named != "") {
								if (world_->owner_named.substr(0, 2) == "`o") owner_name = "`w" + world_->owner_name;
								else owner_name = world_->owner_named;
							}
							if (owner_name == "") owner_name = "`w" + world_->owner_name;
							if (block_->open_to_public)
								p.Insert("" + owner_name + "``'s `$" + items[t_].name + "``. (`wOpen to public``)");
							else if (find(block_->admins.begin(), block_->admins.end(), pInfo(peer)->tankIDName) != block_->admins.end())
								p.Insert("" + owner_name + "``'s `$" + items[t_].name + "``. (`wAccess granted``)");
							else
								p.Insert("" + owner_name + "``'s `$" + items[t_].name + "``. (`4No access``)");
							p.Insert(0);
							p.Insert(1);
							p.CreatePacket(peer);
							if (not pInfo(peer)->dev) {
								{
									gamepacket_t p(0, pInfo(peer)->netID);
									p.Insert("OnPlayPositioned");
									p.Insert("audio/punch_locked.wav");
									if (not pInfo(peer)->invis) {
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else {
										p.CreatePacket(peer);
									}
								}
								return true;
							}
						}
					}
				}
				else if (block_->locked) {
					WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
					string owner_name = block2_->owner_name, user_name = pInfo(peer)->tankIDName;
					if (owner_name != user_name and not pInfo(peer)->dev) {
						if (block2_->fg == 4994 or not block2_->open_to_public and find(block2_->admins.begin(), block2_->admins.end(), pInfo(peer)->tankIDName) == block2_->admins.end()) {
							if (block2_->fg == 4994) {
								if (not block2_->open_to_public) {
									gamepacket_t p(0, pInfo(peer)->netID);
									p.Insert("OnPlayPositioned");
									p.Insert("audio/punch_locked.wav");
									if (not pInfo(peer)->invis) {
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else {
										p.CreatePacket(peer);
									}
									return true;
								}
								if (block2_->build_only and block2_->open_to_public) {
									if (not pInfo(peer)->dev) {
										gamepacket_t p(0, pInfo(peer)->netID);
										p.Insert("OnPlayPositioned");
										p.Insert("audio/punch_locked.wav");
										if (not pInfo(peer)->invis) {
											for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
												if (pInfo(currentPeer)->world == name_) {
													p.CreatePacket(currentPeer);
												}
											}
										}
										else {
											p.CreatePacket(peer);
										}
										{
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(peer)->netID);
											p.Insert("This lock allows building only!");
											p.Insert(0);
											p.Insert(1);
											p.CreatePacket(peer);
										}
										return true;
									}
								}
							}
							else {
								if (not pInfo(peer)->dev) {
									gamepacket_t p(0, pInfo(peer)->netID);
									p.Insert("OnPlayPositioned");
									p.Insert("audio/punch_locked.wav");
									if (not pInfo(peer)->invis) {
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else {
										p.CreatePacket(peer);
									}
									return true;
								}
							}
						}
					}
				}
				else if (not world_->owner_name.empty()) {
					string owner_name = world_->owner_name, user_name = pInfo(peer)->tankIDName;
					if (owner_name != user_name) {
						if (items[t_].blockType == BlockTypes::LOCK) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							string owner_name = "";
							if (world_->owner_named.substr(0, 2) == "`o") owner_name = "`w" + world_->owner_name;
							else owner_name = world_->owner_named;
							if (owner_name == "") owner_name = "`w" + world_->owner_name;
							if (world_->open_to_public)
								p.Insert("" + owner_name + "``'s `$" + items[t_].name + "``. (`wOpen to public``)");
							else if (guild_access(peer, world_->guild_id) or find(world_->admins.begin(), world_->admins.end(), user_name) != world_->admins.end())
								p.Insert("" + owner_name + "``'s `$" + items[t_].name + "``. (`wAccess granted``)");
							else
								p.Insert("" + owner_name + "``'s `$" + items[t_].name + "``. (`4No access``)");
							p.Insert(0);
							p.Insert(1);
							p.CreatePacket(peer);
							if (not pInfo(peer)->dev) {
								{
									gamepacket_t p(0, pInfo(peer)->netID);
									p.Insert("OnPlayPositioned");
									p.Insert("audio/punch_locked.wav");
									if (not pInfo(peer)->invis) {
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else {
										p.CreatePacket(peer);
									}
								}
								return true;
							}
						}
						if (not world_->open_to_public and !guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), user_name) == world_->admins.end()) {
							if (not pInfo(peer)->dev) {
								gamepacket_t p(0, pInfo(peer)->netID);
								p.Insert("OnPlayPositioned");
								p.Insert("audio/punch_locked.wav");
								if (not pInfo(peer)->invis) {
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == name_) {
											p.CreatePacket(currentPeer);
										}
									}
								}
								else {
									p.CreatePacket(peer);
								}
								return true;
							}
						}
					}
				} if (world_->owner_name != pInfo(peer)->tankIDName) {
					if (items[t_].magplant) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Only the `9World Owner`` can activate this!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						return true;
					}
				}
			}
			if (items[t_].magplant) {
				switch (t_) {
				case 6950: case 6952:
				{
					if (block_->id != 0) {
						block_->enabled = (block_->enabled ? false : true);
						for (int i_ = 0; i_ < world_->machines.size(); i_++) {
							WorldMachines* machine_ = &world_->machines[i_];
							if (machine_->x == x_ and machine_->y == y_) {
								machine_->enabled = block_->enabled;
								break;
							}
						}
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, blc;
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
					}
					break;
				}
				}
			}
			if (items[t_].blockType == BlockTypes::CHEMICAL_COMBINER) {
				if (block_->flags & 0x00400000) {

				}
				else {
					vector<vector<int>> comb;
					bool combined = false;
					for (int i_ = 0; i_ < world_->drop.size(); i_++) {
						if (world_->drop[i_].id == 0) continue;
						if (x_ == (world_->drop[i_].x / 32) && y_ == (world_->drop[i_].y / 32)) {
							comb.push_back({ world_->drop[i_].id, world_->drop[i_].count });
						}
					}
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					if (comb.size() < 3) p.Insert("I need 3 ingredients!");
					if (comb.size() > 3) p.Insert("It won't mix more than 3 items at once!");
					if (comb.size() == 3) {
						for (vector<vector<int>>recipe : receptai) {
							uint32_t result_item_id = recipe[3][0];
							uint32_t result_gives_per_recipe = recipe[3][1];
							vector<int> compare1, compare2;
							vector<vector<vector<int>>> info{ {}, {} };
							for (int i_ = 0; i_ < 3; i_++) {
								compare1.push_back(recipe[i_][0]);
								info[0].push_back({ recipe[i_][0], recipe[i_][1] });
							} for (vector<int>item_id : comb) {
								compare2.push_back(item_id[0]);
								info[1].push_back({ item_id[0], item_id[1] });
							} sort(compare1.begin(), compare1.end()), sort(compare2.begin(), compare2.end());
							if (compare1 == compare2) {
								sort(info[0].begin(), info[0].end()), sort(info[1].begin(), info[1].end());
								bool no = false;
								for (int i_ = 0; i_ < info[0].size(); i_++) {
									if (info[0][i_][1] > info[1][i_][1]) {
										no = true;
										break;
									}
								} if (no) break;
								uint32_t result_item_count = 0;
								uint32_t times_ = 0;
								for (int i_ = 0; i_ < world_->drop.size(); i_++) {
									if (no) break;
									if (world_->drop[i_].id == 0) continue;
									if (x_ == (world_->drop[i_].x / 32) && y_ == (world_->drop[i_].y / 32)) {
										for (int i_2 = 0; i_2 < info[0].size(); i_2++) {
											if (info[0][i_2][0] == world_->drop[i_].id) {
												if (info[0][i_2][1] > info[1][i_2][1]) {
													break;
												}
												world_->drop[i_].count -= info[0][i_2][1];
												info[1][i_2][1] = world_->drop[i_].count;
												times_++;
												if (world_->drop[i_].count <= 0) {
													PlayerMoving data_{};
													data_.packetType = 14, data_.netID = -2, data_.plantingTree = world_->drop[i_].uid;
													BYTE* raw = packPlayerMoving(&data_);
													int32_t item = -1;
													memcpy(raw + 8, &item, 4);
													for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
														if (pInfo(currentPeer)->world == name_) {
															send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
														}
													}
													world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
													delete[] raw;
												}
												else {
													PlayerMoving data_{};
													data_.packetType = 14, data_.netID = -2, data_.plantingTree = world_->drop[i_].uid;
													BYTE* raw = packPlayerMoving(&data_);
													int32_t item = -1;
													memcpy(raw + 8, &item, 4);
													for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
														if (pInfo(currentPeer)->world == name_) {
															send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
														}
													}
													delete[] raw;
													WorldDrop drop_{};
													drop_.id = world_->drop[i_].id;
													drop_.count = world_->drop[i_].count;
													drop_.uid = uint16_t(world_->drop.size()) + 1;
													drop_.x = world_->drop[i_].x;
													drop_.y = world_->drop[i_].y;
													world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
													dropas_(world_, drop_);
												} if (times_ == 3) {
													times_ = 0;
													result_item_count += result_gives_per_recipe;
													for (int i_ = 0; i_ < info[0].size(); i_++) {
														if (info[0][i_][1] > info[1][i_][1]) {
															no = true;
															break;
														}
													}
												}
												break;
											}
										}
									}
								} if (result_item_count != 0) {
									combined = true;
									WorldDrop drop_block_{};
									drop_block_.id = result_item_id, drop_block_.count = result_item_count, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
									dropas_(world_, drop_block_);
									PlayerMoving data_{};
									data_.packetType = 17, data_.netID = 44, data_.YSpeed = 44, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
									BYTE* raw = packPlayerMoving(&data_);
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											packet_(currentPeer, "action|play_sfx\nfile|audio/terraform.wav\ndelayMS|0");
											send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[]raw;
									p.Insert("SCIENCE!");
								}
								break;
							}
						}
					}
					if (not combined) p.Insert("Those items don't seem to combine!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
			}
			if (items[t_].blockType == BlockTypes::WEATHER) {
				int weather_id_ = get_weather_id(t_);
				long long current_time = time(nullptr);
				if (block_->last_punch_weather - current_time <= 0) {
					world_->weather = (weather_id_ != world_->weather ? weather_id_ : 0);
					block_->enabled = (world_->weather != 0 ? true : false);
					block_->last_punch_weather = current_time + 1.5;
					if (world_->weather == 0) {
						if (pInfo(peer)->lock == 11550)world_->weather = 54;
						if (pInfo(peer)->lock == 11586)world_->weather = 55;
						if (pInfo(peer)->lock == 10410)world_->weather = 53;
						world_->weather = world_->d_weather;
					}
					gamepacket_t p;
					p.Insert("OnSetCurrentWeather");
					p.Insert(world_->weather == 0 ? 80 : world_->weather);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == name_) {
							p.CreatePacket(currentPeer);
						}
					}
				}
			}
			if (block_->fg == 5638) {
				if (pInfo(peer)->tankIDName == world_->owner_name or pInfo(peer)->dev or world_->owner_name.empty()) {
					long long current_time = time(nullptr);
					if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
						if (block_->id == 0) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("Cannot activate the " + items[block_->fg].name + ", you need to set the item first.");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(peer);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("Cannot activate the " + items[block_->fg].name + ", you need to set the item first.");
								p.CreatePacket(peer);
							}
						}
						else {
							if (items[block_->id].collisionType != 1 and items[block_->id].blockType != BACKGROUND and items[block_->id].blockType != SEED and not items[block_->id].farmable) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("Cannot activate the " + items[block_->fg].name + ", the current item cannot be placed.");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(peer);
								{
									gamepacket_t p;
									p.Insert("OnConsoleMessage");
									p.Insert("Cannot activate the " + items[block_->fg].name + ", the current item cannot be placed.");
									p.CreatePacket(peer);
								}
							}
							else {
								if (not block_->magnetron) {
									block_->magnetron = true;
									if (pInfo(peer)->magnetron_x != 0 and pInfo(peer)->magnetron_y != 0 and pInfo(peer)->magnetron_x != x_ and pInfo(peer)->magnetron_x != y_) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(peer)->netID);
										p.Insert("You received a " + items[5640].name + ".");
										p.Insert(0), p.Insert(0);
										p.CreatePacket(peer);
										{
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert("You received a " + items[5640].name + ".");
											p.CreatePacket(peer);
										}
										{
											pInfo(peer)->magnetron_id = block_->id;
											pInfo(peer)->magnetron_x = x_;
											pInfo(peer)->magnetron_y = y_;
										}
									}
									else {
										int c_ = 0;
										modify_inventory(peer, 5640, c_);
										if (c_ == 0) {
											{
												int c_ = 1;
												if (modify_inventory(peer, 5640, c_) == 0) {
													gamepacket_t p;
													p.Insert("OnTalkBubble");
													p.Insert(pInfo(peer)->netID);
													p.Insert("You received a " + items[5640].name + ".");
													p.Insert(0), p.Insert(0);
													p.CreatePacket(peer);
													{
														gamepacket_t p;
														p.Insert("OnConsoleMessage");
														p.Insert("You received a " + items[5640].name + ".");
														p.CreatePacket(peer);
													}
													{
														pInfo(peer)->magnetron_id = block_->id;
														pInfo(peer)->magnetron_x = x_;
														pInfo(peer)->magnetron_y = y_;
													}
												}
											}
										}
									}
									gamepacket_t p;
									p.Insert("OnPlanterActivated");
									p.Insert(block_->id);
									p.Insert(x_);
									p.Insert(y_);
									p.CreatePacket(peer);
								}
								else {
									block_->magnetron = false;
									gamepacket_t p;
									p.Insert("OnPlanterActivated");
									p.Insert(0);
									p.Insert(0);
									p.Insert(0);
									p.CreatePacket(peer);
								}
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, peer, false);
								try {
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											//cout << "raw 112 part 1" << endl;
											send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] raw, blc;
								}
								catch (out_of_range) {
									return false;
								}
								if (block_->locked) {
									upd_lock(*block_, *world_, peer);
								}
							}
						}
					}
				}
			}
			if (items[block_->fg].mannequin) {
				bool s = false;
				int c_ = 1;
				if (block_->mannequin.c_head != 0) {
					if (modify_inventory(peer, block_->mannequin.c_head, c_) == 0) {
						block_->mannequin.c_head = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_shirt != 0) {
					if (modify_inventory(peer, block_->mannequin.c_shirt, c_) == 0) {
						block_->mannequin.c_shirt = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_pants != 0) {
					if (modify_inventory(peer, block_->mannequin.c_pants, c_) == 0) {
						block_->mannequin.c_pants = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_feet != 0) {
					if (modify_inventory(peer, block_->mannequin.c_feet, c_) == 0) {
						block_->mannequin.c_feet = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_mask != 0) {
					if (modify_inventory(peer, block_->mannequin.c_mask, c_) == 0) {
						block_->mannequin.c_mask = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_hand != 0) {
					if (modify_inventory(peer, block_->mannequin.c_hand, c_) == 0) {
						block_->mannequin.c_hand = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_back != 0) {
					if (modify_inventory(peer, block_->mannequin.c_back, c_) == 0) {
						block_->mannequin.c_back = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_hair != 0) {
					if (modify_inventory(peer, block_->mannequin.c_hair, c_) == 0) {
						block_->mannequin.c_hair = 0;
					}
					s = true;
				}
				else if (block_->mannequin.c_neck != 0) {
					if (modify_inventory(peer, block_->mannequin.c_neck, c_) == 0) {
						block_->mannequin.c_neck = 0;
					}
					s = true;
				} if (s) {
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, peer, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
						}
					}
					delete[] raw, blc;
					if (block_->locked) {
						upd_lock(*block_, *world_, peer);
					}
					return true;
				}
			}
			if (items[block_->fg].charger) {
				if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->superdev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) break;
				if (block_->id != 0) {
					long long current_time = time(nullptr);
					if (block_->planted - current_time > 0) {
						if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("That's not done charging!");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(peer);
						}
					}
					else {
						int c_ = 1;
						if (modify_inventory(peer, 2204, c_) == 0) {
							block_->id = 0, block_->planted = 0;
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false);
							PlayerMoving data_effect_{};
							data_effect_.packetType = 19;
							data_effect_.punchX = 2204;
							data_effect_.punchY = pInfo(peer)->netID;
							data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
							BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
							raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 5;
							try {
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										//cout << "raw 112 part 2" << endl;
										send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
										send_raw(currentPeer, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc, raw_effect;
							}
							catch (out_of_range) {
								return false;
							}
							if (block_->locked) {
								upd_lock(*block_, *world_, peer);
							}
						}
						else {
							if (block_->hp == -1 or (items[t_].dropChance) < (current_time - block_->lp)) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("No room to pick it up!");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(peer);
							}
						}
					}
				}
			}
			if (t_ == 5814) {
				gamepacket_t p;
				p.Insert("OnTalkBubble");
				p.Insert(pInfo(peer)->netID);
				p.Insert("You can't smash a " + items[t_].name + ", the only way to destroy it is to abandon the guild!");
				p.Insert(0), p.Insert(0);
				p.CreatePacket(peer);
				return true;
			}
			if (items[t_].blockType == BlockTypes::DISPLAY) {
				string owner_name = world_->owner_name, user_name = pInfo(peer)->tankIDName;
				if (owner_name != user_name and not owner_name.empty() and not pInfo(peer)->dev) {
					if (block_->id != 0) {
						if (not pInfo(peer)->dev) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("Only the block's owner can break it!");
							p.Insert(0), p.Insert(1);
							p.CreatePacket(peer);
							return true;
						}
					}
				}
				else {
					int c_ = 0;
					modify_inventory(peer, block_->id, c_);
					int slots_ = get_free_slots(pInfo(peer));
					if (c_ + 1 > 200 or c_ == 0 and slots_ == 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("You don't have enough space in your backpack! Free some and try again.");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(peer);
						return true;
					}
				}
			}
			pInfo(peer)->punch_count++;
			long long time_ = time(nullptr);
			uint32_t laikas = uint32_t((time_ - block_->planted <= items[block_->fg].growTime ? time_ - block_->planted : items[block_->fg].growTime));
			if (items[t_].blockType == BlockTypes::SEED and laikas == items[block_->fg].growTime) {
				if (t_ == 1791) {
					PlayerMoving data_{};
					data_.packetType = 17, data_.netID = 48, data_.YSpeed = 48, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
					BYTE* raw = packPlayerMoving(&data_);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(peer)->world != pInfo(currentPeer)->world) continue;
						send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw;
					world_->blocks[x_ + (y_) * 100].fg = 1790;
					update_tile(peer, x_, y_, 1790, false, true);
					return false;
				}
				add_role_xp(peer, 1, "farmer");
				int drop_count = items[block_->fg - 1].rarity == 1 ? (items[block_->fg - 1].farmable ? (rand() % 9) + 4 : (rand() % block_->fruit) + 1) : items[block_->fg - 1].farmable ? (rand() % 5) + 4 : (rand() % block_->fruit) + 1;
				if (block_->fg - 1 == 9718 or block_->fg - 1 == 9720 or block_->fg - 1 == 13202 or block_->fg - 1 == 9162) {
					drop_count = (rand() % 2) + 2;
				}
				if (block_->fg - 1 == 9928) drop_count = (rand() % 3) + 3;
				if (pInfo(peer)->back == 1746 && pInfo(peer)->feet == 1830 || pInfo(peer)->feet == 1966) { // fuel pack
					if (items[block_->fg - 1].rarity < 100) {// pagal real gt jei rarity virs 100 neduoda double
						int c1746 = 1746, countofitem = 0, removepack = -1;
						modify_inventory(peer, c1746, countofitem);
						if (countofitem >= 1) {
							if (rand() % 100 < 10) { // pagal real gt 10% chance
								modify_inventory(peer, c1746, removepack);
								drop_count *= 2; // pagal real gt double drop count
								PlayerMoving data_{};
								data_.packetType = 17, data_.netID = pInfo(peer)->feet == 1966 ? 106 : 50, data_.YSpeed = pInfo(peer)->feet == 1966 ? 106 : 50, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
								BYTE* raw = packPlayerMoving(&data_);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
									send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[] raw;
							}
						}
					}
				}
				if (rand() % 100 < 2 and pInfo(peer)->hand == 6840) {
					PlayerMoving data_{};
					data_.packetType = 17, data_.netID = 58, data_.YSpeed = 58, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
					BYTE* raw = packPlayerMoving(&data_);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(peer)->world != pInfo(currentPeer)->world) continue;
						send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw;
					drop_count++;
				}
				if (pInfo(peer)->hand == 1068) {
					vector<int> list{ 5090, 3088, 5198 };
					if (rand() % 5 < 1) list = { 3086, 3074, 5200, 8910, 7034, 11248, 10132 };
					int item = list[rand() % list.size()], got = 0;
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert(items[item].hand_scythe_text), p.CreatePacket(peer);
					WorldDrop drop_block_{};
					drop_block_.id = item, drop_block_.count = item == 5198 ? 2 : 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
					drop_count = 0;
					PlayerMoving data_{};
					data_.packetType = 17, data_.netID = 50, data_.YSpeed = 50, data_.x = x_ * 32, data_.y = y_ * 32;
					BYTE* raw = packPlayerMoving(&data_);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
						send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw;
					int chance = 0;
					if (has_playmod(pInfo(peer), "Food: Purified Scythe")) chance = 5;
					if (rand() % 100 < (80 - chance)) modify_inventory(peer, 1068, got = -1);
				}
				if (harvest_seed(world_, block_, x_, y_, drop_count, pInfo(peer)->netID, peer)) {
					if (drop_count != 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("A `w" + items[t_].name + "`` falls out!"), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
					}
				}
				else if (world_->weather == 8 and rand() % 300 < 2) {
					WorldDrop drop_block_{};
					drop_block_.id = 3722, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = x_ * 32 + rand() % 17, drop_block_.y = y_ * 32 + rand() % 17;
					dropas_(world_, drop_block_);
					PlayerMoving data_2{};
					data_2.packetType = 0x11, data_2.x = drop_block_.x, data_2.y = drop_block_.y, data_2.YSpeed = 108;
					BYTE* raw2 = packPlayerMoving(&data_2);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
						send_raw(currentPeer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw2;
				}
				if (drop_count != 0) drop_rare_item(world_, peer, t_ - 1, x_, y_, true);
				return true;
			}
			double increase_ = round((double)items[t_].breakHits / 6 / 6);
			int punch_modifier = (has_playmod(pInfo(peer), "Dragoscarf") ? -increase_ : (has_playmod(pInfo(peer), "Enhanced Digging") ? -increase_ : (has_playmod(pInfo(peer), "Death To Blocks!") ? -increase_ : (has_playmod(pInfo(peer), "Dragonborn") ? -increase_ : (has_playmod(pInfo(peer), "punch damage") ? -increase_ : (has_playmod(pInfo(peer), "diggin' it") ? -increase_ : has_playmod(pInfo(peer), "cupid's firepower") ? increase_ : (has_playmod(pInfo(peer), "eye beam") ? increase_ : 0)))))));
			if (block_->hp == -1 or (items[t_].dropChance) < (time_ - block_->lp)) {
				int punch_ = items[t_].breakHits / 6 + punch_modifier;
				if (punch_ <= 2) punch_ = 3;
				else if (punch_ <= 3 and punch_modifier < 0) punch_ = 4;
				if (t_ == 9718 || t_ == 9720 || t_ == 13202 || t_ == 9162 || t_ == 9902 || t_ == 9380) punch_ = 4;
				if (pInfo(peer)->hand == 9772 || pInfo(peer)->hand == 9846 || pInfo(peer)->hand == 10362 || pInfo(peer)->hand == 9770 || pInfo(peer)->hand == 2952) punch_ = 1;
				if (pInfo(peer)->hand == 3932 || pInfo(peer)->hand == 3934) punch_ += 7;
				block_->hp = punch_;
				block_->lp = time_;
			}
			block_->hp -= 1;
			if (block_->hp == 0) { /*isgriove*/
				//grow4good(peer, false, "break", 1);
				if (items[t_].bunny_egg) {
					WorldDrop drop_block_{};
					uint32_t percentage = block_->bunny_egg_progress / 10;
					if (percentage <= 9) {
						{
							uint32_t playmod_effect = 42;
							PlayerMoving data_{};
							data_.packetType = 17, data_.netID = playmod_effect, data_.YSpeed = playmod_effect, data_.x = pInfo(peer)->x + rand() % 17, data_.y = pInfo(peer)->y + rand() % 22;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == world_->name) {
									send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw;
						}
						PlayMods give_playmod{};
						give_playmod.id = 4;
						give_playmod.time = time(nullptr) + 180;
						pInfo(peer)->playmods.push_back(give_playmod);
						update_clothes(peer);
					}
					else if (percentage <= 19) {
						vector<int> pastel_blocks{
							510,
							512,
							514,
							516,
							518,
							520,
							522
						};
						drop_block_.id = pastel_blocks[rand() % pastel_blocks.size()], drop_block_.count = 5;
					}
					else if (percentage <= 24) 	drop_block_.id = 10760, drop_block_.count = 5;
					else if (percentage <= 29) drop_block_.id = 4624, drop_block_.count = 7;
					else if (percentage <= 39) drop_block_.id = ((rand() % 100) < 50 ? 616 : 618), drop_block_.count = 1;
					else if (percentage <= 49) drop_block_.id = ((rand() % 100) < 50 ? 1548 : 8044), drop_block_.count = 1;
					else if (percentage <= 59) {
						vector<int> easter_set{
							502,
							500,
							498,
							508,
						};
						drop_block_.id = easter_set[rand() % easter_set.size()], drop_block_.count = 1;
					}
					else if (percentage <= 69) {
						vector<int> bunny_set{
							504,
							506,
							524
						};
						drop_block_.id = bunny_set[rand() % bunny_set.size()], drop_block_.count = 1;
					}
					else if (percentage <= 79) drop_block_.id = 8038, drop_block_.count = 1;
					else if (percentage <= 89) drop_block_.id = 2558, drop_block_.count = 1;
					else if (percentage <= 99) drop_block_.id = 1550, drop_block_.count = 1;
					else if (percentage == 100) drop_block_.id = 1552, drop_block_.count = 1;
					else if (percentage <= 119) drop_block_.id = 9452, drop_block_.count = 1;
					else if (percentage <= 159) drop_block_.id = 9468, drop_block_.count = 1;
					else if (percentage <= 179) drop_block_.id = 9454, drop_block_.count = 1;
					else if (percentage <= 199) drop_block_.id = 9442, drop_block_.count = 1;
					else if (percentage == 200)drop_block_.id = 9446, drop_block_.count = 1;
					drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = x_ * 32 + rand() % 17, drop_block_.y = y_ * 32 + rand() % 17;
					dropas_(world_, drop_block_);
				}
				else if (t_ == 1916) {

				}
				else if (t_ == 392 || t_ == 3402 || t_ == 9350) { // golden booty chest ir hearstone ir super golden booty chest
					WorldDrop drop_block_{};
					if (t_ == 3402) {
						pInfo(peer)->booty_broken++;
						if (pInfo(peer)->booty_broken >= 100) {
							pInfo(peer)->booty_broken = 0;
							int c_ = 1;
							if (modify_inventory(peer, 9350, c_) != 0) {
								drop_block_.id = 9350, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
								dropas_(world_, drop_block_);
							}
							gamepacket_t p, p2;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You received " + items[9350].name + "!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
							p2.Insert("OnConsoleMessage"), p2.Insert("You received " + items[9350].name + "!"), p2.CreatePacket(peer);
							PlayerMoving data_{};
							data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0, data_.punchX = 9350, data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
							int32_t to_netid = pInfo(peer)->netID;
							BYTE* raw = packPlayerMoving(&data_);
							raw[3] = 5;
							memcpy(raw + 8, &to_netid, 4);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[]raw;
						}
						//valentine
						{
							gamepacket_t p;
							p.Insert("OnProgressUISet"), p.Insert(1), p.Insert(3402), p.Insert(pInfo(peer)->booty_broken), p.Insert(100), p.Insert(""), p.Insert(1);
							p.CreatePacket(peer);
						}
						gamepacket_t p;
						p.Insert("OnProgressUIUpdateValue"), p.Insert(pInfo(peer)->booty_broken), p.Insert(0);
						p.CreatePacket(peer);
					}
					vector<int> list{ 11702, 11696,11692,11690,11688,11686,11684,11682,11680,11678, 11694, 5652, 3398, 386, 4422, 364, 9342, 9340, 9334, 9332, 9336, 9338, 4400, 7808, 7810, 4416, 7818, 7820, 7822, 7824, 5644, 390, 7826, 7830, 9324, 5658, 3396, 2384, 5660, 10654, 3400, 4418, 388, 3408, 1470, 3404, 3406, 10662, 2390, 5656, 5648, 2396, 384, 5664, 4424, 366 }, ghc{ 1458 }, rare_list{ 11668, 11670, 11672, 11664, 362, 362, 362, 2388, 10652, 4412, 10632, 10626 };
					int item = list[rand() % list.size()];
					if ((t_ == 9350 ? rand() % 250 : (has_playmod(pInfo(peer), "Lucky in Love") ? rand() % 650 : rand() % 850)) < 2) item = rare_list[rand() % rare_list.size()];
					if ((t_ == 9350 ? rand() % 2500 : (has_playmod(pInfo(peer), "Lucky in Love") ? rand() % 2600 : rand() % 3000)) < 1) item = ghc[rand() % ghc.size()];
					if (item == 1458) {
						string texts = "`4The Power of Love! `2" + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` found a `5Golden Heart Crystal`` in a `5" + items[t_].name + "``!";
						gamepacket_t p;
						p.Insert("OnConsoleMessage"), p.Insert("CP:_PL:0_OID:_CT:[S]_ `o**`` " + texts + "``");
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							p.CreatePacket(currentPeer);
						}
					}
					drop_block_.id = item, drop_block_.count = (item == 11694 || item == 11696 || item == 7810 || item == 7808 || item == 4400 || item == 390 || item == 3408 || item == 4422 || item == 3404 ? 5 : (item == 4418 || item == 5660 ? 2 : 1)), drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				else if (t_ == 776) { // toxic waste
					vector<int> random_xy{ 1, 0, -1 };
					for (int i = 0; i < 3; i++) {
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()];
						WorldBlock* dropx = &world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)];
						if (dropx->fg == 0) dropx->fg = 778, update_tile(peer, randomx + x_, randomy + y_, 778, false, true);
					}
				}
				else if (t_ == 3918 || t_ == 3928 || t_ == 3922) { // fossil rock broken
					if (pInfo(peer)->hand == 3934 && block_->fossil) {
						WorldDrop drop_block_{};
						drop_block_.id = 3936, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 720) { // pinata
					vector<pair<int, int>> receivingitems;
					vector<int> random_xy{ 2, 1, 0, -1, -2 };
					for (int i_ = 0; i_ < world_->drop.size(); i_++) {
						if (world_->drop[i_].id == 0) continue;
						if (x_ == (world_->drop[i_].x / 32) && y_ == (world_->drop[i_].y / 32)) {
							receivingitems.push_back(make_pair(world_->drop[i_].id, world_->drop[i_].count));
							PlayerMoving data_{};
							data_.effect_flags_check = 1, data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop[i_].uid;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[]raw;
							world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
						}
					}
					for (int i = 0; i < receivingitems.size(); i++) {
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()];
						WorldDrop drop_block_{};
						WorldBlock* dropx = &world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)];
						if (dropx->fg != 0) drop_block_.id = receivingitems[i].first, drop_block_.count = receivingitems[i].second, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						else drop_block_.id = receivingitems[i].first, drop_block_.count = receivingitems[i].second, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = ((x_ + randomx) * 32) + rand() % 17, drop_block_.y = ((y_ + randomy) * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 836) { // summer suprise
					vector<int> list{ 6308, 846, 3702, 8602, 8600, 11068, 832, 2860, 6328, 6324, 6330, 834, 2862, 8612, 4810, 6326, 9744, 3700, 9756, 842, 9748, 11066, 11062, 11064, 840, 850, 3704, 8592, 8594, 3698, 3740, 442, 846, 4804, 3742, 8610, 2856, 844, 11058, 2858, 11040, 822, 838, 4812 }, rare_list{ 1680, 11040 }, random_xy{ 1, 0, -1 };
					int item = list[rand() % list.size()];
					for (int i = 0; i < 3; i++) {
						if (rand() % 1000 < 1) item = rare_list[rand() % rare_list.size()];
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()], item = list[rand() % list.size()];
						WorldDrop drop_block_{};
						WorldBlock* dropx = &world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)];
						if (dropx->fg != 0) drop_block_.id = item, drop_block_.count = (item == 850 || item == 442 || item == 822 || item == 832 || item == 846 ? 10 : (item == 834 ? 5 : 1)), drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						else drop_block_.id = item, drop_block_.count = (item == 850 || item == 442 || item == 822 || item == 832 || item == 846 ? 10 : (item == 834 ? 5 : 1)), drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = ((x_ + randomx) * 32) + rand() % 17, drop_block_.y = ((y_ + randomy) * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 10836 || t_ == 10838 || t_ == 10840 || t_ == 10834 || t_ == 10842) { // Surgery Supply Crate, Fishing Supply Crate, Cooking Supply Crate, Startopia Supply Crate, Superhero Supply Crate
					WorldDrop drop_block_{};
					for (int i = 0; i < items[t_].noob_item.size(); i++) {
						drop_block_.id = items[t_].noob_item[i].first, drop_block_.count = items[t_].noob_item[i].second, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 9902) {
					if (t_ == 9902) {
						gamepacket_t p;
						p.Insert("OnParticleEffect");
						p.Insert(182);
						p.Insert((float)x_ * 32 + 16, (float)y_ * 32 + 16);
						vector<int> clothes_;
						for (int i = 0; i < items.size(); i++) {
							if (items[i].blockType == CLOTHING) clothes_.push_back(i);
						}
						auto chance = rand() % 300;
						uint32_t reward = clothes_[rand() % clothes_.size()];
						if (reward == 2952 || reward == 5192 || reward == 9546 || reward == 5160 || reward == 6260) reward = 9380;
						if (items[reward].name.find("Golden") != string::npos) reward = 9380;
						if (items[reward].name.find("Pet Bunny") != string::npos) reward = 9380;
						if (chance == 50 || chance == 100) {
							vector<int> list2{ 9912, 9830, 9536, 10020, 9812, 9874, 9550, 9974 };
							reward = list2[rand() % list2.size()];
						}
						gamepacket_t p2;
						p2.Insert("OnTalkBubble");
						p2.Insert(pInfo(peer)->netID);
						p2.Insert("The power of The Legendary Mystery Box dropped " + items[reward].name + "!");
						p2.Insert(0), p2.Insert(1);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
							}
						}
						WorldDrop drop_block_{};
						drop_block_.id = reward, drop_block_.count = 1;
						drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 8426) { // easter crate
					vector<int> list{ 2544, 2548, 2550, 2552, 2546,2544, 2548, 2550, 2552, 2546, 9460 };
					WorldDrop drop_block_{};
					drop_block_.id = 611, drop_block_.count = rand() % 20 + 20, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
					if (rand() % 100 < 40) {
						drop_block_.id = list[rand() % list.size()], drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
					if (rand() % 100 < 80) {
						if (rand() % 500 < 1) list = { 2554 };
						drop_block_.id = list[rand() % list.size()], drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 9928 || t_ == 9162) {
					int id = items[t_].id, seedid = id += 1, idd = 0, randoran = 0, seedoran = 0, chances = rand() % 1000 + 1, chances2 = rand() % 100 + 1, chances3 = rand() % 100 + 1;
					int bune = server_uptime - pInfo(peer)->last_uptime;
					if (t_ == 9162) randoran = 200, seedoran = 10, (pInfo(peer)->hand == 10362 ? add_peer_xp(peer, 10) : add_peer_xp(peer, 5)), add_guild_xp(peer, 5);
					if (t_ == 9928) randoran = 2000, seedoran = 20, (pInfo(peer)->hand == 10362 ? add_peer_xp(peer, 50) : add_peer_xp(peer, 25)), add_guild_xp(peer, 25);
					if (bune >= 30 && pInfo(peer)->x / 32 == pInfo(peer)->lastx && pInfo(peer)->y / 32 == pInfo(peer)->lasty) {
						ServerLog("System detected " + pInfo(peer)->tankIDName + " while autofarming over 30 minutes");
						add_curse(peer, 43200, "Autofarm using 3th party program", (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name) + "``");
						enet_peer_disconnect_later(peer, 0);
					}
					else pInfo(peer)->lastx = pInfo(peer)->x / 32, pInfo(peer)->lasty = pInfo(peer)->y / 32, pInfo(peer)->last_uptime = server_uptime; //memleak: belki??
					pInfo(peer)->bpoi++;
					if (pInfo(peer)->hand == 5480 || pInfo(peer)->hand == 9772 || pInfo(peer)->hand == 9846 || pInfo(peer)->hand == 10362 || pInfo(peer)->hand == 9770) pInfo(peer)->raybreak++;
					if (chances2 < 10) {
						WorldDrop drop_seed_{};
						drop_seed_.id = t_, drop_seed_.count = 1, drop_seed_.uid = uint16_t(world_->drop.size()) + 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
						if (not use_mag(world_, drop_seed_, x_, y_)) {
							dropas_(world_, drop_seed_);
						}
					}
					else if (chances3 < seedoran) {
						WorldDrop drop_seed_{};
						drop_seed_.id = t_ + 1, drop_seed_.count = 1, drop_seed_.uid = uint16_t(world_->drop.size()) + 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
						if (not use_mag(world_, drop_seed_, x_, y_)) {
							dropas_(world_, drop_seed_);
						}
					}
					else if (chances == 77) {
						WorldDrop drop_seed_{};
						drop_seed_.id = 6922, drop_seed_.count = 1, drop_seed_.uid = uint16_t(world_->drop.size()) + 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
						if (not use_mag(world_, drop_seed_, x_, y_)) {
							dropas_(world_, drop_seed_);
						}
					}
					else {
						if (pInfo(peer)->hand == 9770) gems_(peer, world_, (rand() % (randoran + 1500)) * 2, x_ * 32, y_ * 32, t_);
						else if (pInfo(peer)->hand == 9770 && (gem_event != 1 && gem_event != 0)) gems_(peer, world_, (rand() % ((randoran + 1500)) * 2) * gem_event, x_ * 32, y_ * 32, t_);
						else gems_(peer, world_, rand() % (randoran + 1500), x_ * 32, y_ * 32, t_);
					}
				}
				else if (t_ == 3604) { // gold treasure
					vector<int> list{ 112, 3582, 262, 826, 828, 2812, 3606, 3574, 10102, 11228 };
					vector<int> rare{ 2002, 3604, 2002, 2002 };
					if (rand() % 25 < 1) list = { 2002, 3604, 2002, 2002 };
					int item = list[rand() % list.size()];
					if (item == 112) gems_(peer, world_, rand() % (500 + 100), x_ * 32, y_ * 32, t_);
					else {
						WorldDrop drop_block_{};
						drop_block_.id = item, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 10004) { // super summer suprise
					vector<int> list{ 3704, 3698, 9754, 842, 3700, 9750, 3702, 3702, 9750, 9746, 3700, 842, 9754, 3698, 1670, 1680, 3704, 3764, 4822, 2874, 8614 };
					if (rand() % 1000 < 1) list = { 9758, 3764, 11012, 9730, 1670, 1680, 4822 };
					int item = list[rand() % list.size()];
					WorldDrop drop_block_{};
					drop_block_.id = item, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				else if (t_ == 11038) { //summer artifacts
					vector<int> list{ 3764, 3702, 9746, 9750, 3700, 842, 9754, 2874, 8614, 3698, 1670, 11040, 11042, 8616, 8618, 1676, 8590, 9732, 9732, 2868, 4822, 1668, 11046, 1678, 1664, 844, 2864, 3764, 6308, 6310, 6306, 6322, 1670, 4816, 4818, 2870, 2872, 2874, 2802, 1666, 4814 };
					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()];
					if (rand() % 3000 < 1) {
						list = { 9758, 11012, 9730, 11008, 1680, 1674, 2854, 6312, 8588, 3696, 4820, 11044 };
						drop_block_.id = list[rand() % list.size()];
						gamepacket_t p;
						p.Insert("OnConsoleMessage"), p.Insert(pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` has received a `5Rare " + items[drop_block_.id].ori_name + "`` from Summer Artifacts Chest!");
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							p.CreatePacket(currentPeer);
						}
					}
					drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				else if (t_ == 10826) { // lava pinata
					vector<int> list{ 6042, 10818, 2640, 9610, 2638, 9634, 9632, 10800, 10804, 1570, 9608, 11876 };

					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()], drop_block_.count = (drop_block_.id == 10818 ? 20 : 1), drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
					if (drop_block_.id == 10168 || drop_block_.id == 11288 || drop_block_.id == 10806 || drop_block_.id == 11870) {
						gamepacket_t p;
						p.Insert("OnConsoleMessage"), p.Insert("The `4Lava Pinata`` rewards " + pInfo(peer)->name_color + pInfo(peer)->tankIDName + "`` with a `5Rare " + items[drop_block_.id].ori_name + ".``");
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							p.CreatePacket(currentPeer);
						}
					}
				}
				else if (t_ == 718) { // ultra pinata
					vector<int> list{ 11900, 4672, 9614 , 10812 , 9634 , 9632 , 9608 , 704 , 6058 , 3598 , 9624 , 9626 , 706 , 10818 , 6052 , 712 , 708 ,4736, 1568, 4724, 4728, 4726, 2634, 714, 10816, 720, 2632, 702, 8316, 8320, 8322, 8318, 10828, 700, 700, 2630, 11892, 11898, 11896 };
					if (pInfo(peer)->hair == 1568) list.insert(list.end(), { 1580, 8324, 6042, 2638,9622,9630, 8326, 10808, 10802, 2640, 10882 });
					if (rand() % 1000 < 1) {
						list = { 10826,  8314 }; // chance of receiving rare item
						if (pInfo(peer)->hair == 1568)  list.insert(list.end(), { 8310,4664,3594, 1570, 9610,10814, 1584, 11874 });
					}
					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()];
					if (drop_block_.id == 3598) drop_block_.count = rand() % 2 + 3;
					else if (drop_block_.id == 9624) drop_block_.count = rand() % 3 + 1;
					else if (drop_block_.id == 2632 || drop_block_.id == 8322) drop_block_.count = rand() % 3 + 2;
					else if (drop_block_.id == 8316) drop_block_.count = rand() % 2 + 2;
					else if (drop_block_.id == 8320) drop_block_.count = 2;
					else if (drop_block_.id == 8318) drop_block_.count = rand() % 4 + 1;
					else if (drop_block_.id == 10828) drop_block_.count = 10;
					else if (drop_block_.id == 2630) drop_block_.count = rand() % 2 + 1;
					else if (drop_block_.id == 11892) drop_block_.count = 4;
					else if (drop_block_.id == 11896) drop_block_.count = 3;
					else drop_block_.count = 1;
					drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				else if (t_ == 9616) { // block de mayo
					vector<int> list{ 11900, 11900, 716, 11890,9628,6054, 10804, 716, 11890,9628,6054, 10804,  704, 6058, 1568, 1572 , 1580, 10822 };
					if (rand() % 1000 < 1) list = { 9618,  8314, 9612 }; // chance of receiving rare item
					WorldDrop drop_block_{};
					drop_block_.id = list[rand() % list.size()];
					if (drop_block_.id == 716 || drop_block_.id == 1572) drop_block_.count = 6;
					else if (drop_block_.id == 11890) drop_block_.count = 3;
					else drop_block_.count = 1;
					drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				else if (t_ == 1584) { // mystery pinata
					vector<pair<int, int>> receivingitems;
					vector<int> random_xy{ 2, 1, 0, -1, -2 };
					for (int i_ = 0; i_ < world_->drop.size(); i_++) {
						if (world_->drop[i_].id == 0) continue;
						if (x_ == (world_->drop[i_].x / 32) && y_ == (world_->drop[i_].y / 32)) {
							receivingitems.push_back(make_pair(world_->drop[i_].id, world_->drop[i_].count));
							PlayerMoving data_{};
							data_.effect_flags_check = 1, data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop[i_].uid;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[]raw;
							world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
						}
					}
					for (int i = 0; i < receivingitems.size(); i++) {
						int randomx = random_xy[rand() % random_xy.size()], randomy = random_xy[rand() % random_xy.size()], item = receivingitems[i].first;
						if (item == 1584) item = 3596;
						if (item == 2634) item = 3602;
						if (item == 1580) item = 1586;
						if (item == 3274) item = 4660;
						if (item == 1568) item = 710;
						if (item == 678) item = 1574;
						if (item == 330) item = 1578;
						if (item == 604 || item == 802 || item == 804 || item == 806 || item == 808 || item == 810 || item == 812) item = 2636;
						if (item == 900 || item == 1378) item = 1576;
						if (item == 2160 || item == 2164 || item == 2162 || item == 2158 || item == 2168 || item == 2166) item = 2642;
						if (item == 2614 || item == 2616 || item == 2618) item = 2620;
						if (item == 2606 || item == 2608 || item == 2610) item = 2612;
						if (item == 2598 || item == 2600 || item == 2602) item = 2604;
						if (item == 1570) item = 6044;
						if (item == 414) item = 6030;
						if (item == 2624) item = 6056;
						if (item == 8310) item = 8312;
						WorldDrop drop_block_{};
						WorldBlock* dropx = &world_->blocks[(x_ + randomx) + ((y_ + randomy) * 100)];
						if (dropx->fg != 0) drop_block_.id = item, drop_block_.count = receivingitems[i].second, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						else drop_block_.id = item, drop_block_.count = receivingitems[i].second, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = ((x_ + randomx) * 32) + rand() % 17, drop_block_.y = ((y_ + randomy) * 32) + rand() % 17;
						dropas_(world_, drop_block_);
					}
				}
				else if (t_ == 2478) { // locke mystery box
					vector<int> list{ 2472,2470,2474,2466,2468,10116,3758,11222 };
					vector<int> clothes{ 370, 372, 374, 42, 68, 40, 130, 270, 234, 142, 694, 10034, 140, 76, 48, 44, 34, 36, 122, 238, 66, 38, 90, 208, 272, 144, 2938, 354, 138, 214, 11202, 342, 1846, 210, 234, 250, 1716, 82, 78, 94, 662, 754, 146, 356, 72, 46, 124, 1720, 92, 1122, 212, 84, 1722, 1844, 2718, 70, 4966, 288, 232, 788, 148, 96, 3932, 448, 98, 134, 50, 74, 1504, 494, 266, 852, 132, 2954, 3934, 3060, 3056, 1800, 88, 2960, 1022, 2578, 3164, 86, 302, 1332, 304, 1116, 6788, 894, 492, 1690, 316, 1850, 1718, 1838, 1032, 1860, 1026, 3048, 352, 724, 1590, 798, 488, 1342, 794, 268, 1502, 8884, 1858, 594, 3466, 1314, 1688, 1312, 3590, 446, 1856, 1854, 1516, 1316, 2700, 4968, 4964, 6796, 1862, 310, 290, 296, 6674, 1864, 4954, 1476, 896, 1848, 496, 136, 158, 2958, 2576, 1954, 152, 1126, 796, 1524, 2928, 80, 2934, 150, 1120, 1142, 1478, 154, 9356, 452, 258, 2882, 156, 1140, 3530, 312, 1124, 890, 1330, 3052, 294, 1650, 1652, 348, 1736, 576, 5016, 1708, 292, 1146, 1028, 1762, 600, 11204 };
					vector<int> block{ 231,487,483,2019,427,1757,2009,281,781,329,459,1041,421,2787,2789,1043,2797,181,613,65,4983,283,553,425,4635,987,627,2017,989,61,4639,973,3523,331,265,859,433,253,339,1105,439,4567,333,677,5673,1427,5603,183,10533,5731,7223,10833,6035,6813,1113,1047,653,2811,4703,1429,847,665,485,1613,833,2025,1775,3931,429,3831,423,437,1773,4767,1299,361,667,2815,3473,301,4637,5683,2709,415,955,461,861,9389,5467,2791,2815,1803,419,2027,685,555,741,10531,5729,7221,10831,6033,6811,621,6401,1107,359,3471,855,309,1685,1449,1309,441,1111,221,1431,3065,9307,1257,1501,1109,4641,3587,1103,417,743,431,3823,2949,1131,3825,727,5379,729,187,787,5459,4785,3261,3521,2293,2309,2321,2333,5461,3721,327,247,63,3479,445,4783,299,863,8935,1451,261,1871,1499,455,9391,683,1159,551,1745,411,3005,557,687,4799,559,4643,3899,1605,9309,567,565,1155,3827,1327,1767,993,1157,563,4721,115,1423,10515,1329,6545,287,669,777,5463,1655,1599,561,4585,3413,4745,1771,2011,1161,1729,3757,3753,321,3265,3263,623,775,6397,129,4667,759,3767,1529,6543,4707,3835,1435,651,8929,569,527,3287,1595,6063,2795,1003,1731,4943,4963,597,4669,1531,1523,625,4297,599,657,571,873,3755,2969,1725,4603,1447,3267,5375,1683,3567, 13, 57, 17, 381, 1139, 21, 101, 379, 117, 27, 23, 581, 195, 105, 191, 377, 1307, 697, 881, 167, 185, 1323, 165, 3783, 369, 25, 171, 53, 103, 179, 29, 249, 177, 1325, 337, 189, 169, 55, 223, 175, 885, 119, 3573, 199, 549, 681, 655, 107, 163, 31, 671, 889, 887, 193, 127, 1433, 173, 7631, 413, 3571, 3569, 2809, 9393, 225, 111, 109, 201, 59, 607, 285, 2029, 2013, 2015, 1611, 995, 997, 963, 1481, 219, 197, 2023, 2021, 9331, 1305, 823, 1039, 231, 487, 483, 2019, 427, 1757, 2009, 281, 781, 329, 459, 1041, 421, 2787, 2789, 1043, 2797, 181, 613, 65, 4983, 283, 553, 425, 4635, 987, 627, 2017, 989, 61, 4639, 973, 3523, 331, 265, 859, 433, 253, 339, 1105, 439, 4567, 333, 677, 5673, 1427, 5603, 183, 10533, 5731, 7223, 10833, 6035, 6813, 1113, 1047, 653, 2811, 4703, 1429, 847, 665 };
					int item = block[rand() % block.size()];
					if ((rand() % 2) + 1 == 2) item = clothes[rand() % clothes.size()];
					else {
						if ((rand() % 2) + 1 == 2) item = block[rand() % block.size()] - 1;
						else item = block[rand() % block.size()];
					}
					if (rand() % 25 < 1) item = list[rand() % list.size()];
					WorldDrop drop_block_{};
					drop_block_.id = item, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				else if (items[t_].blockType == BlockTypes::VENDING) {
					if (block_->c_ != 0 or block_->wl != 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Empty the machine before smashing!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						return true;
					}
				}
				else if (items[t_].blockType == BlockTypes::DONATION) {
					if (block_->donates.size() != 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Empty the " + items[t_].name + " before breaking it!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						return true;
					}
				}
				else if (items[t_].blockType == BlockTypes::STORAGE) {
					int itemcount = 0;
					for (int i_ = 0; i_ < world_->sbox1.size(); i_++) if (world_->sbox1[i_].x == x_ and world_->sbox1[i_].y == y_) itemcount++;
					if (itemcount != 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Empty the box before breaking it!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						return true;
					}
				}
				else if (items[t_].item_sucker) {
					if (block_->pr > 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Empty this " + items[t_].name + " before breaking!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						return true;
					}
				}
				else if (items[t_].magplant) {
					switch (t_) {
					case 6950: case 6952:
					{
						if (block_->pr > 0) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("`4Be careful``, if you return this to your backpack you will `4lose ALL`` Gems stored within! Use them up first!");
							p.Insert(0), p.Insert(1);
							p.CreatePacket(peer);
							{
								gamepacket_t p;
								p.Insert("OnConsoleMessage");
								p.Insert("`4Be careful``, if you return this to your backpack you will `4lose ALL`` Gems stored within! Use them up first!");
								p.CreatePacket(peer);
							}
							return true;
						}
						break;
					}
					}
				}
				if (items[t_].properties & Property_AutoPickup) {
					int c_ = 1;
					if (items[t_].blockType == BlockTypes::LOCK and t_ != 202 && t_ != 204 && t_ != 206 && t_ != 4994) {
						if (world_->owner_name != pInfo(peer)->tankIDName && pInfo(peer)->adminLevel < 6) return true;
						for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
							if (world_->blocks[i_].fg == 4516) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("`4Remove Untrade-a-Box before removing lock!``");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(peer);
								return true;
							}
						}
					}
					if (modify_inventory(peer, t_, c_, false) == 0) {
						PlayerMoving data_{};
						data_.packetType = 14, data_.netID = -1, data_.plantingTree = t_;
						data_.x = float(x_) * 32, data_.y = float(y_) * 32;
						int32_t item = -1;
						float val = 1.00;
						BYTE* raw = packPlayerMoving(&data_);
						memcpy(raw + 8, &item, 4);
						memcpy(raw + 16, &val, 4);
						data_.netID = pInfo(peer)->netID;
						WorldDrop n_{};
						n_.id = 0, n_.count = 0, n_.uid = uint16_t(world_->drop.size()) + 1, n_.x = x_ * 32, n_.y = y_ * 32;
						world_->drop.push_back(n_);
						data_.plantingTree = int(world_->drop.size());
						data_.x = 0, data_.y = 0;
						BYTE* raw2 = packPlayerMoving(&data_);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == name_) {
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								send_raw(currentPeer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[]raw, raw2;
						gamepacket_t p(1);
						p.Insert("OnConsoleMessage");
						p.Insert("Collected `w1 " + items[t_].name + "``.``");
						p.CreatePacket(peer);
					}
					else {
						return true;
					}
				}
				else if (items[t_].max_gems != 0) {
					add_peer_xp(peer, (items[t_].rarity / 5 > 0 ? items[t_].rarity / 5 : 1));
					int maxgems = items[t_].max_gems, idd = 0;
					if (t_ == 120) maxgems = 50;
					int c_ = rand() % (maxgems + 1);
					if (c_ != 0) {
						bool no_seed = false, no_gems = false, no_block = false;
						if (t_ == 2242 or t_ == 2244 or t_ == 2246 or t_ == 2248 or t_ == 2250 or t_ == 542) no_seed = true, no_block = true;
						else {
							for (int i_ = 0; i_ < world_->drop.size(); i_++) {
								if (abs(world_->drop[i_].y - y_ * 32) <= 16 and abs(world_->drop[i_].x - x_ * 32) <= 16) {
									if (world_->drop[i_].id == 112 and items[t_].rarity < 8) {
										no_gems = true;
									}
									else {
										no_seed = true, no_block = true;
									}
								}
							}
						}
						if (items[t_].bunny_egg) no_seed = true, no_block = true, no_gems = true;
						int chanced = 0;
						if (rand() % 100 < 7) {
							if (t_ == 8 || t_ == 6 || t_ == 7372) break;
							if (pInfo(peer)->mask == 8192 || pInfo(peer)->ances == 5144 || pInfo(peer)->ances == 5146 || pInfo(peer)->ances == 5148 || pInfo(peer)->ances == 5150 || pInfo(peer)->ances == 5152 || pInfo(peer)->ances == 5080 && rand() % 250 - (items[pInfo(peer)->ances].chance * items[pInfo(peer)->ances].chance) < 1) {
								WorldDrop drop_block_{};
								drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17, drop_block_.id = t_, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
								if (not use_mag(world_, drop_block_, x_, y_) and not no_block) {
									dropas_(world_, drop_block_);
								}
							}
							WorldDrop drop_block_{};
							drop_block_.id = t_, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
							if (not use_mag(world_, drop_block_, x_, y_) and not no_block) {
								dropas_(world_, drop_block_);
							}
						}
						else if (rand() % 100 < (items[t_].newdropchance + chanced)) {
							if (t_ == 8 || t_ == 6 || t_ == 7372) break;
							WorldDrop drop_seed_{};
							drop_seed_.id = t_ + 1, drop_seed_.count = 1, drop_seed_.uid = uint16_t(world_->drop.size()) + 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
							if (not use_mag(world_, drop_seed_, x_, y_) and not no_seed) {
								dropas_(world_, drop_seed_);
							}
						}
						else if (not no_gems) {
							if (t_ == 8 || t_ == 6 || t_ == 7372) break;
							if (has_playmod(pInfo(peer), "Lucky") and ((rand() % 100) + 1) <= 30) {
								PlayerMoving data_{};
								data_.packetType = 17, data_.netID = 125, data_.YSpeed = 125, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
								BYTE* raw = packPlayerMoving(&data_);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw;
								c_ += (rand() % 5) + 1;
							}
							drop_rare_item(world_, peer, t_, x_, y_, false);
							gems_(peer, world_, c_, x_ * 32, y_ * 32, t_);
						}
					}
				}
				if (block_->fg == 242 || block_->fg == 1796 || block_->fg == 7188 || block_->fg == 4802 || block_->fg == 5260 || block_->fg == 5815 || block_->fg == 5980 || block_->fg == 8470 || block_->fg == 12654 || block_->fg == 11902 || block_->fg == 11586 || block_->fg == 11550) {
					if (pInfo(peer)->tankIDName != world_->owner_name) {
						string messages = pInfo(peer)->tankIDName + " break " + items[block_->fg].name + " in " + pInfo(peer)->world + " old owner was -> " + world_->owner_name;
						ofstream file("logs/lock.txt", ios::app);
						if (file.is_open()) {
							auto now = time(nullptr);
							file << "" << getDate() << " " << messages << "\n";
						}
						file.close();
					}
				}
				if (block_->fg == 7960) { /*Dark Stone*/
					gamepacket_t p;
					p.Insert("OnParticleEffect");
					p.Insert(182);
					p.Insert((float)x_ * 32 + 16, (float)y_ * 32 + 16);
					vector<int> clothes_;
					for (int i = 0; i < items.size(); i++) {
						if (items[i].blockType == CLOTHING) clothes_.push_back(i);
					}
					uint32_t reward = clothes_[rand() % clothes_.size()];
					gamepacket_t p2;
					p2.Insert("OnTalkBubble");
					p2.Insert(pInfo(peer)->netID);
					p2.Insert("The power of The Dark Stone dropped " + items[reward].name + "!");
					p2.Insert(0), p2.Insert(1);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == world_->name) {
							p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
						}
					}
					WorldDrop drop_block_{};
					drop_block_.id = reward, drop_block_.count = 1;
					drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				if (block_->fg == 5638 and pInfo(peer)->magnetron_id != 0 and pInfo(peer)->magnetron_x == x_ and pInfo(peer)->magnetron_y == y_) {
					int c_ = 0;
					modify_inventory(peer, 5640, c_);
					if (c_ != 0) {
						c_ *= -1;
						modify_inventory(peer, 5640, c_);
						pInfo(peer)->magnetron_id = 0;
						pInfo(peer)->magnetron_x = 0;
						pInfo(peer)->magnetron_y = 0;
					}
				}
				if (items[block_->fg].charger and block_->id != 0) {
					if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->superdev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) break;
					WorldDrop drop_block_{};
					drop_block_.id = 2286, drop_block_.count = 1;
					if (block_->planted - time(nullptr) <= 0) {
						drop_block_.id = 2204;
					}
					drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
					dropas_(world_, drop_block_);
				}
				switch (items[block_->fg].blockType) {
				case BlockTypes::WEATHER:
				{
					if (world_->weather != 0) {
						world_->weather = 0;
						if (pInfo(peer)->lock == 11550)world_->weather = 54;
						if (pInfo(peer)->lock == 11586)world_->weather = 55;
						if (pInfo(peer)->lock == 10410)world_->weather = 53;
						if (world_->d_weather != 0) world_->weather = world_->d_weather;
						gamepacket_t p;
						p.Insert("OnSetCurrentWeather");
						p.Insert(world_->weather == 0 ? 80 : world_->weather);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == name_) {
								p.CreatePacket(currentPeer);
							}
						}
					}
					break;
				}
				case BlockTypes::DISPLAY:
				{
					if (block_->id != 0) {
						int c_ = 1;
						modify_inventory(peer, block_->id, c_);
						PlayerMoving data_effect_{};
						data_effect_.packetType = 19;
						data_effect_.punchX = block_->id;
						data_effect_.punchY = pInfo(peer)->netID;
						data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
						BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
						raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 5;
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == name_) {
								send_raw(currentPeer, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[]raw_effect;
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("You picked up 1 " + items[block_->id].ori_name + ".");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(peer);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("You picked up 1 " + items[block_->id].ori_name + ".");
							p.CreatePacket(peer);
						}
					}
					break;
				}
				case BlockTypes::LOCK:
				{
					// reset world settings

					if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
						vector<int> new_tiles{};
						vector<WorldBlock> shadow_copy_2 = world_->blocks;
						new_tiles.push_back(x_ + (y_ * 100));
						int ySize = world_->blocks.size() / 100, xSize = world_->blocks.size() / ySize;
						for (int i2 = 0; i2 < new_tiles.size(); i2++) {
							int s_x_ = new_tiles[i2] % 100, s_y_ = new_tiles[i2] / 100;
							if (s_x_ < 99 and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].lock_origin == (x_ + (y_ * 100))) {
								if (not shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned) {
									shadow_copy_2[s_x_ + 1 + (s_y_ * 100)].scanned = true;
									new_tiles.push_back(s_x_ + 1 + (s_y_ * 100));
									world_->blocks[s_x_ + 1 + (s_y_ * 100)].locked = false;
									world_->blocks[s_x_ + 1 + (s_y_ * 100)].lock_origin = -1;
								}
							} if (s_x_ > 0 and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].locked and shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].lock_origin == (x_ + (y_ * 100))) {
								if (not shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned) {
									shadow_copy_2[s_x_ - 1 + (s_y_ * 100)].scanned = true;
									new_tiles.push_back(s_x_ - 1 + (s_y_ * 100));
									world_->blocks[s_x_ - 1 + (s_y_ * 100)].locked = false;
									world_->blocks[s_x_ - 1 + (s_y_ * 100)].lock_origin = -1;
								}
							} if (s_y_ < 59 and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].lock_origin == (x_ + (y_ * 100))) {
								if (not shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned) {
									shadow_copy_2[s_x_ + ((s_y_ + 1) * 100)].scanned = true;
									new_tiles.push_back(s_x_ + ((s_y_ + 1) * 100));
									world_->blocks[s_x_ + ((s_y_ + 1) * 100)].locked = false;
									world_->blocks[s_x_ + ((s_y_ + 1) * 100)].lock_origin = -1;
								}
							} if (s_y_ > 0 and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].locked and shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].lock_origin == (x_ + (y_ * 100))) {
								if (not shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned) {
									shadow_copy_2[s_x_ + ((s_y_ - 1) * 100)].scanned = true;
									new_tiles.push_back(s_x_ + ((s_y_ - 1) * 100));
									world_->blocks[s_x_ + ((s_y_ - 1) * 100)].locked = false;
									world_->blocks[s_x_ + ((s_y_ - 1) * 100)].lock_origin = -1;
								}
							}
						}
						break;
					}
					if (pInfo(peer)->tankIDName == world_->owner_name) {
						pInfo(peer)->worlds_owned.erase(remove(pInfo(peer)->worlds_owned.begin(), pInfo(peer)->worlds_owned.end(), world_->name), pInfo(peer)->worlds_owned.end());
					}
					else {
						bool on_ = false;
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->tankIDName == world_->owner_name) {
								pInfo(currentPeer)->worlds_owned.erase(remove(pInfo(currentPeer)->worlds_owned.begin(), pInfo(currentPeer)->worlds_owned.end(), world_->name), pInfo(currentPeer)->worlds_owned.end());
								on_ = true;
								break;
							}
						} if (not on_) {
							string path_ = "players/" + world_->owner_name + "_.json";
							if (_access_s(path_.c_str(), 0) == 0) {
								json r_;
								ifstream f_(path_, ifstream::binary);
								f_ >> r_;
								f_.close();
								{
									json f_ = r_["worlds_owned"].get<json>();
									for (int i_ = 0; i_ < f_.size(); i_++) {
										if (f_[i_]["name"] == world_->name) {
											f_.erase(f_.begin() + i_);
											break;
										}
									}
									r_["worlds_owned"] = f_;
								}
								{
									ofstream f_(path_, ifstream::binary);
									f_ << r_;
									f_.close();
								}
							}
						}
					}
					if (block_->fg == 11550 || block_->fg == 11586 || block_->fg == 10410) {
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == name_) pInfo(currentPeer)->lock = 0;
						}
						world_->lockid = 0;
						world_->weather = 0;
						if (world_->d_weather != 0) world_->weather = world_->d_weather;
						gamepacket_t p;
						p.Insert("OnSetCurrentWeather");
						p.Insert(world_->weather == 0 ? 80 : world_->weather);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == name_) {
								p.CreatePacket(currentPeer);
							}
						}
					}
					int got = 0;
					modify_inventory(peer, 1424, got);
					modify_inventory(peer, 1424, got *= -1);
					world_->owner_name = "", world_->owner_named = "", world_->entry_level = 1, world_->make_music_blocks_invisible = false, world_->disable_music_blocks = false, world_->music_bpm = 100, world_->open_to_public = false;
					world_->silence = false, world_->rainbows = false;
					gamepacket_t p;
					p.Insert("OnConsoleMessage");
					p.Insert("`5[```w" + world_->name + "`` has had its `$World Lock`` removed!`5]``");
					gamepacket_t p2(0, pInfo(peer)->netID);
					{
						p2.Insert("OnNameChanged");
						if (pInfo(peer)->adminLevel == 0)pInfo(peer)->name_color = "`0";
						p2.Insert((not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + (pInfo(peer)->is_legend ? " of Legend" : "") + "``");
					}
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == name_) {
							p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
							if (find(world_->admins.begin(), world_->admins.end(), pInfo(currentPeer)->tankIDName) != world_->admins.end()) {
								gamepacket_t p3(0, pInfo(currentPeer)->netID);
								p3.Insert("OnNameChanged");
								if (pInfo(currentPeer)->adminLevel == 0) pInfo(currentPeer)->name_color = "`0";
								p3.Insert((not pInfo(currentPeer)->d_name.empty() ? pInfo(currentPeer)->d_name : pInfo(currentPeer)->name_color + pInfo(currentPeer)->tankIDName) + (pInfo(currentPeer)->is_legend ? " of Legend" : "") + "``");
								for (ENetPeer* currentPeer2 = server->peers; currentPeer2 < &server->peers[server->peerCount]; ++currentPeer2) {
									if (currentPeer2->state != ENET_PEER_STATE_CONNECTED or currentPeer2->data == NULL) continue;
									if (pInfo(currentPeer2)->world == name_) {
										p3.CreatePacket(currentPeer2);
									}
								}
							}
						}
					}
					world_->admins.clear();
					break;
				}
				default:
					break;
				}
				punch_tile(peer, x_, y_, 0x3, p_, pInfo(peer)->netID, 0x0);
				reset_(block_, x_, y_, world_);
			}
			else { /*-1 hp*/
				block_->lp = time_;
				if (items[block_->fg].blockType == BlockTypes::PROVIDER) {
					uint32_t laikas = uint32_t((time_ - block_->planted <= items[block_->fg].growTime ? time_ - block_->planted : items[block_->fg].growTime));
					if (laikas == items[block_->fg].growTime) {
						add_role_xp(peer, 1, "provider");

						vector<double> ids; // svarbu: id.max_kiekis <!= 5 if size after decimal point == 2 then count fixed
						if (block_->fg == 866) { // cow
							ids = { 868.2 };
						}
						else if (block_->fg == 872) { // chicken
							ids = { 874.2 };
						}
						else if (block_->fg == 1044) { // buffalo
							ids = { 868.2 };
						}
						else if (block_->fg == 3888) { // sheep
							ids = { 3890.3 };
						}
						else if (block_->fg == 1632) { // coffee maker
							ids = { 1634 };
						}
						else if (block_->fg == 5116) { // tea set
							ids = { 5114 };
						}
						else if (block_->fg == 2798) { // well
							ids = { 822.2 };
						}
						else if (block_->fg == 10450) { // diamond builder
							ids = { 10454, 10458.50, 10458.50, 10462.20, 10464.30, 10466.30, 10468.50, 10470.30, 10472.20, 10474.30, 10476.20, 10478.20, 10480.30, 10482, 10484.30, 10460 };
						}
						else if (block_->fg == 8196) { // building blocks machine
							ids = { 11732, 11738 }; // ne visi
						}
						else if (block_->fg == 8172) { // Item-O-Matic
							ids = { 8174, 8176, 8178, 8180, 8182 };
						}
						else if (block_->fg == 8160) { // Item-O-Matic
							ids = { 8162, 8164, 8166, 8168, 8170 };
						}
						else if (block_->fg == 8148) { // Item-O-Matic
							ids = { 8150, 8152, 8154, 8156, 8158 };
						}
						else if (block_->fg == 8136) { // Item-O-Matic
							ids = { 8138, 8140, 8142, 8144, 8146 };
						}
						else if (block_->fg == 8124) { // Item-O-Matic
							ids = { 8126, 8128, 8130, 8132, 8134 };
						}
						else if (block_->fg == 8112) { // Item-O-Matic
							ids = { 8114, 8116, 8118, 8120, 8122 };
						}
						else if (block_->fg == 8100) { // Item-O-Matic
							ids = { 8102, 8104, 8106, 8108, 8110 };
						}
						else if (block_->fg == 8088) { // Item-O-Matic
							ids = { 8090, 8092, 8094, 8096, 8098 };
						}
						else if (block_->fg == 8076) { // Item-O-Matic
							ids = { 8078, 8080, 8082, 8084, 8086 };
						}
						else if (block_->fg == 10656) {
							if (block_->shelf_1 >= 200) {
								drop_valentine_box(peer, world_, block_, x_, y_, true, 0);
								gamepacket_t p;
								p.Insert("OnParticleEffect"), p.Insert(46), p.Insert((float)(x_ * 32) + 16, (float)(y_ * 32) + 16);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
									p.CreatePacket(currentPeer);
								}
								block_->shelf_1 = 0, block_->fg = 10658;
							}
						}
						else if (block_->fg == 11472) { // winterfest 2021 calendar
							ids = { 8802.5, 8800.5, 5428.1, 5430.1, 5432.1, 5434.1, 6956.5, 5446.1, 3584.5, 6414.1, 8480.1, 8554.1, 8210.5, 8534.5, 8664.5, 8262.5, 8976.1, 8278.1, 8280.1, 262.1, 263.1, 8728.1, 8556.1, 1368.10, 8246.1, 5382.2, 9202.1, 6986.1, 1360.5, 1384.1, 7006.1, 2564.5, 8980.1, 6970.1, 3676.1, 8254.5, 5376.1, 5792.1, 8546.1, 8712.5, 7864.1, 8984.1, 7490.1, 7496.1, 7498.1, 10486.1, 10488.1, 10444.1, 10220.1, 10258.1, 7758.1, 9356.10, 7080.1, 7082.1, 7084.1, 7086.1, 7088.1, 7090.1, 7092.1, 7094.1, 7096.1, 10032.1, 5780.1, 8722.1, 9692.1, 7760.1, 7418.1, 7420.1, 7422.1, 8948.1, 8960.1, 10036.1, 10038.1, 10040.1, 10042.1, 10440.1, 9184.1, 7718.1, 6384.1, 11514.1, 11520.1, 11202.1, 11192.1 };

							struct tm newtime;
							time_t now = time(0);
							localtime_s(&newtime, &now);
							if (today_day == 24) ids = { 11500 };
							if (today_day == 25) ids = { 802, 1758, 8468, 263, 812, 10442, 9370, 8474, 5018, 7752, 8556, 9182, 9184 };
						}
						else if (block_->fg == 1008 or block_->fg == 5196) { // atm machine and 3000
							int c_ = (rand() % 250) + 1;
							if (block_->fg == 5196) c_ = (rand() % 500) + 1;
							if (c_ == 250 or c_ == 500) {
								PlayerMoving data_{};
								data_.packetType = 17, data_.netID = 29, data_.YSpeed = 29, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
								BYTE* raw = packPlayerMoving(&data_);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(peer)->world != pInfo(currentPeer)->world) continue;
									send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
								delete[] raw;
							}
							gems_(peer, world_, c_, x_ * 32, y_ * 32, block_->fg);
						}
						else if (block_->fg == 1636) { // Awkward Friendly Unicorn
							ids = { 728, 360, 308, 306, 2966, 1646, 3170, 1644, 1642, 3524, 1640, 1638, 2582, 3198, 8838, 6794, 10110 };
						}
						else if (block_->fg == 3044) { // Tackle box
							ids = { 2914, 3012, 3014, 3016, 3018, 5528, 5526 };
						}
						else if (block_->fg == 6212) { // Surgical Tool Bag
							ids = { 1258, 1260, 1262, 1264, 1266, 1268, 1270, 4308, 4310, 4312, 4314, 4316, 4318 };
						}
						else if (block_->fg == 6414) { // Star Tool Droid
							ids = { 6520, 6538, 6522, 6528, 6540, 6518, 6530, 6524, 6536, 6534, 6532, 6526, 6416 };
						}
						else if (block_->fg == 928) { // Science station
							ids = { 914, 916, 918, 920, 924 };
						} if (ids.size() != 0) {
							double rand_item = ids[rand() % ids.size()];
							int count_ = 1;
							bool do_rand = true;
							if (to_string(rand_item).find(".") != string::npos) {
								string asd_ = explode(".", to_string(rand_item))[1];
								string s(1, asd_[0]);
								int c_ = atoi(s.c_str());
								if (c_ != 0) {
									if (asd_.size() == 2) {
										do_rand = false;
										c_ /= 10;
									}
									count_ = c_;
								}
							}
							if (count_ > 1 and do_rand)
								count_ = (rand() % count_) + 1;
							int rand_item2 = (int)rand_item;
							WorldDrop new_drop_{};
							new_drop_.id = rand_item2, new_drop_.count = count_, new_drop_.uid = uint16_t(world_->drop.size()) + 1, new_drop_.x = (x_ * 32) + rand() % 17, new_drop_.y = (y_ * 32) + rand() % 17;
							if (not use_mag(world_, new_drop_, x_, y_)) dropas_(world_, new_drop_);
						}
						int timed = items[block_->fg].growTime / 2;
						if (has_playmod(pInfo(peer), "Provider Time Reduced...") && rand() % items[pInfo(peer)->ances].chance < 1) timed *= 1.01;
						block_->planted = time(nullptr) - (timed);
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, blc;
						/* crash
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}*/
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
					}
				}
				else if (items[block_->fg].blockType == BlockTypes::RANDOM_BLOCK) {
					block_->roll = (rand() % 6);
					punch_tile(peer, x_, y_, 0x8, 0, pInfo(peer)->netID, 0x0, true, block_->roll);
				}
				punch_tile(peer, x_, y_, 0x8, (punch_modifier == 0 ? 6 : (punch_modifier < 0 ? 8 : 5)), pInfo(peer)->netID, 0x0, (block_->roll != 0 ? true : false), (block_->roll != 0 ? block_->roll : 0));
			}
			break;
		}
		case 32:
		{
			if (t_ == 3898) {
				string user_name = pInfo(peer)->tankIDName;
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wTelephone``|left|3898|\nadd_textbox|Dial a number to call somebody in Growtopia. Phone numbers have 5 digits, like 12345 (try it - you'd be crazy not to!). Most numbers are not in service!|left|\nadd_text_input|buttonClicked|Phone #||5|\nend_dialog|" + to_string(t_) + "|Hang Up|Dial|\n");
				p.CreatePacket(peer);
				break;
			}
			else if (t_ == 10656) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wWell of Love``|left|10656|\nadd_spacer|small|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|2|`wLove: " + to_string(block_->shelf_1) + "/200|" + to_string(block_->shelf_1) + "|200``|relative|1|0.95|0|1000|64|0.01\nadd_spacer|small|\nadd_textbox|Give 5 Golden Booty Chests to receive the `2ONE best prize``, and to fill up the well. Once the well is full it will provide one reward with a `53.25% chance`` of getting one of these `5Epic`` items:|left|\nadd_label_with_icon|small| - `5Golden Heart Crystal``|left|1458|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Stained Glass Crown``|left|11672|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Cotton Candy Cape``|left|13140|\nadd_spacer|small|\nadd_textbox|... or a `5Pure Love Essence`` that doubles the chance of getting a Golden Heart Crystal when opening Golden Booty Chests, Super Golden Booty Chests and Heartstones.|left|\nadd_spacer|small|\nend_dialog|wishing_well|Thanks for the info!||");
				p.CreatePacket(peer);
			}
			else if (t_ == 5086) {
				string gaylols = "\nadd_textbox|`$You must wear ances";
				if (pInfo(peer)->ances != 0) {
					if (ancesupgradeto(peer, pInfo(peer)->ances) == 0)  gaylols = "\nadd_textbox|`$Your ances is already at the max level!|";
					else gaylols = "\nadd_textbox|Choose an upgrade|\nadd_button|ancientdialog|`0Upgrade to " + items[ancesupgradeto(peer, pInfo(peer)->ances)].name;
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`$\nadd_label_with_icon|big|`9Ancient Goddess|left|5086|\nadd_textbox|`$Greetings, mortal! it seems you have ancient thing I|\nadd_textbox|can enhance through magic old. Tell me: Which would|\nadd_textbox|you like to mold? Choose wisely, for once i work my|\nadd_textbox|wonders, it will bound to you for eternity...|\nadd_spacer|small|" + gaylols + "|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog||Return||");
				p.CreatePacket(peer);
			}
			else if (t_ == 6142) {
				//extractor dynamo
				string foundlist = "";
				gamepacket_t p;
				for (int i_ = 0; i_ < world_->drop_new.size(); i_++) {
					if (world_->drop_new[i_][4] / 32 == y_ && world_->drop_new[i_][0] != 112 && world_->drop_new[i_][0] != 4490) {
						if (world_->drop_new[i_][3] / 32 == (x_ + (block_->flags & 0x00200000 ? -1 : 1)) or world_->drop_new[i_][3] / 32 == (x_ + (block_->flags & 0x00200000 ? -2 : 2)) or world_->drop_new[i_][3] / 32 == (x_ + (block_->flags & 0x00200000 ? -3 : 3))) 	foundlist += to_string(world_->drop_new[i_][0]) + "," + to_string(world_->drop_new[i_][1]) + "," + to_string(world_->drop_new[i_][2]) + ",";
					}
				}
				if (not foundlist.empty()) p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wExtractor Dynamo``|left|6142|\nadd_spacer|small|\nadd_textbox|GrowTech: use the Extractor Dynamo to pick out the items from the floating items in your world! - Thanks, Technician Dave.|left|\nadd_spacer|small|\nadd_textbox|Press on the icon to extract the item into your inventory.|left|\nadd_spacer|small|\nadd_textbox|`wItem List:|left|\nadd_label_with_icon_button_list|small|`w%s : %s|left|dynamoOnceObj_|itemID_itemAmount_worldObj|" + foundlist + "\nadd_spacer|small|\nend_dialog|dynamo|Close||");
				else p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("There are no floating items in the extraction area!"), p.Insert(0), p.Insert(0);
				p.CreatePacket(peer);
			}
			if (t_ == 12986) {
				if (world_->owner_name == pInfo(peer)->tankIDName || pInfo(peer)->dev || guild_access(peer, world_->guild_id) || find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end()) {
					string Day = "";
					Day += "\nadd_button_with_icon|calendarSystem_1|`$Day 1``|" + string(block_->pr >= 1 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_2|`$Day 2``|" + string(block_->pr >= 2 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_3|`$Day 3``|" + string(block_->pr >= 3 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_4|`$Day 4``|" + string(block_->pr >= 4 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_5|`$Day 5``|" + string(block_->pr >= 5 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_6|`$Day 6``|" + string(block_->pr >= 6 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_7|`$Day 7``|" + string(block_->pr >= 7 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_8|`$Day 8``|" + string(block_->pr >= 8 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_9|`$Day 9``|" + string(block_->pr >= 9 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_10|`$Day 10``|" + string(block_->pr >= 10 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_11|`$Day 11``|" + string(block_->pr >= 11 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_12|`$Day 12``|" + string(block_->pr >= 12 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_13|`$Day 13``|" + string(block_->pr >= 13 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_14|`$Day 14``|" + string(block_->pr >= 14 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_15|`$Day 15``|" + string(block_->pr >= 15 ? "noflags|6292||" : "frame|9202||");
					Day += "\nadd_button_with_icon|calendarSystem_16|`$Day 16``|" + string(block_->pr >= 16 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_17|`$Day 17``|" + string(block_->pr >= 17 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_18|`$Day 18``|" + string(block_->pr >= 18 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_19|`$Day 19``|" + string(block_->pr >= 19 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_20|`$Day 20``|" + string(block_->pr >= 20 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_21|`$Day 21``|" + string(block_->pr >= 21 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_22|`$Day 22``|" + string(block_->pr >= 22 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_23|`$Day 23``|" + string(block_->pr >= 23 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_24|`$Day 24``|" + string(block_->pr >= 24 ? "noflags|6292||" : "frame|10486||");
					Day += "\nadd_button_with_icon|calendarSystem_25|`$Day 25``|" + string(block_->pr >= 25 ? "noflags|6292||" : "frame|9202||");
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wWinterfest Calendar - 2022``|left|12986|\nadd_textbox|Tap on a button below to view the `2rewards`` available on that day.|left|\nadd_spacer|small|\ntext_scaling_string|Defibrillators|" + Day + "\nadd_button_with_icon||END_LIST|noflags|0||\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_button|cancel|Close|noflags|0|0|\nend_dialog|wfcalendar_dailyrewards|||\nadd_quick_exit|");
					p.CreatePacket(peer);
				}
			}
			if (items[t_].blockType == BlockTypes::CRYSTAL) {
				vector<vector<int>> current_{ {2242, 0}, {2244, 0}, {2246, 0}, {2248, 0}, {2250, 0} };
				string mix_with = "";
				for (int i = 0; i < block_->crystals.size(); i++) {
					vector<int> c_ = block_->crystals[i];
					for (int a = 0; a < current_.size(); a++) {
						if (current_[a][0] == c_[0]) {
							current_[a][1] = block_->crystals[i][1];
							break;
						}
					}
				} vector<string> reply{};
				for (int i = 0; i < current_.size(); i++) {
					reply.push_back(to_string(current_[i][1]) + "x `$" + mix_with + (current_[i][0] == 2242 ? "R" : (current_[i][0] == 2244 ? "G" : (current_[i][0] == 2246 ? "B" : (current_[i][0] == 2248 ? "W" : "B")))) + "``");
				}
				vector<string> available_recipes{};
				for (vector<vector<int>> a_ : crystal_receptai) {
					bool can_ = true;
					for (vector<int> b_ : a_) {
						for (int i = 0; i < current_.size(); i++) {
							if (current_[i][0] == b_[0] and current_[i][1] < b_[1]) {
								can_ = false;
								break;
							}
						} if (not can_) {
							break;
						}
					} if (can_) {
						available_recipes.push_back("\nadd_button|" + to_string(a_[5][0]) + "|`$Craft " + items[a_[5][0]].name + "``|noflags|0|0|");
					}
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wCrystal Shattering``|left|5104|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label_with_icon|small|This crystal is currently mixed with " + join(reply, ", ") + ".|left|5274|" + (available_recipes.size() == 0 ? "\nadd_textbox|No recipes are available. Mix more various crystals to see available recipes.|left|" : "\nadd_spacer|small|" + join(available_recipes, "")) + "\nend_dialog|crystal_exchange|Cancel||\n");
				p.CreatePacket(peer);
				break;
			}
			if (items[t_].blockType == BlockTypes::DONATION) {
				pInfo(peer)->lastwrenchb = t_;
				WorldBlock block_ = world_->blocks[pInfo(peer)->lastwrenchx + (pInfo(peer)->lastwrenchy * 100)];
				string donate_item = "";
				int itemcount = block_.donates.size();
				for (int i_ = 0; i_ < block_.donates.size(); i_++) donate_item += "\nadd_checkbox|" + to_string(itemcount) + "|" + items[block_.donates[i_].item].name + " (`w" + to_string(block_.donates[i_].count) + "``) from `w" + block_.donates[i_].name + "``" + (block_.donates[i_].text != "" ? "`#- \"" + block_.donates[i_].text + "\"``" : "") + "|0";
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and not world_->owner_name.empty() and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (itemcount != 0 ? "\nadd_textbox|You see `w" + to_string(itemcount) + "`` gift in the box!|left|" : "\nadd_textbox|The box is currently empty.|left|") + "\nadd_textbox|Want to leave a gift for the owner?|left|" + (itemcount >= 20 ? "\nadd_textbox|This box already has `w20`` gifts in it, can't add more until you clear them.|left|" : "\nadd_spacer|small|\nadd_item_picker|itemid|`wGive Gift`` (Min rarity: `52``)|Choose an item to give yourself|") + "\nend_dialog|donation_box_edit|Cancel||\n");
				else p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (itemcount == 0 ? "\nadd_textbox|The box is currently empty.|left|" : "\nadd_textbox|You have `w" + to_string(itemcount) + "`` gift waiting:|left|" + donate_item + "\nadd_spacer|small|\nadd_button|clear_selected|`4Retrieve Selected Gifts``|noflags|0|0|\nadd_button|takeall|`4Retrieve All Gifts``|noflags|0|0|") + "" + (itemcount >= 20 ? "\nadd_textbox|This box already has `w20`` gifts in it, can't add more until you clear them.|left|" : "\nadd_spacer|small|\nadd_item_picker|itemid|`wGive Gift`` (Min rarity: `52``)|Choose an item to give yourself|") + "\nend_dialog|donation_box_edit|Cancel||\n");
				p.CreatePacket(peer);
				break;
			}
			if (items[t_].blockType == BlockTypes::BULLETIN_BOARD || items[t_].blockType == BlockTypes::MAILBOX) {
				pInfo(peer)->lastwrenchb = t_;
				string text = "";
				int letters = 0, same = 0;
				bool public_can_add = true, hide_names = false;
				for (int i_ = 0; i_ < world_->bulletins.size(); i_++) if (world_->bulletins[i_].x == x_ and world_->bulletins[i_].y == y_) public_can_add = world_->bulletins[i_].public_can_add, hide_names = world_->bulletins[i_].hide_names;
				for (int i_ = 0; i_ < world_->bulletin.size(); i_++) {
					if (world_->bulletin[i_].x == x_ and world_->bulletin[i_].y == y_) {
						if (fixchar(world_->bulletin[i_].name) == pInfo(peer)->tankIDName) same++;
						letters++;
						if (items[t_].blockType == BlockTypes::BULLETIN_BOARD) {
							if (hide_names) text += "\nadd_label|small|`2" + world_->bulletin[i_].text + "``|left|";
							else {
								if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) text += "\nadd_label_with_icon|small|" + world_->bulletin[i_].name + ": ```2" + world_->bulletin[i_].text + "``|left|660|";
								else text += "\nadd_label_with_icon_button|small|" + world_->bulletin[i_].name + ": ```2" + world_->bulletin[i_].text + "``|left|660|edit" + to_string(letters) + "|";
							}
						}
						else text += "\nadd_label_with_icon|small|`#\"" + world_->bulletin[i_].text + "\" - `w" + world_->bulletin[i_].name + "``|left|660|\nadd_spacer|small|";
					}
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				if (items[t_].blockType == BlockTypes::BULLETIN_BOARD) {
					if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|" + (letters == 0 ? "\nadd_textbox|The " + items[t_].name + " is empty.|left|" : text) + "" + (public_can_add ? (same >= 3 ? "\nadd_textbox|You already have `03`` posts up, take a break!|left|" : "\nadd_textbox|Add to conversation?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Add``|noflags|0|0|") : "") + "\nend_dialog|bulletin_edit|Cancel||\nadd_quick_exit|");
					else p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|" + (letters == 0 ? "\nadd_textbox|The " + items[t_].name + " is empty.|left|" : text) + "\nadd_textbox|Add to conversation?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Add``|noflags|0|0|\nadd_spacer|small|\nadd_label_with_icon|big|`wOwner Options|left|242|\nadd_spacer|small|\nadd_textbox|To remove an individual comment, press the icon to the left of it.|left|\nadd_spacer|small|\nadd_spacer|small|" + (letters == 0 ? "" : "\nadd_button|clear|`4Clear Board``|noflags|0|0|") + "\nadd_checkbox|checkbox_locked|Public can add|" + (public_can_add ? "1" : "0") + "\nadd_checkbox|checkbox_hide|Hide names|" + (hide_names ? "1" : "0") + "\nend_dialog|bulletin_edit|Cancel|OK|\nadd_quick_exit|");
				}
				else {
					if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (letters >= 20 ? "\nadd_textbox|This mailbox already has `w20`` letters in it.  Try again later.|left|" : (same >= 3 ? "\nadd_textbox|You've already crammed `w3 ``of your letters into the mailbox, better wait.|left|" : "\nadd_textbox|Want to leave a message for the owner?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Send Letter``|noflags|0|0|")) + "\nend_dialog|bulletin_edit|Cancel||\nadd_quick_exit|");
					else p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (letters == 0 ? "\nadd_textbox|Your mailbox is currently empty.|left|" : "\nadd_textbox|You have `w" + to_string(letters) + "`` letters:|left|\nadd_spacer|small|" + text + "\nadd_spacer|small|\nadd_button|clear|`4Empty Mailbox``|noflags|0|0|") + "" + (letters >= 20 ? "\nadd_textbox|This mailbox already has `w20`` letters in it.  Try again later.|left|" : "\nadd_textbox|Write a letter to yourself?|left|\nadd_text_input|sign_text|||128|\nadd_spacer|small|\nadd_button|send|`2Send Letter``|noflags|0|0|") + "\nend_dialog|bulletin_edit|Cancel||\nadd_quick_exit|");
				}
				p.CreatePacket(peer);
				break;
			}
			if (t_ == 4264) {
				pInfo(peer)->lastwrenchb = t_;
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				if (block_access(peer, world_, block_)) p.Insert(
					"set_default_color|`o\n"
					"add_label_with_icon|big|`wStuff-4-Toys Box``|left|4264|\n"
					"add_textbox|Welcome to the `9Stuff-4-Toys Program``! You can drop off any unwanted items here (as long as they have rarity), and for every 1,000,000 rarity donated, our specially trained `2Present Goblins`` and  for every 50,000,000 rarity donated, our specially trained `cFrozen Rayman`` will give away a holiday toy to a needy Growtopian. 'Tis the season for giving!|left|\n"
					"add_smalltext|To donate an item, select it in your inventory, then use it on the Stuff-4-Toys Box.Don't use the Drop button!|left|\n"
					"add_spacer|small|\n"
					"add_smalltext|Total rarity donated: " + setGems(world_->s4tb.second) + "|left|\n"
					"add_smalltext|Total toys given away: " + setGems(world_->s4tb.first) + "|left|\n"
					"add_spacer|small|\n"
					"add_smalltext|You personally donated " + setGems(pInfo(peer)->s4tb) + " rarity|left|\n"
					"add_quick_exit|\n"
					"end_dialog|s4tb|Exit||\n"
				);
				else p.Insert(
					"set_default_color|`o\n"
					"add_label_with_icon|big|`wStuff-4-Toys Box``|left|4264|\n"
					"add_textbox|Welcome to the `9Stuff-4-Toys Program``! You can drop off any unwanted items here (as long as they have rarity), and for every 1,000,000 rarity donated, our specially trained `2Present Goblins`` and  for every 50,000,000 rarity donated, our specially trained `cFrozen Rayman`` will give away a holiday toy to a needy Growtopian. 'Tis the season for giving!|left|\n"
					"add_smalltext|To donate an item, select it in your inventory, then use it on the Stuff-4-Toys Box.Don't use the Drop button!|left|\n"
					"add_spacer|small|\n"
					"add_smalltext|Total rarity donated: " + setGems(world_->s4tb.second) + "|left|\n"
					"add_smalltext|Total toys given away: " + setGems(world_->s4tb.first) + "|left|\n"
					"add_spacer|small|\n"
					"add_smalltext|You personally donated " + setGems(pInfo(peer)->s4tb) + " rarity|left|\n"
					"add_quick_exit|\n"
					"end_dialog|s4tb|Exit||\n"
				);
				p.CreatePacket(peer);
			}
			if (t_ == 1790) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`#Legendary Wizard``|left|" + to_string(t_) + "|\nadd_label|small|Greetings, traveler! I am the Legendary Wizard.  Should you wish to embark on a Legendary Quest, simply choose one blow.|left|\nadd_spacer|small|\nadd_button|quest_1|`9Quest For Honor``|noflags|0|0|\nadd_button|quest_2|`9Quest For Fire``|noflags|0|0|\nadd_button|quest_3|`9Quest Of Steel``|noflags|0|0|\nadd_button|quest_4|`9Quest Of The Heavens``|noflags|0|0|\nadd_button|quest_5|`9Quest For The Blade``|noflags|0|0|\nend_dialog|wizard|No Thanks||");
				p.CreatePacket(peer);
			}
			if (t_ == 1900) {
				int c_q = 0;
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				if (c_q == 0) p.Insert("set_default_color|`o\nadd_label_with_icon|big|`9The Ringmaster``|left|" + to_string(t_) + "|\nadd_smalltext|Come one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lot about Rings! For 10 Golden Tickets, I might even tell you how you can get a Ring of your own...|left|\nadd_spacer|small|\nadd_button|c_quest|`9Give 10 Golden Tickets``|noflags|0|0|\nadd_spacer|small|\nadd_smalltext|If you had 10 rings of the same type maybe we could have made a deal...|left|\nend_dialog|carnival|Goodbye!||");
				else p.Insert("set_default_color|`o\nadd_label_with_icon|big|`9The Ringmaster``|left|" + to_string(t_) + "|\nadd_smalltext|Come one, come all, to the most extraordinary show in Growtopia! I am the Ringmaster. That means I know a lot about Rings! For 10 Golden Tickets, I might even tell you how you can get a Ring of your own...|left|\nadd_spacer|small|\nadd_button|c_quest|`9Give 10 Golden Tickets``|noflags|0|0|\nadd_spacer|small|\nadd_smalltext|If you had 10 rings of the same type maybe we could have made a deal...|left|\nend_dialog|carnival|Goodbye!||");
				p.CreatePacket(peer);
			}
			if (t_ == 6016) {
				pInfo(peer)->lastwrenchb = t_;
				bool world_public = false, floating_public = false;
				for (int i_ = 0; i_ < world_->gscan.size(); i_++) if (world_->gscan[i_].x == x_ and world_->gscan[i_].y == y_) {
					if (world_->gscan[i_].world_public) world_public = true;
					if (world_->gscan[i_].floating_public) floating_public = true;
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Stats``|left|6016|\nadd_spacer|small|" + (floating_public == false and world_public == false ? "\nadd_textbox|`wYou don't have access to this block.|left" : "\nadd_textbox|`wThis amazing block can show the stats for the whole world!|left\nadd_spacer|small|\nadd_textbox|`wWhich stats would you like to view?|left") + "" + (world_public == true ? "\nadd_button|worldBlocks|World Blocks|noflags|0|0|" : "") + "" + (floating_public == true ? "\nadd_button|floatingItems|Floating Items|noflags|0|0|" : "") + "\nadd_spacer|small|\nend_dialog|statsblock|Cancel||\n");
				else p.Insert(a + "set_default_color|`o\nadd_label_with_icon|big|`wWorld Stats``|left|6016|\nadd_spacer|small|\nadd_textbox|`wThis amazing block can show the stats for the whole world!|left\nadd_spacer|small|\nadd_textbox|`wWhich stats would you like to view?|left\nadd_button|worldBlocks|World Blocks|noflags|0|0|\nadd_button|floatingItems|Floating Items|noflags|0|0|\nadd_spacer|small|\nadd_textbox|`wYou can set the stats to be usable by the public.|left\nadd_checkbox|isStatsWorldBlockUsableByPublic|World blocks is usable by public|" + (world_public == false ? "0" : "1") + "\nadd_checkbox|isStatsFloatingItemsUsableByPublic|Floating items is usable by public|" + (floating_public == false ? "0" : "1") + "\nadd_spacer|small|\nend_dialog|statsblock|Cancel|Apply|\n");
				p.CreatePacket(peer);
			}
			if (t_ == 5714) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				//	p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGiant Pot O' Gold``|left|5714|\nadd_spacer|small|\nadd_textbox|Welcome to the `9Giant Pot O' Gold``! You can drop off any unwanted items here (as long as they have rarity!) Donate 20,000 rarity and win an awesome prize - donate 40,000 and get a super-awesome prize!|left|\nadd_smalltext|To donate an item, select it in your inventory, then use it on the Giant Pot O' Gold. Don't use the Drop button!|left|\nadd_spacer|small|\nadd_smalltext|You are a `6Level "+to_string(pInfo(peer)->b_lvl) + " Donator``, with "+setGems(pInfo(peer)->b_ra) + " rarity donated!|left|\nend_dialog|giantpotogold|Exit||");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGiant Pot O' Gold``|left|5714|\nadd_spacer|small|\nadd_textbox|We are closed!|left|\nend_dialog|giantpotogold|Exit||");
				p.CreatePacket(peer);
			}
			if (items[t_].blockType == BlockTypes::VENDING) {
				if (abs(x_ * 32 - pInfo(peer)->x) > 15 || abs(y_ * 32 - pInfo(peer)->y) > 15) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("Get closer!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
					break;
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert(world_->owner_name == pInfo(peer)->tankIDName or find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) != world_->admins.end() && world_->v_p && block_->locked == false ? get_vending(peer, world_, block_, x_, y_) : get_vending_buyer_side(peer, world_, block_, x_, y_));
				p.CreatePacket(peer);
				break;
			}
			if (block_->fg == 202 or block_->fg == 204 or block_->fg == 206 or block_->fg == 4994) {
				string owner_name = block_->owner_name, user_name = pInfo(peer)->tankIDName;
				if (owner_name != user_name and not pInfo(peer)->dev) {
					if (items[t_].blockType == BlockTypes::LOCK) {
						if (find(block_->admins.begin(), block_->admins.end(), pInfo(peer)->tankIDName) != block_->admins.end()) {
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label|small|This lock is owned by `w" + block_->owner_name + "``, but I have access on it.|left\nend_dialog|lock_edit|Cancel|Remove My Access|");
							p.CreatePacket(peer);
						}
						else {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("I'm `4unable`` to pick the lock.");
							p.Insert(0);
							p.Insert(1);
							p.CreatePacket(peer);
						}
						packet_(peer, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
						return true;
					}
				}
			}
			else if (block_->locked and items[p_].blockType != BlockTypes::CONSUMABLE) {
				WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
				string owner_name = block2_->owner_name, user_name = pInfo(peer)->tankIDName;
				if (owner_name != user_name and not pInfo(peer)->dev) {
					if (find(block2_->admins.begin(), block2_->admins.end(), user_name) == block2_->admins.end() and not block2_->open_to_public and not pInfo(peer)->dev) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnPlayPositioned");
						p.Insert("audio/punch_locked.wav");
						if (not pInfo(peer)->invis) {
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == name_) {
									p.CreatePacket(currentPeer);
								}
							}
						}
						else {
							p.CreatePacket(peer);
						}
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("That area is owned by " + block2_->owner_name);
							p.Insert(0);
							p.Insert(1);
							p.CreatePacket(peer);
						}
						return true;
					}
					if (items[p_].blockType == BlockTypes::LOCK) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("`w" + block2_->owner_named + "`` allows public building here, but no locks.");
						p.Insert(0);
						p.Insert(0);
						p.CreatePacket(peer);
						{
							gamepacket_t p(0, pInfo(peer)->netID);
							p.Insert("OnPlayPositioned");
							p.Insert("audio/punch_locked.wav");
							if (not pInfo(peer)->invis) {
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == name_) {
										p.CreatePacket(currentPeer);
									}
								}
							}
							else {
								p.CreatePacket(peer);
							}
						}
						return true;
					}
				}
			}
			else if (not world_->owner_name.empty() and items[p_].blockType != BlockTypes::CONSUMABLE) {
				string owner_name = world_->owner_name, user_name = pInfo(peer)->tankIDName;
				if (owner_name != user_name and not pInfo(peer)->dev) {
					if (items[t_].blockType == BlockTypes::LOCK) {
						if (find(world_->admins.begin(), world_->admins.end(), user_name) != world_->admins.end()) {
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_label|small|This lock is owned by `w" + world_->owner_name + "``, but I have access on it.|left\nend_dialog|lock_edit|Cancel|Remove My Access|");
							p.CreatePacket(peer);
						}
						else {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("I'm `4unable`` to pick the lock.");
							p.Insert(0);
							p.Insert(1);
							p.CreatePacket(peer);
						}
						packet_(peer, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
						return true;
					}
					if (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), user_name) == world_->admins.end() and not world_->open_to_public and not pInfo(peer)->dev) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnPlayPositioned");
						p.Insert("audio/punch_locked.wav");
						if (not pInfo(peer)->invis) {
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == name_) {
									p.CreatePacket(currentPeer);
								}
							}
						}
						else {
							p.CreatePacket(peer);
						}
						{
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("That area is owned by " + (world_->owner_named.substr(0, 2) == "`o" ? "`w" + world_->owner_name : world_->owner_named) + "``");
							p.Insert(0);
							p.Insert(1);
							p.CreatePacket(peer);
						}
						return true;
					}
					if (items[p_].blockType == BlockTypes::LOCK) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("`w" + world_->owner_named + "`` allows public building here, but no locks.");
						p.Insert(0);
						p.Insert(0);
						p.CreatePacket(peer);
						{
							gamepacket_t p(0, pInfo(peer)->netID);
							p.Insert("OnPlayPositioned");
							p.Insert("audio/punch_locked.wav");
							if (not pInfo(peer)->invis) {
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == name_) {
										p.CreatePacket(currentPeer);
									}
								}
							}
							else {
								p.CreatePacket(peer);
							}
						}
						return true;
					}
				}
			} if (world_->owner_name != pInfo(peer)->tankIDName) {
				if (items[t_].magplant or items[t_].item_sucker) {
					switch (t_) {
					case 6948: case 5638: case 6946:
					{
						if (not world_->owner_name.empty()) {
							bool ar_turi_mag = false;
							{
								int c_ = 0;
								if (block_->id != 0) {
									modify_inventory(peer, 5640, c_);
									if (c_ != 0) {
										if (pInfo(peer)->magnetron_x == x_ and pInfo(peer)->magnetron_y == y_ and pInfo(peer)->magnetron_id == block_->id) {
											ar_turi_mag = true;
										}
									}
								}
							}
							bool dont_give = false;
							if (items[block_->id].collisionType != 1 and items[block_->id].blockType != BACKGROUND and items[block_->id].blockType != SEED and not items[block_->id].farmable or items[block_->id].rarity == 999) {
								dont_give = true;
							}
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + (block_->id == 0 ? "\nadd_textbox|There is no item selected |left|" : "\nadd_label_with_icon|small|`2" + items[block_->id].name + "``|left|" + to_string(block_->id) + "|") + (block_->fg == 5638 and not block_->magnetron ? "\nadd_textbox|Building mode: `6DISABLED``|left|" : "\nadd_textbox|Building mode: `5ACTIVE``|left|\nadd_textbox|Use the " + items[5640].name + " to build `2" + items[block_->id].name + "`` directly from the " + items[block_->fg].name + "'s storage.|left|" + (not ar_turi_mag and not dont_give ? "\nadd_button|getplantationdevice|Get Remote|noflags|0|0|" : "") + "") + "\nend_dialog|itemsucker_block|Close||");
							p.CreatePacket(peer);
						}
						break;
					}
					case 6950: case 6952:
					{
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("add_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nadd_smalltext|The device will consume 2300 Gems/hr while active!|left|\nadd_smalltext|Current Fuel = `w" + to_string(block_->pr) + "/8,000``|left|\nend_dialog|autoactionblock|Close||\nadd_quick_exit|");
						p.CreatePacket(peer);
						break;
					}
					}
					if (not items[t_].item_sucker) return true;
				}
			}
			if (items[t_].can_be_changed_two_types) {
				if (world_->owner_name.empty() and not block_->locked) {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|This object has additional properties to edit if in a locked area.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|boombox_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				else {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_checkbox|checkbox_public|Usable by public|" + (block_->flags & 0x00800000 ? "1" : "0") + "\nadd_checkbox|checkbox_silence|Silenced|" + (block_->flags & 0x02000000 ? "1" : "0") + "\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|boombox_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				break;
			}
			if (items[t_].xeno) {
				if (world_->owner_name.empty() and not block_->locked) {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|This object has additional properties to edit if in a locked area.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|xenonite_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				else {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|This object has additional properties to edit if in a locked area.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|xenonite_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				break;
			}
			if (items[t_].mannequin) {
				string ex = "";
				if (block_->mannequin.c_head != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_head) + "|" + items[block_->mannequin.c_head].name + "|0|";
				if (block_->mannequin.c_shirt != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_shirt) + "|" + items[block_->mannequin.c_shirt].name + "|0|";
				if (block_->mannequin.c_pants != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_pants) + "|" + items[block_->mannequin.c_pants].name + "|0|";
				if (block_->mannequin.c_feet != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_feet) + "|" + items[block_->mannequin.c_feet].name + "|0|";
				if (block_->mannequin.c_mask != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_mask) + "|" + items[block_->mannequin.c_mask].name + "|0|";
				if (block_->mannequin.c_hand != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_hand) + "|" + items[block_->mannequin.c_hand].name + "|0|";
				if (block_->mannequin.c_back != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_back) + "|" + items[block_->mannequin.c_back].name + "|0|";
				if (block_->mannequin.c_hair != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_hair) + "|" + items[block_->mannequin.c_hair].name + "|0|";
				if (block_->mannequin.c_neck != 0) ex += "\nadd_checkbox|checkbox_" + to_string(block_->mannequin.c_neck) + "|" + items[block_->mannequin.c_neck].name + "|0|";
				if (not ex.empty()) ex += "\nadd_spacer|small|\nadd_button|clear_selected|`4Remove Selected Items``|noflags|0|0|\nadd_button|clear|`4Remove All Items``|noflags|0|0|";
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|To dress, select a clothing item then use on the mannequin. To remove clothes, punch it or select which item to remove.<CR><CR>It will go into your backpack if you have room.|" + ex + "\nadd_textbox|<CR><CR>What would you like to write on its sign?``|left|\nadd_text_input|sign_text||" + block_->txt + "|128|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|mannequin_edit|Cancel|OK|");
				p.CreatePacket(peer);
				break;
			}
			if (items[t_].dshelf) {
				bool can_take = (block_->shelf_1 != 0 or block_->shelf_2 != 0 or block_->shelf_3 != 0 or block_->shelf_4 != 0 ? true : false);
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\n" + (block_->shelf_2 != 0 ? "add_item_picker|replace2|Item 1: `2" + items[block_->shelf_2].name + "``|Select any item to display|" : "add_item_picker|replace2|`4Display an item``|Select any item to display|") + "\n" + (block_->shelf_1 != 0 ? "add_item_picker|replace1|Item 2: `2" + items[block_->shelf_1].name + "``|Select any item to display|" : "add_item_picker|replace1|`4Display an item``|Select any item to display|") + "\n" + (block_->shelf_3 != 0 ? "add_item_picker|replace3|Item 3: `2" + items[block_->shelf_3].name + "``|Select any item to display|" : "add_item_picker|replace3|`4Display an item``|Select any item to display|") + "\n" + (block_->shelf_4 != 0 ? "add_item_picker|replace4|Item 4: `2" + items[block_->shelf_4].name + "``|Select any item to display|" : "add_item_picker|replace4|`4Display an item``|Select any item to display|") + (can_take ? "\nadd_button|remove|Take All Items|noflags|0|0|" : "") + "\nend_dialog|dispshelf|Okay||");
				p.CreatePacket(peer);
				break;
			}
			if (items[t_].vipentrance) {
				if (world_->owner_name.empty() and not block_->locked) {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|This object has additional properties to edit if in a locked area.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|vip_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				else {
					string add_ = "";
					for (string own : block_->admins) {
						try {
							ifstream ifs("players/" + own + "_.json");
							if (ifs.is_open()) {
								string name_ = own;
								json j;
								ifs >> j;
								if (j["mod"] == 1) name_ = "`#@" + own;
								if (j["dev"] == 1) name_ = "`9@" + own;
								add_ += "\nadd_checkbox|checkbox_" + own + "|" + name_ + "``|1";
							}
							ifs.close();
						}
						catch (exception) {
							continue;
						}
					}
					if (add_.empty()) add_ = "\nadd_label|small|Nobody!|left";
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wVIP list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + add_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to enter|" + (block_->limit_admins ? "1" : "0") + "\nend_dialog|vip_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				break;
			}
			if (items[t_].portrait) {
				bool has_enough = false;
				int red = 0, yellow = 0, green = 0, aqua = 0, blue = 0, purple = 0, charcoal = 0, varnish = 0;
				{
					modify_inventory(peer, 3478, red);
					modify_inventory(peer, 3480, yellow);
					modify_inventory(peer, 3482, green);
					modify_inventory(peer, 3484, aqua);
					modify_inventory(peer, 3486, blue);
					modify_inventory(peer, 3488, purple);
					modify_inventory(peer, 3490, charcoal);
					modify_inventory(peer, 3492, varnish);
					if (red >= 2 and yellow >= 2 and green >= 2 and aqua >= 2 and blue >= 2 and purple >= 2 and charcoal >= 2 and varnish >= 2) {
						has_enough = true;
					}
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				string erase = (varnish >= 4 ? "\nadd_button|erase|Erase Painting|noflags|0|0|\nadd_smalltext|`5(Erasing costs 4 Paint Bucket - Varnish)``|left|" : "\nadd_textbox|You'll need 4 Paint Bucket - Varnish to erase this.|left|");
				string tratata = (has_enough ? "\nadd_player_picker|playerNetID|`wPaint Someone``|\nadd_smalltext|`5(Painting costs 2 Paint Bucket of each color)``|left|" : "\nadd_textbox|You'll need 2 of each color of Paint Bucket to paint someone.|left|");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "" + (block_->portrait.c_skin == 0 and block_->portrait.c_face == 0 and block_->portrait.c_hair == 0 and block_->portrait.c_head == 0 ? ("\nadd_textbox|The canvas is blank.|left|" + tratata) : "\nadd_textbox|This is a lovely portrait of a Growtopian.|left|" + erase + "\nadd_text_input|artname|Title:|" + block_->txt + "|60|\nadd_smalltext|If you'd like to touch up the painting slightly, you could change the expression:|left|\nadd_checkbox|chk1|Unconcerned|" + (block_->portrait.c_expression == 1 ? "1" : "0") + "|\nadd_checkbox|chk2|Happy|" + (block_->portrait.c_expression == 2 ? "1" : "0") + "|\nadd_checkbox|chk3|Sad|" + (block_->portrait.c_expression == 3 ? "1" : "0") + "|\nadd_checkbox|chk4|Tongue Out|" + (block_->portrait.c_expression == 4 ? "1" : "0") + "|\nadd_checkbox|chk5|Surprised|" + (block_->portrait.c_expression == 5 ? "1" : "0") + "|\nadd_checkbox|chk6|Angry|" + (block_->portrait.c_expression == 6 ? "1" : "0") + "|\nadd_checkbox|chk7|Talking|" + (block_->portrait.c_expression == 7 ? "1" : "0") + "|\nadd_checkbox|chk9|Ecstatic|" + (block_->portrait.c_expression == 9 ? "1" : "0") + "|\nadd_checkbox|chk11|Wry|" + (block_->portrait.c_expression == 11 ? "1" : "0") + "|\nadd_checkbox|chk12|Sleeping|" + (block_->portrait.c_expression == 12 ? "1" : "0") + "|\nadd_checkbox|chk14|Winking|" + (block_->portrait.c_expression == 14 ? "1" : "0") + "|\nadd_checkbox|chk16|Trolling|" + (block_->portrait.c_expression == 16 ? "1" : "0") + "\nadd_checkbox|chk18|Vampire|" + (block_->portrait.c_expression == 18 ? "1" : "0") + "\nadd_checkbox|chk22|Underwater|" + (block_->portrait.c_expression == 22 ? "1" : "0") + "|") + "\nend_dialog|portrait|Cancel|Update|");
				p.CreatePacket(peer);
				break;
			}
			if (t_ == 2452) {
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wClothing Compactor``|left|2452|\nadd_textbox|Use (almost) any clothing on this device to crush it down, permanently destroying it. If you just have extra clothes taking up space, crush 'em!|left|\nadd_textbox|The results may surprise you! But probably you will get seeds or gems.|left|\nend_dialog|compactor|Thanks for the info!||");
				p.CreatePacket(peer);
				break;
			}
			if (t_ == 4322) {
				string tools = "";
				for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].count >= 20 && pInfo(peer)->inv[i_].id == 1258 || pInfo(peer)->inv[i_].id == 1260 || pInfo(peer)->inv[i_].id == 1262 || pInfo(peer)->inv[i_].id == 1264 || pInfo(peer)->inv[i_].id == 1266 || pInfo(peer)->inv[i_].id == 1268 || pInfo(peer)->inv[i_].id == 1270 || pInfo(peer)->inv[i_].id == 4308 || pInfo(peer)->inv[i_].id == 4310 || pInfo(peer)->inv[i_].id == 4312 || pInfo(peer)->inv[i_].id == 4314 || pInfo(peer)->inv[i_].id == 4316 || pInfo(peer)->inv[i_].id == 4318) tools += "\nadd_button_with_icon|tool" + to_string(pInfo(peer)->inv[i_].id) + "|`$" + items[pInfo(peer)->inv[i_].id].ori_name + "``|noflags|" + to_string(pInfo(peer)->inv[i_].id) + "|" + to_string(pInfo(peer)->inv[i_].count) + "|";
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`9Autoclave``|left|4322|\nadd_spacer|small|\nadd_textbox|With this device, you can exchange 20 of any one surgical tool for 1 each of all the other tools. Choose an instrument to dispose of:|left|" + (tools != "" ? "\ntext_scaling_string|Surgical Defibrillator|" + tools + "\nadd_button_with_icon||END_LIST|noflags|0||" : "") + "\nend_dialog|autoclave|Cancel||");
				p.CreatePacket(peer);
				break;
			}
			if (items[t_].easel) {
				bool has_enough = false;
				int red = 0, yellow = 0, green = 0, aqua = 0, blue = 0, purple = 0, charcoal = 0, varnish = 0;
				{
					modify_inventory(peer, 3478, red);
					modify_inventory(peer, 3480, yellow);
					modify_inventory(peer, 3482, green);
					modify_inventory(peer, 3484, aqua);
					modify_inventory(peer, 3486, blue);
					modify_inventory(peer, 3488, purple);
					modify_inventory(peer, 3490, charcoal);
					modify_inventory(peer, 3492, varnish);
					if (red >= 2 and yellow >= 2 and green >= 2 and aqua >= 2 and blue >= 2 and purple >= 2 and charcoal >= 2 and varnish >= 2) {
						has_enough = true;
					}
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|The canvas is blank.|left|" + (block_->id != 0 ? "\nadd_textbox|This is a lovely still-life of " + items[block_->id].name + ".|left|" + (varnish < 4 ? "\nadd_smalltext|You'll need 4 Paint Bucket - Varnish to erase this.|left|" : "\nadd_button|erase|Erase Painting|noflags|0|0|\nadd_smalltext|`5(Erasing costs 4 Paint Bucket - Varnish)``|left|") : (not has_enough ? "\nadd_textbox|You'll need 2 of each color of Paint Bucket to paint something.|left|" : "\nadd_item_picker|paint|`wPaint Something``|Select an item to paint|")) + "\nadd_text_input|artname|Signed:|" + block_->txt + "|60|\nend_dialog|artcanvas|Cancel|Update|");
				p.CreatePacket(peer);
				break;
			}
			if (items[t_].entrance or items[t_].can_be_changed_to_public) {
				if (world_->owner_name.empty() and not block_->locked) {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|This object has additional properties to edit if in a locked area.|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|switcheroo_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				else {
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_checkbox|checkbox_public|" + (items[t_].can_be_changed_to_public ? "Usable by public" : "Is open to public") + "|" + (block_->flags & 0x00800000 ? "1" : "0") + "\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|switcheroo_edit|Cancel|OK|");
					p.CreatePacket(peer);
				}
				break;
			}
			if (t_ == 1436 || t_ == 8246 || t_ == 10258) {
				pInfo(peer)->lastwrenchb = t_;
				string logs = "", settings = "", a = "";
				bool show_item_taking = false, show_item_dropping = false, show_people_entering = false, show_people_exiting = false, dont_show_owner = false, dont_show_admins = false, dont_show_noaccess = false;
				for (int i_ = 0; i_ < world_->cctv.size(); i_++) if (world_->cctv[i_].x == x_ and world_->cctv[i_].y == y_) logs += world_->cctv[i_].logs;
				for (int i_ = 0; i_ < world_->cctv_settings.size(); i_++) if (world_->cctv_settings[i_].x == x_ and world_->cctv_settings[i_].y == y_) settings = a + "\nadd_checkbox|checkbox_showpick|Show Item Taking|" + (world_->cctv_settings[i_].show_item_taking ? "1" : "0") + "\nadd_checkbox|checkbox_itemdrop|Show Item Dropping|" + (world_->cctv_settings[i_].show_item_dropping ? "1" : "0") + "\nadd_checkbox|checkbox_showenter|Show People Entering|" + (world_->cctv_settings[i_].show_people_entering ? "1" : "0") + "\nadd_checkbox|checkbox_showexit|Show People Exiting|" + (world_->cctv_settings[i_].show_people_exiting ? "1" : "0") + "\nadd_checkbox|checkbox_noshowowner|Don't Show Owner|" + (world_->cctv_settings[i_].dont_show_owner ? "1" : "0") + "\nadd_checkbox|checkbox_noshowadmin|Don't Show Admins|" + (world_->cctv_settings[i_].dont_show_admins ? "1" : "0") + "\nadd_checkbox|checkbox_noshowother|Don't Show People Without Access|" + (world_->cctv_settings[i_].dont_show_noaccess ? "1" : "0");
				if (settings == "") {
					WorldCCTVSettings cctvs_{};
					cctvs_.x = pInfo(peer)->lastwrenchx, cctvs_.y = pInfo(peer)->lastwrenchy;
					cctvs_.show_item_taking = false, cctvs_.show_item_dropping = false, cctvs_.show_people_entering = true, cctvs_.show_people_exiting = false, cctvs_.dont_show_owner = dont_show_owner == 1 ? true : false, cctvs_.dont_show_admins = false, cctvs_.dont_show_noaccess = false;
					world_->cctv_settings.push_back(cctvs_);
					WorldCCTV cctv_{};
					cctv_.x = pInfo(peer)->lastwrenchx, cctv_.y = pInfo(peer)->lastwrenchy;
					cctv_.logs = "";
					world_->cctv.push_back(cctv_);
					settings = "\nadd_checkbox|checkbox_showpick|Show Item Taking|0\nadd_checkbox|checkbox_itemdrop|Show Item Dropping|0\nadd_checkbox|checkbox_showenter|Show People Entering|1\nadd_checkbox|checkbox_showexit|Show People Exiting|0\nadd_checkbox|checkbox_noshowowner|Don't Show Owner|0\nadd_checkbox|checkbox_noshowadmin|Don't Show Admins|0\nadd_checkbox|checkbox_noshowother|Don't Show People Without Access|0";
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|" + (logs == "" ? "\nadd_textbox|The camera log is empty.|left|" : logs) + "" + settings + "" + (logs != "" ? "\nadd_button|clear|`4Clear Log``|noflags|0|0|" : "") + "\nend_dialog|camera_edit||OK|\nadd_quick_exit|");
				p.CreatePacket(peer);
				break;
			}
			if (t_ == 4296 || t_ == 8558) {
				if (has_playmod(pInfo(peer), "Malpractice")) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("I know it's just a robot, but the authorities don't even trust you operating on that with your malpractice issues.");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(peer);
				}
				else {
					pInfo(peer)->lastwrenchb = t_;
					gamepacket_t p;
					p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`9" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nadd_smalltext|Surgeon Skill: " + to_string(pInfo(peer)->surgery_skill) + "|left|\nadd_textbox|Are you sure you want to perform surgery on this robot? Whether you succeed or fail, the robot will be destroyed in the process.|left|\nend_dialog|surge|Cancel|Okay!|"), p.CreatePacket(peer);
				}
				break;
			}
			if (t_ == 4582) {
				gamepacket_t p;
				p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wFood Grinder``|left|4582|\nadd_textbox|Use items on here to try to grind them up into tasty food. Only certain things can be ground up.|left|\nadd_textbox|You might be surprised what you can grind!|left|\nend_dialog|grinder|Thanks for the info!||"), p.CreatePacket(peer);
				break;
			}
			else if (t_ == 9270) {
				load_vendhub(peer, world_, block_);
			}
			if (t_ == 2646) {
				if (block_->spotlight != "") {
					string spotlight = "";
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
						if (block_->spotlight == pInfo(currentPeer)->tankIDName) spotlight = pInfo(currentPeer)->tankIDName;
					}
					block_->spotlight = spotlight;
				}
				gamepacket_t p;
				p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wShine the Spotlight!``|left|2646|\nadd_spacer|small|\nadd_textbox|" + (block_->spotlight == "" ? "The light is currently off." : "The light is shining on " + block_->spotlight + ".") + "|left|\nadd_spacer|small|\nadd_player_picker|ID|`wChoose a " + (block_->spotlight == "" ? "superstar" : "new star") + "``|" + (block_->spotlight == "" ? "" : "\nadd_button|off|Turn it off|noflags|0|0|") + "\nend_dialog|2646|Nevermind||"), p.CreatePacket(peer);
				break;
			}
			if (items[t_].magplant or items[t_].item_sucker) {
				switch (t_) {
				case 6948: case 5638: case 6946:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert(get_sucker(peer, world_, block_, x_, y_));
					p.CreatePacket(peer);
					break;
				}
				case 6950: case 6952:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("add_label_with_icon|big|`w" + items[block_->fg].name + "``|left|" + to_string(block_->fg) + "|\nadd_spacer|small|\nadd_smalltext|The device will consume 2300 Gems/hr while active!|left|\nadd_smalltext|Current Fuel = `w" + to_string(block_->pr) + "/8,000``|left|" + (block_->pr < 8000 ? "\nadd_smalltext|Refuel this with gems!|left|\nadd_text_input|refillfuel|Add Gems:|0|5|\nadd_button|addfuel|`wAdd Gems``|noflags|0|0|" : "") + "\nadd_spacer|small|\nadd_smalltext|" + (block_->id == 0 ? "No block type selected!" : "Target block is: `2" + items[block_->id].name + "``") + "|left|\nadd_item_picker|selecttarget|`wChoose Target Item``|Choose the target item!|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|autoactionblock|Close|OK|\nadd_quick_exit|");
					p.CreatePacket(peer);
					break;
				}
				}
				break;
			}
			switch (items[t_].blockType) {
			case BlockTypes::WEATHER:
			{
				switch (t_) {
				case 3694:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|Adjust the color of your heat wave here, by including 0-255 of Red, Green, and Blue.|left|\nadd_text_input|red|Red|" + to_string(block_->r) + "|3|\nadd_text_input|green|Green|" + to_string(block_->g) + "|3|\nadd_text_input|blue|Blue|" + to_string(block_->b) + "|3|\nend_dialog|weatherspcl|Cancel|Okay|");
					p.CreatePacket(peer);
					break;
				}
				case 5000:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|You can scan any Background Block to set it up in your weather machine.|left|\nadd_item_picker|choose|Item: `2" + items[(block_->id != 0 ? block_->id : 14)].name + "``|Select any Background Block|\nend_dialog|weatherspcl|Cancel|Okay|");
					p.CreatePacket(peer);
					break;
				}
				case 3832:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_item_picker|choose|Item: `2" + items[(block_->id != 0 ? block_->id : 14)].name + "``|Select any item to rain down|\nadd_text_input|gravity|Gravity:|" + to_string(block_->gravity) + "|5|\nadd_checkbox|spin|Spin Items|" + (block_->spin ? "1" : "0") + "\nadd_checkbox|invert|Invert Sky Colors|" + (block_->invert ? "1" : "0") + "\nend_dialog|weatherspcl|Cancel|Okay|");
					p.CreatePacket(peer);
					break;
				}
				}
				break;
			}
			case BlockTypes::DISPLAY:
			{
				string owner_name = world_->owner_name, user_name = pInfo(peer)->tankIDName;
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_spacer|small|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_textbox|" + (block_->id != 0 ? "A " + items[block_->id].ori_name + " is on display here." : "The Display Block is empty. Use an item on it to display the item!") + "|left|" + (block_->id != 0 and user_name == owner_name or owner_name.empty() ? "\nend_dialog|displayblock|Leave it|Pick it up|" : "\nend_dialog|displayblock|Okay||"));
				p.CreatePacket(peer);
				break;
			}
			case BlockTypes::LOCK:
			{
				if (t_ == 202 or t_ == 204 or t_ == 206 or t_ == 4994) {
					string access_list_ = "";
					for (int i_ = 0; i_ < block_->admins.size(); i_++) {
						access_list_ += "\nadd_checkbox|checkbox_/" + block_->admins[i_] + "|`w" + block_->admins[i_] + "``|1";
					}
					if (access_list_.empty())
						access_list_ = "\nadd_label|small|Currently, you're the only one with access.``|left";
					if (t_ == 4994) {
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wAccess list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to Build or Break|" + (block_->open_to_public ? "1" : "0") + "\nadd_checkbox|checkbox_ignore|Ignore empty air|" + (block_->empty_air ? "1" : "0") + "\nadd_button|recalcLock|`wRe-apply lock``|noflags|0|0|\nadd_spacer|small|\nadd_smalltext|This lock allows Building or Breaking.|left|\nadd_smalltext|(ONLY if 'Allow anyone to Build or Break' is checked above)!|left|\nadd_spacer|small|\nadd_smalltext|Leaving this box unchecked only allows Breaking.|left|\nadd_checkbox|checkbox_buildonly|Only Allow Building!|" + (block_->build_only ? "1" : "0") + "\nadd_smalltext|People with lock access can both build and break unless you check below. The lock owner can always build and break.|left|\nadd_checkbox|checkbox_admins|Admins Are Limited|" + (block_->limit_admins ? "1" : "0") + "\nend_dialog|lock_edit|Cancel|OK|");
						p.CreatePacket(peer);
					}
					else {
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wAccess list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to Build and Break|" + (block_->open_to_public ? "1" : "0") + "\nadd_checkbox|checkbox_ignore|Ignore empty air|" + (block_->empty_air ? "1" : "0") + "\nadd_button|recalcLock|`wRe-apply lock``|noflags|0|0|\nend_dialog|lock_edit|Cancel|OK|");
						p.CreatePacket(peer);
					}
				}
				else {
					if (t_ == 5814 and world_->guild_id != 0) {
						send_edit_lock(peer, world_, t_, x_, y_);
					}
					else {
						string access_list_ = "";
						for (int i_ = 0; i_ < world_->admins.size(); i_++) {
							access_list_ += "\nadd_checkbox|checkbox_/" + world_->admins[i_] + "|`w" + world_->admins[i_] + "``|1";
						}
						if (access_list_.empty())
							access_list_ = "\nadd_label|small|Currently, you're the only one with access.``|left";
						string world_key = "\nadd_button|getKey|Get World Key|noflags|0|0|";
						int c_ = 0;
						modify_inventory(peer, 1424, c_);
						if (c_ != 0) {
							world_key = "";
						}
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						string e_ = "";
						//" + (t_ == 4802 ? "\nadd_label|small|Ye Royal Options|left\nadd_checkbox|checkbox_silence|Silence, Peasants!|" + e_ + (world_->silence ? "1" : "0") + "\nadd_checkbox|checkbox_rainbows|Royal Rainbows!|" + (world_->rainbows ? "1" : "0") : "") + "
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_label|small|`wAccess list:``|left\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nadd_spacer|small|" + access_list_ + "\nadd_spacer|small|\nadd_player_picker|playerNetID|`wAdd``|\nadd_checkbox|checkbox_public|Allow anyone to Build and Break|" + (world_->open_to_public ? "1" : "0") + "\nadd_checkbox|checkbox_vending|Allow admins to edit vending|" + (world_->v_p ? "1" : "0") + "\nadd_checkbox|checkbox_disable_music|Disable Custom Music Blocks|" + (world_->disable_music_blocks ? "1" : "0") + "\nadd_text_input|tempo|Music BPM|" + to_string(world_->music_bpm) + "|3|\nadd_checkbox|checkbox_disable_music_render|Make Custom Music Blocks invisible|" + (world_->make_music_blocks_invisible ? "1" : "0") + (not pInfo(peer)->home_world.empty() ? "\nadd_smalltext|Your current home world is: " + pInfo(peer)->home_world + "|left|" : "") + "\nadd_checkbox|checkbox_set_as_home_world|Set as Home World|" + (pInfo(peer)->home_world == world_->name ? "1" : "0") + (t_ == 4802 ? "\nadd_label|small|Ye Royal Options|left\nadd_checkbox|checkbox_silence|Silence, Peasants!|" + e_ + (world_->silence ? "1" : "0") + "\nadd_checkbox|checkbox_rainbows|Royal Rainbows!|" + (world_->rainbows ? "1" : "0") : "") + "|\nadd_text_input|minimum_entry_level|World Level: |" + to_string(world_->entry_level) + "|3|\nadd_smalltext|Set minimum world entry level.|\nadd_button|sessionlength_dialog|`wSet World Timer``|noflags|0|0|\nadd_button|changecat|`wCategory: None``|noflags|0|0|" + world_key + "\nend_dialog|lock_edit|Cancel|OK|");
						p.CreatePacket(peer);
					}
				}
				break;
			}
			case BlockTypes::SIGN:
			{
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_textbox|" + (t_ == 1684 ? "Enter an ID. You can use this as a destination for Doors.``" : "What would you like to write on this sign?``") + "|left|\nadd_text_input|sign_text||" + (t_ == 1684 ? block_->door_id : block_->txt) + "|128|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|sign_edit|Cancel|OK|");
				p.CreatePacket(peer);
				break;
			}
			case BlockTypes::STORAGE:
			{
				if (pInfo(peer)->tankIDName == world_->owner_name || pInfo(peer)->dev == 1) {
					int got = 0;
					modify_inventory(peer, 1424, got);
					modify_inventory(peer, 1424, got *= -1);
					pInfo(peer)->lastwrenchb = t_;
					string dbox_item = "\nadd_spacer|small|\ntext_scaling_string|aaaaaaaaaaaaaaa|";
					int itemcount = 0;
					for (int i_ = 0; i_ < world_->sbox1.size(); i_++) if (world_->sbox1[i_].x == x_ and world_->sbox1[i_].y == y_) itemcount++, dbox_item += "\nadd_button_with_icon|itm" + to_string(itemcount) + "|" + items[world_->sbox1[i_].id].name + "|frame|" + to_string(world_->sbox1[i_].id) + "|" + to_string(world_->sbox1[i_].count) + "|";
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[t_].name + "``|left|" + to_string(t_) + "|" + (dbox_item.size() > 56 ? dbox_item + "\nadd_button_with_icon||END_LIST|noflags|0||" : "") + "\nadd_textbox|`w" + to_string(itemcount) + "/" + to_string(items[pInfo(peer)->lastwrenchb].box_size) + "`` items stored.|left|" + (itemcount >= items[pInfo(peer)->lastwrenchb].box_size ? "" : "\nadd_spacer|small|\nadd_item_picker|itemid|`wDeposit Item``|Choose an item to store|") + "\nend_dialog|storageboxxtreme|Exit||\nadd_quick_exit|\n");
					p.CreatePacket(peer);
				}
				break;
			}
			case BlockTypes::DOOR: case BlockTypes::PORTAL:
			{
				gamepacket_t p;
				p.Insert("OnDialogRequest");
				string open_ = (block_->open ? "1" : "0");
				p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wEdit " + items[t_].name + "``|left|" + to_string(t_) + "|\nadd_text_input|door_name|Label|" + block_->txt + "|100|\nadd_text_input|door_target|Destination|" + block_->door_destination + "|24|\nadd_smalltext|Enter a Destination in this format: `2WORLDNAME:ID``|left|\nadd_smalltext|Leave `2WORLDNAME`` blank (:ID) to go to the door with `2ID`` in the `2Current World``.|left|\nadd_text_input|door_id|" + (t_ == 762 ? "Password" : "ID") + "|" + block_->door_id + "|11|\nadd_smalltext|Set a unique `2ID`` to target this door as a Destination from another!|left|" + (not world_->owner_name.empty() ? "\nadd_checkbox|checkbox_locked|Is open to public|" + open_ + "" : "") + "\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nend_dialog|door_edit|Cancel|OK|");
				p.CreatePacket(peer);
				break;
			}
			}
			// wrench
			break;
		}
		default:
		{
			if (items[block_->fg].charger and p_ == 2286 or p_ == 2204) {
				if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->superdev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) break;
				if (p_ == 2204) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("Your " + items[p_].name + " doesn't need charging!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else if (block_->id != 0) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("That charger is already in use!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else {
					int c_ = -1;
					if (modify_inventory(peer, p_, c_) == 0) {
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnPlayPositioned");
						p.Insert("audio/mlaunch.wav");
						block_->id = p_, block_->planted = time(nullptr) + 3600;
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						PlayerMoving data_effect_{};
						data_effect_.packetType = 19;
						data_effect_.punchX = p_;
						data_effect_.punchY = pInfo(peer)->netID;
						data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
						BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
						raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 4;
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								p.CreatePacket(currentPeer);
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								send_raw(currentPeer, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, blc, raw_effect;
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
					}
				}
				return true;
			}
			if (t_ == 5714) {
				pInfo(peer)->lastwrenchb = t_;
				int item = p_, got = 0;
				modify_inventory(peer, item, got);
				if (got == 0) break;
				if (items[item].untradeable == 1 || item == 9770 or item == 10362 or item == 9846 or item == 9772 or item == 5480 or item == 1424 || item == 1424 || items[item].rarity >= 363 || items[item].rarity == 0 || items[item].rarity < 1) {
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("I'm sorry, we can't accept items without rarity!"), p.CreatePacket(peer);
				}
				else {
					pInfo(peer)->lastchoosenitem = item;
					gamepacket_t p;
					p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGiant Pot O' Gold``|left|5714|\nadd_spacer|small|\nadd_textbox|How many `2" + items[item].name + "`` (rarity " + setGems(items[item].rarity) + ") do you want to drop in the pot? You are carrying " + to_string(got) + " right now.|left|\nadd_text_input|amt||" + to_string(got) + "|3|\nadd_textbox|Thanks for donating, the pot gets ever fuller!|left|\nend_dialog|giantpotogold|Exit|Donate!|");
					p.CreatePacket(peer);
				}
			}
			else if (t_ == 10656) {
				int item = p_, got = 0;
				modify_inventory(peer, item, got);
					gamepacket_t p;
					if (p_ == 3402 && got >= 5) {
						p.Insert("OnDialogRequest");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wWell of Love``|left|10656|\nadd_spacer|small|\nadd_textured_progress_bar|interface/large/gui_event_bar.rttex|0|2|`wLove: " + to_string(block_->shelf_1) + "/200|" + to_string(block_->shelf_1) + "|200``|relative|1|0.95|0|1000|64|0.01\nadd_spacer|small|\nadd_textbox|Give 5 Golden Booty Chests to receive the `2ONE best prize``, and to fill up the well. Once the well is full it will provide one reward with a `53.25% chance`` of getting one of these `5Epic`` items:|left|\nadd_spacer|small|\nadd_smalltext|Do you want to give `25`` to the well? (You have " + to_string(got) + ")|left|\nadd_button|wishing_well|Give Golden Booty Chests|no_flags|0|0|\nadd_spacer|small|\nadd_textbox|Once the well is full it will provide one reward with a `53.25% chance`` of getting one of these `5Epic`` items:|left|\nadd_label_with_icon|small| - `5Golden Heart Crystal``|left|1458|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Stained Glass Crown``|left|11672|\nadd_label_with_icon|small| - `6EXCLUSIVE`` `5Cotton Candy Cape``|left|13140|\nadd_spacer|small|\nadd_textbox|... or a `5Pure Love Essence`` that doubles the chance of getting a Golden Heart Crystal when opening Golden Booty Chests, Super Golden Booty Chests and Heartstones.|left|\nadd_spacer|small|\nend_dialog|wishing_well|Thanks for the info!||");
					}
				else {
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					if (p_ != 3402) p.Insert("`5[`2The Well of Love only accepts Golden Booty Chests``]``");
					if (p_ == 3402 && got < 5) p.Insert("`5[`2The Well of Love only accepts minimum 5 of Golden Booty Chests``]``");
					p.Insert(0), p.Insert(0);
				}
				p.CreatePacket(peer);
			}
			if (t_ == 4264) {
				pInfo(peer)->lastwrenchb = t_;
				int item = p_, got = 0;
				modify_inventory(peer, item, got);
				if (got <= 0) break;
				if (items[item].untradeable == 1 || item == 5816 || item == 1424 || items[item].rarity >= 999 || items[item].rarity < 1) {
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("I'm sorry, we can't accept items without rarity!"), p.CreatePacket(peer);
				}
				else {
					pInfo(peer)->lastchoosenitem = item;
					gamepacket_t p;
					p.Insert("OnDialogRequest"), p.Insert(
						"set_default_color|`o\n"
						"add_label_with_icon|big|`wStuff-4-Toys Box``|left|4264|\n"
						"add_spacer|small|\n"
						"add_textbox|How many `2" + items[item].name + "`` (rarity " + setGems(items[item].rarity) + ") do you want to donate to our program? You are carrying " + to_string(got) + " right now.|left|\n"
						"add_text_input|donate_rarity||" + to_string(got) + "|3|\n"
						"add_textbox|We appreciate you donating whatever you can! You are bringing light into the lives of Growtopians who can't scrape together a World Lock of their own.|left|\n"
						"end_dialog|s4tb|Exit|Donate!|");
					p.CreatePacket(peer);
				}
			}
			if (items[t_].blockType == BlockTypes::DONATION) {
				pInfo(peer)->lastwrenchb = t_;
				int item = p_, got = 0;
				modify_inventory(peer, item, got);
				if (got == 0) break;
				if (items[item].untradeable == 1 || item == 9770 or item == 10362 or item == 9846 or item == 9772 or item == 5480 or item == 1424 or item == 9770 or item == 10362 or item == 9846 or item == 9772 or item == 5480 or item == 1424) {
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`7[```4You can't place that in the box, you need it!`7]``"), p.CreatePacket(peer);
				}
				else if (items[item].rarity == 1) {
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`7[```4This box only accepts items rarity 2+ or greater`7]``"), p.CreatePacket(peer);
				}
				else {
					pInfo(peer)->lastchoosenitem = item;
					gamepacket_t p;
					p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|" + items[item].name + "``|left|" + to_string(item) + "|\nadd_textbox|How many to put in the box as a gift? (Note: You will `4LOSE`` the items you give!)|left|\nadd_text_input|count|Count:|" + to_string(got) + "|5|\nadd_text_input|sign_text|Optional Note:||128|\nadd_spacer|small|\nadd_button|give|`4Give the item(s)``|noflags|0|0|\nadd_spacer|small|\nadd_button|cancel|`wCancel``|noflags|0|0|\nend_dialog|give_item|||\n");
					p.CreatePacket(peer);
				}
				return false;
			}
			if (items[t_].mannequin) {
				if (world_->owner_name.empty() and not block_->locked) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("`5[`2It's not safe to use an unlocked " + items[t_].name + "!``]``");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else if (not world_->open_to_public and world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and not world_->owner_name.empty() and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
					if (block_->locked) {
						WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
						if (not check_lock->open_to_public and check_lock->owner_name != pInfo(peer)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(peer)->tankIDName) == check_lock->admins.end())) break;
					}
					else {
						break;
					}
				}
				else if (items[p_].blockType != CLOTHING) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("`5[`2That would just be weird.  Try putting clothes on your " + items[t_].name + " instead!``]``");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else {
					if (items[p_].untradeable) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("`5[`2You cannot place " + items[p_].name + " on " + items[t_].name + "!``]``");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
					}
					else if (items[p_].clothType == ClothTypes::ANCES) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("`5[`2It's not safe to place " + items[p_].name + " on " + items[t_].name + "!``]``");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
					}
					else {
						uint16_t current_mannequin_item = 0;
						switch (items[p_].clothingType) {
						case 0: current_mannequin_item = block_->mannequin.c_hair;
							break;
						case 1: current_mannequin_item = block_->mannequin.c_shirt;
							break;
						case 2: current_mannequin_item = block_->mannequin.c_pants;
							break;
						case 3: current_mannequin_item = block_->mannequin.c_feet;
							break;
						case 4: current_mannequin_item = block_->mannequin.c_head;
							break;
						case 5: current_mannequin_item = block_->mannequin.c_hand;
							break;
						case 6: current_mannequin_item = block_->mannequin.c_back;
							break;
						case 7: current_mannequin_item = block_->mannequin.c_mask;
							break;
						case 8: current_mannequin_item = block_->mannequin.c_neck;
							break;
						case 9: {
							return false;
						}
						} if (current_mannequin_item == p_) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("`5[`2You giggle as you swap two identical items``]``");
							p.Insert(0), p.Insert(0);
							p.CreatePacket(peer);
						}
						else {
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|Do you really want to put your " + items[p_].name + " on the " + items[t_].name + "?|left|\nembed_data|tilex|" + to_string(x_) + "\nembed_data|tiley|" + to_string(y_) + "\nembed_data|put|" + to_string(p_) + "\nend_dialog|mannequin_edit|No|Yes|");
							p.CreatePacket(peer);
						}
					}
				}
				return false;
			}
			if (t_ == 2452) {
				pInfo(peer)->lastwrenchb = t_;
				int item = p_, got = 0;
				modify_inventory(peer, item, got);
				if (got == 0) break;
				if (items[item].r_1 == 2037 || items[item].r_2 == 2037 || items[item].r_1 == 2035 || items[item].r_2 == 2035 || items[item].r_1 + items[item].r_2 == 0 || items[item].blockType != BlockTypes::CLOTHING || items[item].untradeable || item == 1424 || items[item].rarity > 200) {
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`5[`2Only spliceable clothing can be crushed!``]``"), p.CreatePacket(peer);
				}
				else {
					pInfo(peer)->lastchoosenitem = item;
					gamepacket_t p;
					p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w" + items[item].name + "``|left|" + to_string(item) + "|\nadd_textbox|You have " + to_string(got) + " " + items[item].name + ". How many will you crush?|left|\nadd_textbox|`4Beware:`` If you don't have room in your inventory for the resulting items, they will drop on the floor.|left|\nadd_text_input|count||" + to_string(got) + "|5|\nend_dialog|compactor|Cancel|OK|");
					p.CreatePacket(peer);
				}
				break;
			}
			if (t_ == 4582) {
				pInfo(peer)->lastwrenchb = t_;
				int item = p_, got = 0;
				modify_inventory(peer, item, got);
				if (got == 0) break;
				gamepacket_t p;
				if (items[item].grindable_prize == 0) p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`5[`2That's not grindable``]``");
				else if (items[item].grindable_prize != 0 && got < items[item].grindable_count) p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`5[`2I need " + to_string(items[item].grindable_count) + " of those to grind them!``]``");
				else {
					pInfo(peer)->lastchoosenitem = item;
					p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wGrind " + items[item].name + "``|left|" + to_string(item) + "|\nadd_textbox|You have " + to_string(got) + " " + items[item].name + ". It takes " + to_string(items[item].grindable_count) + " per grind. How many times will you grind (max " + to_string(got / items[item].grindable_count) + ")?|left|\nadd_textbox|`4Beware:`` If you don't have room in your inventory for the resulting items, they will drop on the floor.|left|\nadd_text_input|count||" + to_string(got / items[item].grindable_count) + "|5|\nend_dialog|grinder|Cancel|OK|");
				}
				p.CreatePacket(peer);
				break;
			}
			if (items[t_].blockType == BlockTypes::DISPLAY) {
				string owner_name = world_->owner_name, user_name = pInfo(peer)->tankIDName;
				if (world_->owner_name.empty()) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("This area must be locked to put your item on display!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else if (owner_name != user_name and not pInfo(peer)->dev) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("Only the block's owner can place items in it.");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else if (block_->id != 0) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("Remove what's in there first!");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else if (p_ == 1424 or p_ == 5816 or p_ == 1424 or p_ == 5816 or p_ == 242 or p_ == 1796 or p_ == 9770 or p_ == 10362 or p_ == 9846 or p_ == 9772 or p_ == 5480 or p_ == 1424 or p_ == 7188) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("No sir.");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else if (items[p_].untradeable) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("You can't display untradeable items.");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else if (items[p_].blockType == BlockTypes::LOCK or items[p_].blockType == BlockTypes::DISPLAY) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("Sorry, no displaying Display Blocks or Locks.");
					p.Insert(0), p.Insert(0);
					p.CreatePacket(peer);
				}
				else {
					int c_ = -1;
					if (modify_inventory(peer, p_, c_) == 0) {
						block_->id = p_;
						gamepacket_t p(0, pInfo(peer)->netID);
						p.Insert("OnPlayPositioned");
						p.Insert("audio/blorb.wav");

						// update item visual in display block
						PlayerMoving data_effect_{};
						data_effect_.packetType = 19;
						data_effect_.punchX = p_;
						data_effect_.punchY = pInfo(peer)->netID;
						data_effect_.x = x_ * 32 + 16, data_effect_.y = y_ * 32 + 16;
						BYTE* raw_effect = packPlayerMoving(&data_effect_, 56);
						raw_effect[8] = pInfo(peer)->netID, raw_effect[3] = 4;
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								p.CreatePacket(currentPeer);
								send_raw(currentPeer, 4, raw_effect, 56, ENET_PACKET_FLAG_RELIABLE);
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, blc, raw_effect;
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
						return true;
					}
				}
				return false;
			}
			switch (items[p_].blockType) {
			case BlockTypes::CLOTHING:
			{
				equip_clothes(peer, p_);
				break;
				// kai ant saves paspaudi uzsideti itema
			}
			case BlockTypes::CONSUMABLE:
			{
				if (pInfo(peer)->last_consumable + 500 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) pInfo(peer)->last_consumable = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				else break;
				if (find(world_->active_jammers.begin(), world_->active_jammers.end(), 3616) != world_->active_jammers.end()) {
					if (!guild_access(peer, world_->guild_id) and world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end()) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Can't use consumables here!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(peer);
						break;
					}
				}
				switch (p_) {
				case 3098: case 3218: case 3014: case 3012: case 3018: case 5526: case 3020: case 2914: case 4248: case 5528: case 4246: case 3016:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (block_->fg != 0) {
						gamepacket_t p, p2;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Something is blocking the way!"), p.CreatePacket(peer);
						p2.Insert("OnConsoleMessage"), p2.Insert("Something is blocking the way!"), p2.CreatePacket(peer);
					}
					else {
						if (pInfo(peer)->hand == 3040 || pInfo(peer)->hand == 3010 || pInfo(peer)->hand == 2912 || pInfo(peer)->hand == 3008 || pInfo(peer)->hand == 3100 || pInfo(peer)->hand == 5740 || pInfo(peer)->hand == 6254 || pInfo(peer)->hand == 6256 || pInfo(peer)->hand == 6932 || pInfo(peer)->hand == 10262) {
							if (block_->flags == 0x04000000 && pInfo(peer)->fishing_used == 0) {
								if (abs(pInfo(peer)->x / 32 - x_) <= 1 && abs(y_ - pInfo(peer)->y / 32) == 1 && pInfo(peer)->x / 32 != x_ && pInfo(peer)->y / 32 != y_) {
									if (pInfo(peer)->hair == 3042 && rand() % 100 < 5);
									else modify_inventory(peer, p_, got = -1);
									pInfo(peer)->fish_seconds = 1850;
									if (pInfo(peer)->hand == 3008) pInfo(peer)->fish_seconds *= 2;
									pInfo(peer)->fishing_used = p_, pInfo(peer)->f_x = x_, pInfo(peer)->f_y = y_, pInfo(peer)->move_warning = 0, pInfo(peer)->f_xy = pInfo(peer)->x + pInfo(peer)->y, pInfo(peer)->punch_warning = 0;
									FishMoving data_{};
									data_.stopped_fishing = 0, data_.netID = pInfo(peer)->netID, data_.x = pInfo(peer)->f_x, data_.y = pInfo(peer)->f_y;
									BYTE* raw = packFishMoving(&data_);
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
										send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
									delete[] raw;
								}
								else {
									gamepacket_t p, p2;
									p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Sit still before you try to fish!"), p.CreatePacket(peer);
									p2.Insert("OnConsoleMessage"), p2.Insert("Sit still before you try to fish!"), p2.CreatePacket(peer);
								}
							}
							else if (block_->flags == 0x04000000 && pInfo(peer)->fishing_used != 0) stop_fishing(peer, false, "");
						}
						else {
							gamepacket_t p, p2;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You'll need a fishing rod to fish!"), p.CreatePacket(peer);
							p2.Insert("OnConsoleMessage"), p2.Insert("You'll need a fishing rod to fish!"), p2.CreatePacket(peer);
						}
					}
					break;
				}
				case 4132:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					bool remove = false;
					for (int i_ = 0; i_ < world_->drop.size(); i_++) {
						if (world_->drop[i_].id == 0) continue;
						if (x_ == (world_->drop[i_].x / 32) && y_ == (world_->drop[i_].y / 32) && world_->drop[i_].id == 3936) {
							if (rand() % 10 < 4)  gems_(peer, world_, rand() % (items[p_].max_gems + 1), x_ * 32, y_ * 32, p_);
							remove = true;
							PlayerMoving data_{};
							data_.effect_flags_check = 1, data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop[i_].uid;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[]raw;
							WorldDrop drop_block_{};
							drop_block_.id = 4134, drop_block_.count = world_->drop[i_].count, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = world_->drop[i_].x, drop_block_.y = world_->drop[i_].y;
							dropas_(world_, drop_block_);
							world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
						}
					}
					if (remove) modify_inventory(peer, p_, got = -1);
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You can only brush Fossils that have never been picked up!"), p.CreatePacket(peer);
					}
					break;
				}
				case 12600:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (world_->owner_name == pInfo(peer)->tankIDName || pInfo(peer)->superdev) {
						int ungrown = 0;
						long long times_ = time(nullptr);
						for (int i_ = 0; i_ < world_->blocks.size(); i_++) if (items[world_->blocks[i_].fg].blockType == BlockTypes::SEED and (times_ - world_->blocks[i_].planted <= items[world_->blocks[i_].fg].growTime ? times_ - world_->blocks[i_].planted : items[world_->blocks[i_].fg].growTime) != items[world_->blocks[i_].fg].growTime) ungrown++;
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wUltra World Spray``|left|12600|\nadd_spacer|small|\nadd_textbox|There is `2" + to_string(ungrown) + "`` ungrown tree that this spray will work on.|\nadd_spacer|small|\nadd_textbox|Are you sure you want to use the Ultra World Spray on this world?|\nend_dialog|world_spray|No|Yes|\n\nadd_quick_exit|");
						p.CreatePacket(peer);
					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You must own the world!"), p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
					}
					break;
				}
				case 9502:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (world_->owner_name == pInfo(peer)->tankIDName || pInfo(peer)->superdev) {
						int ungrown = 0;
						long long times_ = time(nullptr);
						for (int i_ = 0; i_ < world_->blocks.size(); i_++) if (items[world_->blocks[i_].fg].blockType == BlockTypes::PROVIDER and (times_ - world_->blocks[i_].planted <= items[world_->blocks[i_].fg].growTime ? times_ - world_->blocks[i_].planted : items[world_->blocks[i_].fg].growTime) != items[world_->blocks[i_].fg].growTime) ungrown++;
						gamepacket_t p;
						p.Insert("OnDialogRequest");
						p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wUltra Provider Spray``|left|9502|\nadd_spacer|small|\nadd_textbox|There is `2" + to_string(ungrown) + "`` unready provider that this spray will work on.|\nadd_spacer|small|\nadd_textbox|Are you sure you want to use the Ultra Provider Spray on this world?|\nend_dialog|provd_spray|No|Yes|\n\nadd_quick_exit|");
						p.CreatePacket(peer);
					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You must own the world!"), p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
					}
					break;
				}
				case 5664:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (block_->fg == 0) {
						modify_inventory(peer, p_, got = -1);
						gamepacket_t p;
						p.Insert("OnAddNotification");
						p.Insert("interface/large/special_event.rttex");
						vector<int> list{ 5652, 3398, 386, 4422, 364, 9342, 9340, 9334, 9332, 9336, 9338, 4400, 7808, 7810, 4416, 7818, 7820, 7822, 7824, 5644, 390, 7826, 7830, 9324, 5658, 3396, 2384, 5660, 10654, 3400, 4418, 388, 3408, 1470, 3404, 3406, 10662, 2390, 5656, 5648, 2396, 384, 5664, 386, 4424, 366 };
						int item = list[rand() % list.size()];
						WorldDrop drop_block_{};
						drop_block_.id = item, drop_block_.count = (item == 7810 || item == 7808 || item == 4400 || item == 390 || item == 3408 || item == 4422 || item == 3404 || item == 386 ? 5 : (item == 4418 || item == 5660 ? 2 : 1)), drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
						dropas_(world_, drop_block_);
						p.Insert("`2Valentine's Card:`` Cupid has just spawned a `#" + items[item].name + "``.");
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) p.CreatePacket(currentPeer);
						}
					}
					break;
				}
				case 722:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (block_->fg == 0) {
						modify_inventory(peer, p_, got = -1);
						block_->fg = 718;
						gamepacket_t p;
						p.Insert("OnAddNotification"), p.Insert("interface/large/special_event.rttex"), p.Insert("`2`4Pi`wna`2ta`` `wBash``!:`` `oSmash the `wUltra`` `4Pi`wna`2ta``! `#Get some help``!``"), p.Insert("audio/cumbia_horns.wav");
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
							update_tile(currentPeer, x_, y_, 718, false, false);
							p.CreatePacket(currentPeer);
						}
					}
					break;
				}
				case 3400:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (block_->fg != 10) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("`4This potion is clearly labeled for use only on rocks.``");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						break;
					}
					int c_ = -1;
					if (modify_inventory(peer, 3400, c_) == 0) {
						block_->fg = 392;
						PlayerMoving data_{};
						data_.packetType = 17;
						data_.netID = 44;
						data_.YSpeed = 44;
						data_.x = x_ * 32 + 16;
						data_.y = y_ * 32 + 16;
						PlayerMoving data_2{};
						data_2.packetType = 5, data_2.punchX = x_, data_2.punchY = y_, data_2.characterState = 0x8;
						BYTE* raw2 = packPlayerMoving(&data_2, 112 + alloc_(world_, block_));
						BYTE* blc = raw2 + 56;
						form_visual(blc, *block_, *world_, peer, false);
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								packet_(currentPeer, "action|play_sfx\nfile|audio/terraform.wav\ndelayMS|0");
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								send_raw(currentPeer, 4, raw2, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, raw2, blc;
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
					}
					break;
				}
				case 3742:
				{
					if (items[t_].blockType == BlockTypes::PROVIDER) {
						long long time_ = time(NULL);
						uint32_t laikas = uint32_t((time_ - block_->planted <= items[block_->fg].growTime ? time_ - block_->planted : items[block_->fg].growTime));
						if (laikas < unsigned int(items[block_->fg].growTime)) {
							long long spray_time_ = 3600 * 12; // 12 hours
							block_->planted -= spray_time_;
							gamepacket_t p;
							p.Insert("OnTextOverlay");
							if (time_ - block_->planted <= items[block_->fg].growTime) {
								if (spray_time_ < 86400)
									p.Insert(items[block_->fg].name + " `eaged`` `$" + to_string(spray_time_ / 60 / 60) + "`` hours");
								else
									p.Insert(items[block_->fg].name + " `eaged`` `$" + to_string(spray_time_ / 86400) + "`` days");
							}
							else {
								p.Insert(items[block_->fg].name + " is ready!");
							}
							p.CreatePacket(peer);
							{
								gamepacket_t p(0, pInfo(peer)->netID);
								p.Insert("OnPlayPositioned");
								p.Insert("audio/spray.wav");
								p.CreatePacket(peer);
							}
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == world_->name) {
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, peer);
							}
							int c_ = -1;
							modify_inventory(peer, p_, c_);
						}
						else {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("This " + items[block_->fg].name + " is already ready, don't waste your spray on it!");
							p.Insert(0);
							p.Insert(1);
							p.CreatePacket(peer);
						}
					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Use this on a provider to speed it up.");
						p.Insert(0);
						p.Insert(1);
						p.CreatePacket(peer);
					}
					break;
				}
				case 228: case 1062: case 1778: case 5764: case 10672:
				{
					if (items[t_].blockType == BlockTypes::SEED) {
						long long time_ = time(NULL);
						uint32_t laikas = uint32_t((time_ - block_->planted <= items[block_->fg].growTime ? time_ - block_->planted : items[block_->fg].growTime));
						if (laikas < unsigned int(items[block_->fg].growTime)) {
							long long spray_time_ = 3600; // 1 hours
							if (p_ == 1062)
								spray_time_ = _int64(2.592e+6); // 30 days
							if (p_ == 1778)
								spray_time_ = 86400; // 24 hours
							if (p_ == 5764)
								spray_time_ = 259200; // 72 hours
							block_->planted -= spray_time_;
							gamepacket_t p, p2(0, pInfo(peer)->netID);
							p.Insert("OnTextOverlay");
							if (time_ - block_->planted <= items[block_->fg].growTime) {
								if (spray_time_ < 86400) p.Insert(items[block_->fg - 1].name + " Tree aged `$" + to_string(spray_time_ / 60 / 60) + "`` hours");
								else p.Insert(items[block_->fg - 1].name + " Tree aged `$" + to_string(spray_time_ / 86400) + "`` days");
							}
							else p.Insert(items[block_->fg - 1].name + " Tree grew to full size!");
							p.CreatePacket(peer);
							p2.Insert("OnPlayPositioned"), p2.Insert("audio/spray.wav"), p2.CreatePacket(peer);
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
							delete[] raw, blc;
							if (block_->locked) upd_lock(*block_, *world_, peer);
							int c_ = -1;
							modify_inventory(peer, p_, c_);
						}
						else {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("This tree has already bloomed, don't waste your spray on it!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						}
					}
					else {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Use this on a growing tree to speed it's growth."), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					}
					break;
				}
				case 9490: case 9492: case 9494: case 9496: case 9498:
				{
					int got = 0, maxGems = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (p_ == 9490) maxGems = 50000;
					else if (p_ == 9492) maxGems = 100000;
					else if (p_ == 9494) maxGems = 250000;
					else if (p_ == 9496) maxGems = 500000;
					else if (p_ == 9498) maxGems = 1000000;
					if (modify_inventory(peer, p_, got = -1) == 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID), p.Insert("`9You earned " + setGems(maxGems) + " ė!``"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						{
							gamepacket_t p;
							p.Insert("OnSetBux"), p.Insert(pInfo(peer)->gems += maxGems), p.Insert(1), p.Insert((pInfo(peer)->supp >= 1) ? 1 : 0);
							if (pInfo(peer)->supp >= 2) p.Insert((float)33796, (float)1, (float)0);
							p.CreatePacket(peer);
						}
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 47, data_.YSpeed = 47, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
						break;
					}
				}
				case 11304:
				{
					if (pInfo(peer)->gp == 1) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID), p.Insert("Looks like you already have the Royal GrowPass this month, please use again when your Grow Pass ended.``"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						break;
					}
					else {
						int got = 0;
						modify_inventory(peer, p_, got);
						if (got == 0) break;
						modify_inventory(peer, p_, got = -1);
						//pInfo(peer)->gp = 1;
						PlayMods new_playmod{};
						new_playmod.id = 101;
						new_playmod.time = time(nullptr) + 2678400;
						pInfo(peer)->playmods.push_back(new_playmod);
						gamepacket_t p(3000), p2(500), p3;
						p.Insert("OnAddNotification"), p.Insert("interface/cash_icon_overlay.rttex"), p.Insert("You've unlocked `cGrow Pass`` only skin colors``!"), p.Insert("audio/piano_nice.wav.wav"), p.Insert(0), p.CreatePacket(peer);
						//p2.Insert("OnAddNotification"), p2.Insert("interface/cash_icon_overlay.rttex"), p2.Insert("You've unlocked the `2Mentor ``& `2Grow4Good`` title!"), p2.Insert("audio/piano_nice.wav.wav"), p2.Insert(0), p2.CreatePacket(peer);
						p3.Insert("OnConsoleMessage"), p3.Insert("We received your royalty, thanks for supporting `5Growtopia``. (`oRoyal Grow Pass mod added `o31 days left``)"), p3.CreatePacket(peer);
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 48, data_.YSpeed = 48, data_.x = pInfo(peer)->x + 16, data_.y = pInfo(peer)->y + 16;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
							gamepacket_t p3, p4;
							p3.Insert("OnParticleEffect");
							p3.Insert(198);
							p3.Insert((float)pInfo(peer)->x + 10, (float)pInfo(peer)->y + 16);
							p4.Insert("OnParticleEffect");
							p4.Insert(46);
							p4.Insert((float)pInfo(peer)->x + 10, (float)pInfo(peer)->y + 16);
							p3.CreatePacket(currentPeer), p4.CreatePacket(currentPeer);
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
					}
					break;
				}
				case 1488:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					modify_inventory(peer, p_, got = -1);
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("`5GULP! You got smarter!``");
					p.Insert(0);
					p.Insert(1);
					p.CreatePacket(peer);
					cout << "hrdhdhdfh" << endl;
					add_peer_xp(peer, 10000);
					break;
				}
				case 6336:
				{
					level_rewards_dialog(peer);
					break;
				}
				case 5706:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					vector<int> list{ 3567, 13, 57, 17, 381, 1139, 21, 101, 379, 117, 27, 23, 581, 195, 105, 191, 377, 1307, 697, 881, 167, 185, 1323, 165, 3783, 369, 25, 171, 53, 103, 179, 29, 249, 177, 1325, 337, 189, 169, 55, 223, 175, 885, 119, 3573, 199, 549, 681, 655, 107, 163, 31, 671, 889, 887, 193, 127, 1433, 173, 7631, 413, 3571, 3569, 2809, 9393, 225, 111, 109, 201, 59, 607, 285, 2029, 2013, 2015, 1611, 995, 997, 963, 1481, 219, 197, 2023, 2021, 9331, 1305, 823, 1039, 231, 487, 483, 2019, 427, 1757, 2009, 281, 781, 329, 459, 1041, 421, 2787, 2789, 1043, 2797, 181, 613, 65, 4983, 283, 553, 425, 4635, 987, 627, 2017, 989, 61, 4639, 973, 3523, 331, 265, 859, 433, 253, 339, 1105, 439, 4567, 333, 677, 5673, 1427, 5603, 183, 10533, 5731, 7223, 10833, 6035, 6813, 1113, 1047, 653, 2811, 4703, 1429, 847, 665 };
					vector<pair<int, int>> receivingitems;
					int free = get_free_slots(pInfo(peer)), slot = 5, getcount = 1, inventoryfull = 0;
					if (free >= slot) {
						for (int i = 0; i < slot; i++) {
							int itemid = list[rand() % list.size()];
							receivingitems.push_back(make_pair(itemid, getcount));
						}
						for (int i = 0; i < slot; i++) {
							int itemcount = 0;
							modify_inventory(peer, receivingitems[i].first, itemcount);
							if (itemcount + getcount > 200) inventoryfull = 1;
						}
						if (inventoryfull == 0) {
							for (int i = 0; i < slot; i++) modify_inventory(peer, receivingitems[i].first, receivingitems[i].second);
							modify_inventory(peer, p_, got = -1);
						}
					}
					break;
				}
				case 1828: case 11286: case 3870:
				{
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert(p_ == 3870 ? "That's like a hundred years old. No." : "Ew, it has raisins! I'm not eating that."), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					break;
				}
				case 10394: case 5138: case 5140: case 5142:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					modify_inventory(peer, p_, got = -1);

					int gems = 0;
					if (p_ == 10394) gems = 1000;
					if (p_ == 5138) gems = 10000;
					if (p_ == 5140) gems = 50000;
					if (p_ == 5142) gems = 100000;

					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("`9More Gems!``");
					p.Insert(0);
					p.Insert(1);
					p.CreatePacket(peer);

					pInfo(peer)->gems += gems;

					gamepacket_t p2;
					p2.Insert("OnSetBux");
					p2.Insert(pInfo(peer)->gems);
					p2.Insert(0);
					p2.Insert(0);
					p2.CreatePacket(peer);

					break;
				}
				case 1066:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got >= 1) {
						modify_inventory(peer, p_, got = -1);
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 50, data_.YSpeed = 50, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
					}
					break;
				}
				case 6140:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got >= 1) {
						string foundlist = "";
						gamepacket_t p;
						if (world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Only the owner of this tile has access!"), p.CreatePacket(peer);
							break;
						}
						for (int i_ = 0; i_ < world_->drop.size(); i_++) if (world_->drop[i_].id != 0 && world_->drop[i_].id != 112 && world_->drop[i_].x > 0 && world_->drop[i_].y > 0 && world_->drop[i_].x / 32 == x_ && world_->drop[i_].y / 32 == y_) foundlist += to_string(world_->drop[i_].id) + "," + to_string(world_->drop[i_].count) + "," + to_string(world_->drop[i_].uid) + ",";
						if (foundlist != "") p.Insert("OnDialogRequest"), p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wExtract-O-Snap``|left|6140|\nadd_spacer|small|\nadd_textbox|GrowTech: use the Extract-O-Snap to pick out the items from the floating items in your world! - Thanks, Technician Dave.|leftvadd_spacer|small|\nadd_textbox|Press on the icon to extract the item into your inventory.|left|\nadd_spacer|small|\nadd_textbox|`wItem List:|left|\nadd_label_with_icon_button_list|small|`w%s : %s|left|extractOnceObj_|itemID_itemAmount_worldObj|" + foundlist + "\nadd_spacer|small|\nend_dialog|extractor|Close||");
						else p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("There are no floating items in the extraction area!");
						p.CreatePacket(peer);
					}
					break;
				}
				case 1826:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got >= 1) {
						modify_inventory(peer, p_, got = -1);
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 92, data_.YSpeed = 92, data_.x = (x_ * 32) + 16, data_.y = (y_ * 32) + 16;
						BYTE* raw = packPlayerMoving(&data_);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw;
					}
					break;
				}
				case 7788: case 7790: case 7792: case 7794: case 7796:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|0 of 0 `wApprentices Online``|left|1366|\nadd_spacer|small|\nadd_smalltext|`20`` Apprentices above Level 20|left|\nadd_smalltext|`20`` Archived Apprentices|left|\nadd_spacer|small|\nadd_smalltext|`oTo add an apprentice, `wWrench`` a player, then choose `5Add as Apprentice``.``|left|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|rewards_UI|Milestone Rewards|noflags|0|0|\nadd_button|helpmentor_UI|Help|noflags|0|0|\nadd_spacer|small|\nadd_button|back|Back|noflags|0|0||\nadd_button||Close|noflags|0|0|\nend_dialog|show_mentees|||\nadd_quick_exit|");
					p.CreatePacket(peer);
					break;
				}
				case 4490: case 2036: case 2034: case 7590: case 11656: case 2290: case 3122: case 1152: case 6330: case 1212: case 1234: case 3762: case 8534: case 2410: case 5256: case 3110: case 2000: case 2412: case 4426: case 4172: case 5282: case 3242: case 3186: case 8936: case 5636:
				{
					int got = 0, given = 1, needed = items[p_].consume_needed;
					modify_inventory(peer, p_, got);
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
					if (got >= items[p_].consume_needed) {
						if (modify_inventory(peer, items[p_].consume_prize, given) == 0) {
							modify_inventory(peer, p_, needed *= -1);
							p.Insert("`5" + items[p_].name + " combine to create a`` `2" + items[items[p_].consume_prize].name + "```5!``");
						}
						else p.Insert("You don't have enough inventory space!");
					}
					else p.Insert("`4You'll need more " + items[p_].name + " than that!``");
					p.CreatePacket(peer);
					break;
				}
				case 10228:
				{
					if (get_free_slots(pInfo(peer)) >= 1) {
						int got = 0;
						modify_inventory(peer, p_, got);
						if (got == 0) break;
						vector<pair<int, int>> mooncakes{ {11286, 1} , {1096, 10}, {1098, 10}, {1094, 10}, {1058, 10}, {3870, 4} };
						bool toobig = false;
						for (int i = 0; i < mooncakes.size(); i++) {
							int have = 0;
							modify_inventory(peer, mooncakes[i].first, have);
							if (have + mooncakes[i].second > 200) toobig = true;
						}
						if (toobig) {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Your inventory is full!");
							p.CreatePacket(peer);
						}
						if (toobig) break;
						if (rand() % 500 < 1) mooncakes.insert(mooncakes.end(), { 12620,1 });
						vector<pair<int, int>> receivingitems;
						int free = get_free_slots(pInfo(peer)), slot = 5, getcount = 1;
						if (free >= slot) {
							for (int i = 0; i < slot; i++) {
								int randa = rand() % mooncakes.size(), itemid = mooncakes[randa].first, count = rand() % mooncakes[randa].second + 1;
								vector<pair<int, int>>::iterator p_r = find_if(receivingitems.begin(), receivingitems.end(), [itemid](const pair < int, int>& element) { return element.first == itemid; });
								if (p_r != receivingitems.end()) receivingitems[p_r - receivingitems.begin()].second += count;
								else receivingitems.push_back(make_pair(itemid, count));
							}
							string received = "";
							for (int i = 0; i < receivingitems.size(); i++) {
								int itemcount = 0;
								modify_inventory(peer, receivingitems[i].first, itemcount);
								if (itemcount + receivingitems[i].second > 200) toobig = true;
								else received += "`5" + to_string(receivingitems[i].second) + " " + items[receivingitems[i].first].name + "``" + (receivingitems.size() - i == 1 ? "" : " ");
							}
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
							if (toobig == false) {
								for (int i = 0; i < receivingitems.size(); i++) modify_inventory(peer, receivingitems[i].first, receivingitems[i].second);
								modify_inventory(peer, p_, got = -1);
								p.Insert("`0You got`` " + received + "`0.``");
							}
							else p.Insert("Your inventory is full!");
							p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						}
					}
					break;
				}
				case 10756:
				{
					if (get_free_slots(pInfo(peer)) >= 2) {
						int got = 0;
						modify_inventory(peer, p_, got);
						if (got == 0) break;
						vector<int> shard{ 10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10768,10766, 10764 };
						vector<int> egg{ 8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550,8064, 8066, 8068, 2552, 9460, 2548, 2546, 2544, 2550, 2554 };
						bool toobig = false;
						for (int i = 0; i < shard.size(); i++) {
							int have = 0;
							modify_inventory(peer, shard[i], have);
							if (have >= 199) toobig = true;
						}
						for (int i = 0; i < egg.size(); i++) {
							int have = 0;
							modify_inventory(peer, egg[i], have);
							if (have >= 199) toobig = true;
						}
						if (toobig) break;
						vector<pair<int, int>> receivingitems;
						int free = get_free_slots(pInfo(peer)), slot = 2, getcount = 1, inventoryfull = 0;
						if (free >= slot) {
							for (int i = 0; i < slot; i++) {
								int itemid = i == 0 ? shard[rand() % shard.size()] : egg[rand() % egg.size()];
								receivingitems.push_back(make_pair(itemid, getcount = 1));
							}
							for (int i = 0; i < slot; i++) {
								int itemcount = 0;
								modify_inventory(peer, receivingitems[i].first, itemcount);
								if (itemcount + receivingitems[i].second > 200) inventoryfull = 1;
							}
							if (inventoryfull == 0) {
								string received = "";
								for (int i = 0; i < slot; i++) {
									int receiveds = receivingitems[i].second;
									modify_inventory(peer, receivingitems[i].first, receivingitems[i].second);
									if (i == 0)received += "`2" + to_string(receiveds) + " " + items[receivingitems[i].first].ori_name + "`` and ";
									else received += "`2" + to_string(receiveds) + " " + items[receivingitems[i].first].ori_name + "``";
								}
								modify_inventory(peer, p_, got = -1);
								gamepacket_t p;
								p.Insert("OnConsoleMessage"), p.Insert("You received " + received + " from a Golden Egg Carton."), p.CreatePacket(peer);
								{
									gamepacket_t p;
									p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You received " + received + " from a Golden Egg Carton."), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
								}
							}
						}
					}
					break;
				}
				case 5174: case 5404: case 5402: case 13054: case 10396: case 11476: case 7672: case 2306: case 5750: case 9286: case 7346: case 9680: case 11860: case 11036: case 1680: case 1360: case 10536: case 11758: case 11756: case 10386: case 9018: case 11398: case 8410: case 8408: case 8414: case 8412: case 7954: case 7484: case 5948: case 12262: case 12264: case 12044: case 12046: case 12566: case 12568:
				{
					if (get_free_slots(pInfo(peer)) >= 1) {
						int got = 0, received = 0;
						modify_inventory(peer, p_, got);
						if (got == 0) break;
						bool toobig = false;
						for (int i = 0; i < items[p_].noob_item.size(); i++)for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == items[p_].noob_item[i].first && pInfo(peer)->inv[i_].count + items[p_].noob_item[i].second >= 200) toobig = true;
						if (items[p_].newdropchance != 0) for (int i = 0; i < items[p_].rare_item.size(); i++)for (int i_ = 0; i_ < pInfo(peer)->inv.size(); i_++) if (pInfo(peer)->inv[i_].id == items[p_].rare_item[i].first && pInfo(peer)->inv[i_].count + items[p_].rare_item[i].second >= 200) toobig = true;
						int random = rand() % items[p_].noob_item.size(), itemid = items[p_].noob_item[random].first;
						got = items[p_].noob_item[random].second;
						if (items[p_].newdropchance != 0 && (rand() % items[p_].newdropchance) < 1) {
							if (items[p_].rare_item.size() != 0) random = (rand() % items[p_].rare_item.size()), itemid = items[p_].rare_item[random].first, got = items[p_].rare_item[random].second;
							if (p_ == 1680) {
								if (itemid == 1674 || itemid == 2854 || itemid == 4820 || itemid == 3696 || itemid == 6312 || itemid == 8588 || itemid == 11008 || itemid == 12186) {
									string texts = "A `4" + items[p_].ori_name + "`` rewards `2" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name) + "`` with a `5Rare " + items[itemid].ori_name + "``.";
									gamepacket_t p;
									p.Insert("OnConsoleMessage"), p.Insert("CP:_PL:0_OID:_CT:[S]_ `o**`` " + texts + "``");
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										p.CreatePacket(currentPeer);
									}
								}
							}
						}
						if (p_ == 1680) {
							modify_inventory(peer, p_, got = -1);
							WorldDrop drop_block_{};
							drop_block_.id = itemid, drop_block_.count = 1, drop_block_.x = pInfo(peer)->x, drop_block_.y = pInfo(peer)->y - 32, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
							dropas_(world_, drop_block_);
							PlayerMoving data_{};
							gamepacket_t p;
							p.Insert("OnParticleEffect"), p.Insert(73), p.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y - 32);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
								p.CreatePacket(currentPeer);
							}
						}
						else {
							received = got;
							if (modify_inventory(peer, itemid, got) == 0) {
								//if (p_ == 12566) if (pInfo(peer)->garuda < 15) pInfo(peer)->garuda++;
								modify_inventory(peer, p_, got = -1);
								gamepacket_t p, p2;
								p.Insert("OnConsoleMessage"), p.Insert("You received `2" + to_string(received) + " " + items[itemid].name + "`` from the " + items[p_].name + "."), p.CreatePacket(peer);
								p2.Insert("OnTalkBubble"), p2.Insert(pInfo(peer)->netID), p2.Insert("You received `2" + to_string(received) + " " + items[itemid].name + "`` from the " + items[p_].name + "."), p2.Insert(0), p2.Insert(1), p2.CreatePacket(peer);
							}
						}
					}
					break;
				}
				case 834: case 5766: case 1406: case 9264:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					modify_inventory(peer, p_, got = -1);
					if (rand() % 100 < 2 and p_ == 834) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Received 1 Summer Surprise!");
						p.Insert(0);
						p.Insert(1);
						p.CreatePacket(peer);
						WorldDrop drop_block_{};
						drop_block_.id = 836, drop_block_.count = 1, drop_block_.x = pInfo(peer)->x, drop_block_.y = pInfo(peer)->y, drop_block_.uid = uint16_t(world_->drop.size()) + 1;
						dropas_(world_, drop_block_);
					}
					gamepacket_t p;
					p.Insert("OnParticleEffect"), p.Insert(40), p.Insert((float)pInfo(peer)->x + 16, (float)pInfo(peer)->y);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
						p.CreatePacket(currentPeer);
					}
					break;
				}
				case 830: case 9164: case 942: case 1060: case 1136: case 1402: case 1532: case 3562: case 4774: case 7380: case 7588: case 9488: case 8556: case 9582: case 9602:
				{
					if (p_ == 830) {
						int got = 0;
						modify_inventory(peer, 834, got);
						if (got < 100) {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Beach blast requires 100 Fireworks."), p.Insert(0), p.Insert(1);
							p.CreatePacket(peer);
							break;
						}
					}
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`0" + items[p_].name + "``|left|" + to_string(p_) + "|\nadd_textbox|This item creates a new world! Enter a unique name for it.|left||\nadd_text_input|name|New World Name||256|\nend_dialog|blast|Cancel|`5Create!``|\n");
					p.CreatePacket(peer);
					pInfo(peer)->lastchoosenitem = p_;
					break;
				}
				case 2580: case 2480: case 11230:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					if (p_ == 2580) p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wSwap World Names``|left|2580|\nadd_smalltext|This will swap the name of the world you are standing in with another world `4permanently``.  You must own both worlds, with a World Lock in place.<CR>Your `wChange of Address`` will be consumed if you press `5Swap 'Em``.|left|\nadd_textbox|Enter the other world's name:|left|\nadd_text_input|name_box|||32|\nadd_spacer|small|\nend_dialog|world_swap|Cancel|Swap 'Em!|");
					if (p_ == 2480)p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wMegaphone``|left|2480|\nadd_textbox|Enter a message you want to broadcast to every player in Growtopia! This will use up 1 Megaphone.|left|\nadd_text_input|words|||128|\nembed_data|itemID|2480\nend_dialog|megaphone|Nevermind|Broadcast|\n");
					if (p_ == 11230)p.Insert("set_default_color|`o\nadd_label_with_icon|big|`w`5Locke's Megaphone``|left|11230|\nadd_textbox|Enter a message you want to broadcast to every player in Growtopia! This will use up 1 `5Locke's Megaphone.|left|\nadd_text_input|words|||128|\nembed_data|itemID|11230\nend_dialog|lockemegaphone|Nevermind|Broadcast|\n");
					p.CreatePacket(peer);
					break;
				}
				case 1280:
				{
					gamepacket_t p;
					p.Insert("OnDialogRequest");
					p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wChange your GrowID``|left|1280|\nadd_smalltext|This will change your GrowID `4permanently``.<CR>Your `wBirth Certificate`` will be consumed if you press `5Change It``.<CR>NOTE: The birth certificate only will change your name case (you can not change your whole GrowID)!``|left|\nadd_textbox|Enter your new name:|left|\nadd_text_input|name_box|||32|\nadd_spacer|small|\nend_dialog|name_change|Cancel|Change it!|");
					p.CreatePacket(peer);
					break;
				}
				case 7190:
				{
					uint32_t my_rank = 0;
					string guildName = "";
					if (pInfo(peer)->guild_id != 0) {
						uint32_t guild_id = pInfo(peer)->guild_id;
						vector<Guild>::iterator p = find_if(guilds.begin(), guilds.end(), [guild_id](const Guild& a) { return a.guild_id == guild_id; });
						if (p != guilds.end()) {
							Guild* guild_information = &guilds[p - guilds.begin()];
							for (GuildMember member_search : guild_information->guild_members) {
								guildName = guild_information->guild_name;
								if (member_search.member_name == pInfo(peer)->tankIDName) {
									my_rank = member_search.role_id;
									break;
								}
							}
						}
						if (my_rank == 3) {
							gamepacket_t p;
							p.Insert("OnDialogRequest");
							p.Insert("set_default_color|`o\nadd_label_with_icon|big|`wChange Guild Name``|left|5814|\n"
								"add_textbox|Current Guild Name:" + guildName + "|left|\n"
								"add_smalltext|`4You can't use that name for your guild name or the name is already taken``|left|\n"
								"add_text_input|new_guild_name|Guild Name:||15|\n\n"
								"add_button|confirm|Confirm|noflags|0|0|\n"
								"end_dialog|change_guild_name|Close||");
							p.CreatePacket(peer);
						}
						else {
							gamepacket_t p;
							p.Insert("OnTextOverlay"), p.Insert("Only Guild Leader can Change Guild Name!"), p.CreatePacket(peer);
							break;
						}
					}
					else {
						gamepacket_t p;
						p.Insert("OnTextOverlay"), p.Insert("You must have Guild to use Guild Name Changer!"), p.CreatePacket(peer);
						break;
					}
					break;
				}
				case 1404:
				{
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
					if (world_->owner_name == pInfo(peer)->tankIDName or pInfo(peer)->dev) {
						bool used = false;
						if (block_->flags & 0x10000000) {
							p.Insert("You can't move door on fire!");
						}
						else {
							if (y_ < 54 && y_ > 0) {
								if (block_->fg == 0 || block_->fg == 6 || block_->fg == 8 || block_->fg == 9570) {
									WorldBlock* block2_ = &world_->blocks[x_ + ((y_ + 1) * 100)];
									if (block2_->flags & 0x10000000) {
										p.Insert("You can't move door on fire!");
									}
									else {
										if (block2_->fg == 0 || block2_->fg == 6 || block2_->fg == 8 and y_ < 54) {
											p.Insert("You've moved the door!");
											used = true;
											int c_ = -1;
											modify_inventory(peer, p_, c_);
											for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
												if (world_->blocks[i_].fg == 6) world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
												if (i_ < 5400 && (world_->blocks[i_].fg == 8 || world_->blocks[i_].fg == 9570)) world_->blocks[i_].fg = 0, update_tile(peer, i_ % 100, i_ / 100, 0, false, true);
											}
											PlayerMoving data_{};
											data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
											int alloc = alloc_(world_, block_);
											BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
											BYTE* blc = raw + 56;
											form_visual(blc, *block_, *world_, peer, false);
											for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
												pInfo(currentPeer)->x = float(x_) * 32, pInfo(currentPeer)->y = float(y_) * 32;
												gamepacket_t p(0, pInfo(currentPeer)->netID);
												p.Insert("OnSetPos"), p.Insert(float(x_) * 32, float(y_) * 32), p.CreatePacket(currentPeer);
												send_raw(currentPeer, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
												update_tile(currentPeer, x_, y_, world_->blocks[x_ + (y_ * 100)].fg = 6, false, false);
												update_tile(currentPeer, x_, y_ + 1, world_->blocks[x_ + (y_ + 1) * 100].fg = (world_->d_weather == 255 ? 9570 : 8), false, false);
											}
											delete[] raw, blc;
											if (block_->locked) upd_lock(*block_, *world_, peer);
										}
									}
								}
							}
							if (used == false) {
								packet_(peer, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
								p.Insert("There's no room to put the door there! You need 2 empty spaces vertically.");
							}
						}
					}
					else p.Insert("You can only use this in a world that you have world-locked!");
					p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					break;
				}
				case 3062: case 3102:
				{
					if (items[t_].blockType == BlockTypes::MAIN_DOOR or items[t_].blockType == BlockTypes::BEDROCK or block_->flags & 0x04000000 or t_ == 9570) {
						if (p_ == 3102 || p_ == 3062) {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("That won't burn!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						}
						return true;
					}
					if (t_ == 0) {
						if (p_ == 3102 || p_ == 3062) {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("There's nothing to burn!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						}
						return true;
					}
					if (block_->flags & 0x10000000) {
						if (p_ == 3102 || p_ == 3062) {
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("That area is burned already!"), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						}
						return true;
					}
					int c_ = -1;
					if (modify_inventory(peer, p_, c_) == 0) {
						if (p_ == 3062) {
							if (block_->flags & 0x10000000) {
							}
							else {
								//if (block_->flags & 0x04000000)  block_->flags ^= 0x04000000;
								add_peer_xp(peer, 1);
								block_->flags |= 0x10000000;
								if (rand() % 100 < (items[p_].newdropchance + 5)) {
									WorldDrop drop_seed_{};
									drop_seed_.id = p_ + 1, drop_seed_.count = 1, drop_seed_.uid = uint16_t(world_->drop.size()) + 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
									if (not use_mag(world_, drop_seed_, x_, y_)) dropas_(world_, drop_seed_);
								}
								else if (rand() % 10 < 4)  gems_(peer, world_, rand() % (items[p_].max_gems + 1), x_ * 32, y_ * 32, p_);

								if (block_->fg == 3090) {
									update_tile(peer, x_, y_, block_->fg = 3128, false, true);
									vector<pair<int, int>> receivingitems;
									for (int i_ = 0; i_ < world_->drop.size(); i_++) {
										if (world_->drop[i_].id == 0) continue;
										if (x_ == (world_->drop[i_].x / 32) && y_ == (world_->drop[i_].y / 32) && (items[world_->drop[i_].id].grindable_prize != 0 && items[world_->drop[i_].id].grindable_count == 0)) {
											receivingitems.push_back(make_pair(world_->drop[i_].id, world_->drop[i_].count));
											PlayerMoving data_{};
											data_.effect_flags_check = 1, data_.packetType = 14, data_.netID = 0, data_.plantingTree = world_->drop[i_].uid;
											BYTE* raw = packPlayerMoving(&data_);
											for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
												send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
											delete[]raw;
											world_->drop[i_].id = 0, world_->drop[i_].x = -1, world_->drop[i_].y = -1;
										}
									}
									for (int i = 0; i < receivingitems.size(); i++) {
										int item = receivingitems[i].first;
										if (items[item].grindable_prize != 0 && items[item].grindable_count == 0) item = items[item].grindable_prize;
										WorldDrop drop_block_{};
										drop_block_.id = item, drop_block_.count = receivingitems[i].second, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
										dropas_(world_, drop_block_);
									}
								}
								else if (block_->fg == 7764 || block_->fg == 9300 || block_->fg == 8048 || block_->fg == 7768 || block_->fg == 7772 || block_->fg == 7776) block_->fg += 2, block_->planted = time(nullptr) - (items[p_].growTime / 2);
							}
						}
						else if (p_ == 3102) {
							vector<int> random_xy{ 2, 1, 0, -1 };
							for (int i = 0; i < 7; i++) {
								int randomx = random_xy[rand() % random_xy.size()] + x_, randomy = random_xy[rand() % random_xy.size()] + y_;
								if (randomx > 0 && randomx < 100 && randomy > 0 && randomy < 53) {
									WorldBlock* dropx = &world_->blocks[randomx + (randomy * 100)];
									if (dropx->fg == 6 || dropx->fg == 12258 || dropx->flags & 0x10000000 || dropx->fg == 6 || dropx->fg == 8 || (randomx == x_ && randomy == y_)) {
									}
									else {
										dropx->flags = (dropx->flags & 0x10000000 ? dropx->flags : dropx->flags |= 0x10000000);
										PlayerMoving data_{};
										data_.packetType = 5, data_.punchX = randomx, data_.punchY = randomy, data_.characterState = 0x8;
										int alloc = alloc_(world_, dropx);
										BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
										BYTE* blc = raw + 56;
										form_visual(blc, *dropx, *world_, peer, false);
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == pInfo(peer)->world) {
												send_raw(currentPeer, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[] raw, blc;
									}
								}
							}
							block_->flags = (block_->flags & 0x10000000 ? block_->flags : block_->flags |= 0x10000000);
						}
						PlayerMoving data_{}, data2{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						data2.packetType = 19, data2.punchX = p_, data2.punchY = 1, data2.x = x_ * 32 + 16, data2.y = y_ * 32 + 16;
						BYTE* raw2 = packPlayerMoving(&data_);
						raw2[3] = 4, raw2[8] = pInfo(peer)->netID;
						int alloc = alloc_(world_, block_);
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == pInfo(peer)->world) {
								if (p_ == 3062) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(peer)->netID);
									p.Insert("`0[```4MWAHAHAHA!! FIRE FIRE FIRE```0]``");
									p.Insert(0), p.Insert(0);
									p.CreatePacket(currentPeer);
									packet_(currentPeer, "action|play_sfx\nfile|audio/flame_go.wav\ndelayMS|0");
								}
								send_raw(currentPeer, 4, raw2, 56, ENET_PACKET_FLAG_RELIABLE), send_raw(currentPeer, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, raw2, blc;
						if (block_->locked) upd_lock(*block_, *world_, peer);
					}
					break;
				}
				case 822:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (not world_->open_to_public and world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and not world_->owner_name.empty() and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
							if (not check_lock->open_to_public and check_lock->owner_name != pInfo(peer)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(peer)->tankIDName) == check_lock->admins.end())) break;
						}
						else {
							break;
						}
					}
					if (block_->flags & 0x10000000) {
						//pInfo(peer)->fires++;
						block_->flags ^= 0x10000000;
						PlayerMoving data_{};
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						int alloc = alloc_(world_, block_);
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == pInfo(peer)->world) send_raw(currentPeer, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
						}
						delete[] raw, blc;
						if (block_->locked) upd_lock(*block_, *world_, peer);
					}
					else {
						if (items[t_].blockType == BlockTypes::MAIN_DOOR or items[t_].blockType == BlockTypes::BEDROCK)return true;
						PlayerMoving data_{};
						data_.packetType = 19;
						data_.punchX = 822, data_.punchY = 1;
						data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
						BYTE* raw = packPlayerMoving(&data_);
						raw[3] = 4, raw[8] = pInfo(peer)->netID;
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[]raw;
						if (block_->fg == 4658 and block_->flags & 0x00400000) block_->fg = 0;
						if (block_->fg == 5602 and block_->flags & 0x00400000) block_->fg = 0;
						block_->flags = (block_->flags & 0x04000000 ? block_->flags ^ 0x04000000 : block_->flags | 0x04000000);
						{
							if (block_->flags & 0x04000000) {
								int c_ = -1;
								modify_inventory(peer, 822, c_);
							}
							else {
								// sansas gauti atgal
								if (rand() % 100 < 50) {
									int c_ = 1;
									modify_inventory(peer, 822, c_);
								}
							}
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == pInfo(peer)->world) {
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, peer);
							}
						}
						break;
					}
				}
				case 5524:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (not world_->open_to_public and world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and not world_->owner_name.empty() and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
							if (not check_lock->open_to_public and check_lock->owner_name != pInfo(peer)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(peer)->tankIDName) == check_lock->admins.end())) break;
						}
						else {
							break;
						}
					}
					{
						if (block_->flags & 0x04000000 and t_ == 4658 and !(block_->flags & 0x00400000)) {
							int c_ = -1;
							modify_inventory(peer, 5524, c_);
							block_->flags |= 0x00400000;
							PlayerMoving data_{};
							data_.packetType = 17, data_.netID = 221, data_.YSpeed = 221, data_.plantingTree = 300, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16, data_.XSpeed = t_;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[] raw;
						}
						else {
							send_bubble(peer, pInfo(peer)->netID, "That water is already combined.");
							break;
						}
						{

							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == pInfo(peer)->world) {
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, peer);
							}
						}
						break;
					}
					break;
				}
				case 5522:
				{
					int got = 0;
					modify_inventory(peer, p_, got);
					if (got == 0) break;
					if (not world_->open_to_public and world_->owner_name != pInfo(peer)->tankIDName and not pInfo(peer)->dev and not world_->owner_name.empty() and (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end())) {
						if (block_->locked) {
							WorldBlock* check_lock = &world_->blocks[block_->lock_origin];
							if (not check_lock->open_to_public and check_lock->owner_name != pInfo(peer)->tankIDName and (find(check_lock->admins.begin(), check_lock->admins.end(), pInfo(peer)->tankIDName) == check_lock->admins.end())) break;
						}
						else {
							break;
						}
					}
					{
						if (block_->flags & 0x04000000 and t_ == 5602 and !(block_->flags & 0x00400000)) {
							int c_ = -1;
							modify_inventory(peer, 5522, c_);
							block_->flags |= 0x00400000;

							PlayerMoving data_{};
							data_.packetType = 17, data_.netID = 221, data_.YSpeed = 221, data_.plantingTree = 300, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16, data_.XSpeed = t_;
							BYTE* raw = packPlayerMoving(&data_);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(peer)->world != pInfo(currentPeer)->world) continue;
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
							delete[] raw;
						}
						else {
							send_bubble(peer, pInfo(peer)->netID, "That water is already combined.");
							break;
						}
						{
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == pInfo(peer)->world) {
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, peer);
							}
						}
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
						break;
					}
					break;
				}
				case 1866:
				{
					int c_ = -1;
					if (modify_inventory(peer, p_, c_) == 0) {
						if (block_->flags & 0x08000000) {
							block_->flags ^= 0x08000000;
						}
						else {
							block_->flags |= 0x08000000;
						}
						PlayerMoving data_{};
						data_.packetType = 19;
						data_.punchX = 1866, data_.punchY = 1;
						data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
						BYTE* raw = packPlayerMoving(&data_);
						raw[3] = 4, raw[8] = pInfo(peer)->netID;
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[]raw;
						{
							PlayerMoving data_{};
							data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
							BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
							BYTE* blc = raw + 56;
							form_visual(blc, *block_, *world_, peer, false);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == pInfo(peer)->world) {
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
							if (block_->locked) {
								upd_lock(*block_, *world_, peer);
							}
						}
					}
					break;
				}
				case 3478: case 3480: case 3482: case 3484: case 3486: case 3488: case 3490: case 3492:
				{
					if (pInfo(peer)->tankIDName != world_->owner_name) break;
					if (pInfo(peer)->hand != 3494 and pInfo(peer)->hand != 7938) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("You need a " + items[3494].name + " or a " + items[7938].name + " to apply paint!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						break;
					} if (block_->fg == 0 and block_->bg == 0) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("There's nothing to paint!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						break;
					} if (items[block_->fg].blockType == BlockTypes::MAIN_DOOR or items[block_->fg].blockType == BlockTypes::BEDROCK or items[block_->fg].blockType == BlockTypes::LOCK or block_->fg == 9570) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("That's too special to paint.");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						break;
					}
					bool alr_painted = false;
					if (block_->flags & 0x20000000 and block_->flags & 0x40000000 and block_->flags & 0x80000000) {
						if (p_ == 3490) alr_painted = true;
					}
					else if (block_->flags & 0x20000000 and block_->flags & 0x80000000) {
						if (p_ == 3488) alr_painted = true;
					}
					else if (block_->flags & 0x80000000) {
						if (p_ == 3486) alr_painted = true;
					}
					else if (block_->flags & 0x40000000 and block_->flags & 0x80000000) {
						if (p_ == 3484) alr_painted = true;
					}
					else if (block_->flags & 0x40000000) {
						if (p_ == 3482) alr_painted = true;
					}
					else if (block_->flags & 0x20000000 and block_->flags & 0x40000000) {
						if (p_ == 3480) alr_painted = true;
					}
					else if (block_->flags & 0x20000000) {
						if (p_ == 3478) alr_painted = true;
					}
					if (alr_painted) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("That block is already painted that color!");
						p.Insert(0), p.Insert(0);
						p.CreatePacket(peer);
						break;
					}
					{
						int colour = 0x00000000;
						float particle_ = 0;
						if (p_ == 3478) { // raudona spalva
							colour |= 0x20000000;
							particle_ = 65280.00;
						}
						else if (p_ == 3480) { // geltona spalva
							colour |= 0x20000000;
							colour |= 0x40000000;
							particle_ = 16776960.00;
						}
						else if (p_ == 3482) { // zalia spalva
							colour |= 0x40000000;
							particle_ = 16711680.00;
						}
						else if (p_ == 3484) { // sviesiai melyna spalva
							colour |= 0x40000000;
							colour |= 0x80000000;
							particle_ = 4294901760.00;
						}
						else if (p_ == 3486) { // melyna spalva
							colour |= 0x80000000;
							particle_ = 4278190080.00;
						}
						else if (p_ == 3488) { // rozine spalva
							colour |= 0x20000000;
							colour |= 0x80000000;
							particle_ = 4278255360.00;
						}
						else if (p_ == 3490) { // juoda spalva
							colour |= 0x20000000;
							colour |= 0x40000000;
							colour |= 0x80000000;
							particle_ = 1010580480.00;
						}
						else { // balta spalva
							bool has_something_to_change = false;
							if (block_->flags & 0x20000000 or block_->flags & 0x40000000 or block_->flags & 0x80000000) {
								has_something_to_change = true;
							} if (not has_something_to_change) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("Don't waste your varnish on an unpainted block!");
								p.Insert(0), p.Insert(0);
								p.CreatePacket(peer);
								break;
							}
							particle_ = 3875520768.00;
						}
						int c_ = -1;
						if (modify_inventory(peer, p_, c_) == 0) {
							if (block_->flags & 0x20000000) block_->flags = block_->flags ^ 0x20000000;
							if (block_->flags & 0x40000000) block_->flags = block_->flags ^ 0x40000000;
							if (block_->flags & 0x80000000) block_->flags = block_->flags ^ 0x80000000;
							if (colour != 0x00000000) block_->flags |= colour;
							{
								PlayerMoving p_data_{};
								p_data_.packetType = 17;
								p_data_.netID = 168;
								p_data_.YSpeed = 168;
								p_data_.XSpeed = particle_;
								p_data_.x = (x_ * 32) + 16;
								p_data_.y = (y_ * 32) + 16;
								BYTE* p_raw = packPlayerMoving(&p_data_);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, p_raw, 56, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] p_raw;
							}
							{
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								int alloc = alloc_(world_, block_);
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc);
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, peer, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == world_->name) {
										send_raw(currentPeer, 4, raw, 112 + alloc, ENET_PACKET_FLAG_RELIABLE);
									}
								}
								delete[] raw, blc;
								if (block_->locked) {
									upd_lock(*block_, *world_, peer);
								}
							} if (items[block_->fg].collisionType != 1 and not items[block_->fg].entrance and not items[block_->fg].toggleable) {
								int c_ = rand() % (items[p_].max_gems + 1);
								if (c_ != 0) {
									bool no_seed = false, no_gems = false, no_block = false;
									for (int i_ = 0; i_ < world_->drop.size(); i_++) {
										if (abs(world_->drop[i_].y - y_ * 32) <= 16 and abs(world_->drop[i_].x - x_ * 32) <= 16) {
											if (world_->drop[i_].id == 112 and items[t_].rarity < 8) {
												no_gems = true;
											}
											else {
												no_seed = true, no_block = true;
											}
										}
									} if (rand() % 100 < 5 and not no_block) {
										WorldDrop drop_block_{};
										drop_block_.id = p_, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
										dropas_(world_, drop_block_);
									}
									else if (rand() % 100 < 35 and not no_seed) {
										WorldDrop drop_seed_{};
										drop_seed_.id = 3479, drop_seed_.count = 1, drop_seed_.uid = uint16_t(world_->drop.size()) + 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
										dropas_(world_, drop_seed_);
									}
									else if (not no_gems) {
										int c_ = rand() % (items[p_].max_gems + 1);
										gems_(peer, world_, c_, x_ * 32, y_ * 32, p_);
									}
								}
							}
						}
					}
					break;
				}
				case 3560:
				{
					gamepacket_t p;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
					if (world_->owner_name == pInfo(peer)->tankIDName or pInfo(peer)->dev) {
						int used = 0;
						if (block_->fg == 0) {
							if (LockMove(peer, x_, y_)) {
								p.Insert("You've moved the world lock!");
								used = 1;
								int c_ = -1;
								modify_inventory(peer, p_, c_);
								PlayerMoving data_{};
								data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
								BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
								BYTE* blc = raw + 56;
								form_visual(blc, *block_, *world_, peer, false);
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
									send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
								delete[] raw, blc;
								if (block_->locked) upd_lock(*block_, *world_, peer);
							}
						}
						if (used == 0) {
							packet_(peer, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
							p.Insert("There's no room to put the lock there! You need 1 empty space vertically.");
						}
					}
					else p.Insert("You can only use this in a world that you have world-locked!");
					p.Insert(0), p.Insert(1), p.CreatePacket(peer);
					break;
				}
				default:
				{
					for (vector<string> get_ : info_about_playmods) {
						uint32_t playmod_id = atoi(get_[0].c_str());
						vector<string> id_items = explode("_", get_[1]);
						string playmod_name = get_[2];
						string playmod_on_add = get_[3];
						string playmod_sound = get_[7];
						string playmod_action = get_[9];
						string playmod_text = get_[11];
						string gravity_mod = get_[12];
						for (string item_and_time : id_items) {
							uint32_t item_id = atoi(id_items[0].c_str());
							uint32_t playmod_time = atoi(id_items[1].c_str());
							if (item_id == p_) {
								ENetPeer* clicked_on = get_clicked_on(world_, x_, y_);
								if (playmod_action == "drop" and clicked_on == NULL or playmod_action.empty() and clicked_on == NULL or playmod_action == "consume" and clicked_on == NULL or playmod_action == "cutewords" and clicked_on == NULL) {
									gamepacket_t p;
									p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Must be used on a person."), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
									return true;
								}
								if (p_ == 384 and pInfo(clicked_on)->netID == pInfo(peer)->netID) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(peer)->netID);
									p.Insert("Use that on somebody else!");
									p.Insert(0), p.Insert(1);
									p.CreatePacket(peer);
									return true;
								}
								if (playmod_action == "pet") {
									int c_ = playmod_time * -1;
									if (modify_inventory(peer, p_, c_) == 0) {
										uint32_t pet_id = atoi(playmod_name.c_str());
										int c_2 = 1;
										if (modify_inventory(peer, pet_id, c_2) != 0) {
											WorldDrop drop_block_{};
											drop_block_.id = pet_id, drop_block_.count = c_2, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = pInfo(peer)->x + rand() % 17, drop_block_.y = pInfo(peer)->y + rand() % 17;
											dropas_(world_, drop_block_);
										}
										else {
											pInfo(peer)->hand = pet_id;
											update_clothes(peer);
										}
										PlayerMoving data_{};
										data_.packetType = 17;
										data_.netID = 44;
										data_.YSpeed = 44;
										data_.x = pInfo(peer)->x + 10;
										data_.y = pInfo(peer)->y + 10 + 16;
										BYTE* raw = packPlayerMoving(&data_);
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == world_->name) {
												packet_(currentPeer, "action|play_sfx\nfile|audio/terraform.wav\ndelayMS|0");
												send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[] raw;
									}
									else {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(peer)->netID);
										p.Insert(playmod_text);
										p.Insert(0);
										p.CreatePacket(peer);
									}
									return true;
								}
								int c_ = -1;
								if (modify_inventory(peer, p_, c_) == 0) {
									if (playmod_action == "cutewords") {
										if (p_ == 276) SendRespawn(clicked_on, true, 0, 1);
										else if (p_ == 732) add_ban(clicked_on, 30, "Ban Wand Effect", (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name) + "``"), enet_peer_disconnect_later(peer, 0);
										else if (p_ == 278) add_curse(clicked_on, 30, "Curse Wand Effect", (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name) + "``");
										else if (p_ == 8500) {
											string malady_text = "The patient has no malady.";
											int give = 1;
											if (pInfo(clicked_on)->surgery_type == 18) malady_text = "The patient has a `5torn Punching Muscle``.";
											else if (pInfo(clicked_on)->surgery_type == 18) malady_text = "The patient has a `5Gemcuts``.";
											else if (pInfo(clicked_on)->surgery_type == 20) malady_text = "The patient has a `5Grumbleteeth``.";
											else if (pInfo(clicked_on)->surgery_type == 21) malady_text = "The patient has a `5Chicken Feet``.";
											else if (pInfo(clicked_on)->surgery_type == 22) malady_text = "The patient has a `5Broken Heart``.";
											else if (pInfo(clicked_on)->surgery_type == 24) malady_text = "The patient has a `5Ecto-Bones``.";
											else if (pInfo(clicked_on)->surgery_type == 25) malady_text = "The patient has a `5Moldy Guts``.";
											else if (pInfo(clicked_on)->surgery_type == 26) malady_text = "The patient has a `5Fatty Liver``.";
											else if (pInfo(clicked_on)->surgery_type == 27) malady_text = "The patient has a `5Chaos Infection``.";
											else if (pInfo(clicked_on)->surgery_type == 28) malady_text = "The patient has a `5Lupus``.";
											else {
												PlayerMoving extended_particle_data_{};
												extended_particle_data_.packetType = 36, extended_particle_data_.x = pInfo(clicked_on)->x + 16, extended_particle_data_.y = pInfo(clicked_on)->y + 16, extended_particle_data_.characterState = 0x8, extended_particle_data_.netID = 175;
												BYTE* ex_raw = packPlayerMoving(&extended_particle_data_);
												for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != pInfo(peer)->world) continue;
													send_raw(currentPeer, 4, ex_raw, 56, ENET_PACKET_FLAG_RELIABLE);
												}
												delete[] ex_raw;
												modify_inventory(peer, 8500, give);
											}
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(peer)->netID);
											p.Insert(malady_text);
											p.Insert(0), p.Insert(1);
											p.CreatePacket(peer);
										}
										else {
											gamepacket_t p4;
											p4.Insert("OnConsoleMessage");
											string text = "";
											gamepacket_t p2(p_ == 752 ? 500 : 0);
											p2.Insert("OnTalkBubble");
											p2.Insert(pInfo(clicked_on)->netID);
											vector<string> random_words{
												"`4'ADORE ME'``",
												"`4'SAY YES'``",
												"`4'MISS YOU'``"
											};
											if (p_ == 618) {
												random_words = { "`4'ARGH!!!'``" };
												SendRespawn(clicked_on, true, 0, 1);
											}
											if (p_ == 616) random_words = { "`4'Awwwww!'``" };
											if (p_ == 752) random_words = { "HEADS"  ,  "TAILS" };
											string random_phrase = random_words[rand() % random_words.size()];
											p2.Insert(random_phrase);
											p2.Insert(0);
											gamepacket_t p(0, pInfo(clicked_on)->netID);
											p.Insert("OnPlayPositioned");
											p.Insert("audio/eat.wav");
											gamepacket_t p3(0, pInfo(clicked_on)->netID);
											p3.Insert("OnAction");
											p3.Insert("/love");
											if (p_ == 618) text = pInfo(clicked_on)->tankIDName + " snuggled the wrong bunny!";
											else if (p_ != 616 and p_ != 752 and p_ != 2734 and p_ != 4752)text = pInfo(clicked_on)->tankIDName + " shouts " + random_phrase + " uncontrollably!";
											if (text != "") p4.Insert(text);
											for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
												p.CreatePacket(currentPeer);
												if (p_ != 2734 and p_ != 4752) p2.CreatePacket(currentPeer);
												if (p_ != 618 and p_ != 752 and p_ != 2734 and p_ != 4752) p3.CreatePacket(currentPeer);
												if (text != "") p4.CreatePacket(currentPeer);
											}
										}
										PlayerMoving data_{};
										data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
										data_.punchX = p_, data_.punchY = pInfo(peer)->netID;
										BYTE* raw;
										data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
										raw = packPlayerMoving(&data_);
										int32_t to_netid = pInfo(clicked_on)->netID;
										raw[3] = 5;
										memcpy(raw + 8, &to_netid, 4);
										update_clothes(clicked_on);
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[] raw;
										return true;
									}
									if (playmod_action == "consume") {
										if (p_ == 3240) {
											pInfo(clicked_on)->geiger_ = 100;
											for (int i_ = 0; i_ < pInfo(clicked_on)->playmods.size(); i_++) {
												if (pInfo(clicked_on)->playmods[i_].id == 10) pInfo(clicked_on)->playmods[i_].time = 1;
											}
										}
										gamepacket_t p2;
										p2.Insert("OnTalkBubble");
										p2.Insert(pInfo(clicked_on)->netID);
										p2.Insert(playmod_name);
										p2.Insert(0);
										gamepacket_t p(0, pInfo(clicked_on)->netID);
										p.Insert("OnPlayPositioned");
										p.Insert("audio/eat.wav");
										PlayerMoving data_{};
										data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
										data_.punchX = p_;
										data_.punchY = pInfo(peer)->netID;
										BYTE* raw;
										data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
										raw = packPlayerMoving(&data_);
										int32_t to_netid = pInfo(clicked_on)->netID;
										raw[3] = 5;
										memcpy(raw + 8, &to_netid, 4);
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
												send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[] raw;
										return true;
									}
									if (playmod_action == "drop") {
										if (p_ == 782) {
											gamepacket_t p;
											p.Insert("OnTalkBubble");
											p.Insert(pInfo(peer)->netID);
											p.Insert("`w[" + pInfo(clicked_on)->tankIDName + " `wfeels strangely better!]");
											p.Insert(0);
											gamepacket_t p2;
											p2.Insert("OnConsoleMessage");
											p2.Insert("`7[`w" + pInfo(clicked_on)->tankIDName + " `ofeels strangely better!`7]");
											p2.Insert(0);
											for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
												if (pInfo(currentPeer)->world == name_) p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer);
											}
											for (int i_ = 0; i_ < pInfo(peer)->playmods.size(); i_++) if (pInfo(peer)->playmods[i_].id == 28 || pInfo(peer)->playmods[i_].id == 41 || pInfo(peer)->playmods[i_].id == 49 || pInfo(peer)->playmods[i_].id == 48 || pInfo(peer)->playmods[i_].id == 71 || pInfo(peer)->playmods[i_].id == 72 || pInfo(peer)->playmods[i_].id == 73 || pInfo(peer)->playmods[i_].id == 4 || pInfo(peer)->playmods[i_].id == 16 || pInfo(peer)->playmods[i_].id == 17 || pInfo(peer)->playmods[i_].id == 19 || pInfo(peer)->playmods[i_].id == 27 || pInfo(peer)->playmods[i_].id == 42) pInfo(peer)->playmods[i_].time = 1;
										}
										else {
											int c_ = rand() % (items[p_].max_gems + 1);
											if (c_ != 0) {
												bool no_seed = false, no_gems = false, no_block = false;
												for (int i_ = 0; i_ < world_->drop.size(); i_++) {
													if (abs(world_->drop[i_].y - y_ * 32) <= 16 and abs(world_->drop[i_].x - x_ * 32) <= 16) {
														if (world_->drop[i_].id == 112 and items[t_].rarity < 8) {
															no_gems = true;
														}
														else {
															no_seed = true, no_block = true;
														}
													}
												}
												if (rand() % 100 < 5 and not no_block) {
													WorldDrop drop_block_{};
													drop_block_.id = p_, drop_block_.count = 1, drop_block_.uid = uint16_t(world_->drop.size()) + 1, drop_block_.x = (x_ * 32) + rand() % 17, drop_block_.y = (y_ * 32) + rand() % 17;
													if (not use_mag(world_, drop_block_, drop_block_.x, drop_block_.y)) dropas_(world_, drop_block_);
												}
												else if (rand() % 100 < 35 and not no_seed) {
													WorldDrop drop_seed_{};
													drop_seed_.id = p_ + 1, drop_seed_.count = 1, drop_seed_.uid = uint16_t(world_->drop.size()) + 1, drop_seed_.x = (x_ * 32) + rand() % 17, drop_seed_.y = (y_ * 32) + rand() % 17;
													if (not use_mag(world_, drop_seed_, drop_seed_.x, drop_seed_.y)) dropas_(world_, drop_seed_);
												}
												else if (not no_gems) {
													int c_ = rand() % (items[p_].max_gems + 1);
													gems_(peer, world_, c_, x_ * 32, y_ * 32, p_);
												}
											}
										}
									}
									else if (not playmod_action.empty()) {
										if (playmod_action == "throw") {
											uint32_t playmod_effect = atoi(get_[10].c_str());
											PlayerMoving data_{};
											data_.packetType = 17;
											data_.netID = playmod_effect;
											data_.YSpeed = playmod_effect;
											data_.x = x_ * 32 + rand() % 17;
											data_.y = y_ * 32 + rand() % 17;
											BYTE* raw = packPlayerMoving(&data_);
											for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
												if (pInfo(currentPeer)->world == world_->name) {
													send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
												}
											}
											delete[] raw;
										}
										else {
											uint32_t playmod_effect = atoi(get_[10].c_str());
											PlayerMoving data_{};
											data_.packetType = 17;
											data_.netID = playmod_effect;
											data_.YSpeed = playmod_effect;
											data_.x = x_ * 32 + 16;
											data_.y = y_ * 32 + 16;
											BYTE* raw = packPlayerMoving(&data_);
											for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
												if (pInfo(currentPeer)->world == world_->name) {
													send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
												}
											}
											delete[] raw;
										}
									}
									if (clicked_on != NULL) {
										bool alr_have = false;
										for (PlayMods peer_playmod : pInfo(clicked_on)->playmods) {
											if (peer_playmod.id == playmod_id) {
												if (p_ == 384 and peer_playmod.user == pInfo(peer)->tankIDName) {
													alr_have = true;
													break;
												}
												else {
													alr_have = true;
													break;
												}
											}
										}
										if (not alr_have) {
											PlayMods new_playmod{};
											new_playmod.id = playmod_id;
											new_playmod.time = time(nullptr) + playmod_time;
											new_playmod.user = pInfo(peer)->tankIDName;
											pInfo(clicked_on)->playmods.push_back(new_playmod);
											gamepacket_t p;
											p.Insert("OnConsoleMessage");
											p.Insert(playmod_on_add + " (`$" + playmod_name + "`` mod added)");
											p.CreatePacket(clicked_on);
											update_clothes(clicked_on);
											{
												gamepacket_t p;
												p.Insert("OnConsoleMessage");
												p.Insert("`4>> `#" + pInfo(clicked_on)->name_color + pInfo(clicked_on)->tankIDName + "```` is now `#" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->name_color : "`0") + "" + (pInfo(peer)->d_name.empty() ? pInfo(peer)->tankIDName : pInfo(peer)->d_name) + "````'s valentine!``");
												for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
													if (p_ == 384) p.CreatePacket(currentPeer);
												}
											}
										}
									}
									{
										PlayerMoving data_{};
										data_.packetType = 19, data_.plantingTree = 0, data_.netID = 0;
										data_.punchX = p_;
										data_.punchY = pInfo(peer)->netID;
										BYTE* raw;
										int32_t to_netid = 0;
										if (clicked_on != NULL and playmod_action.empty() or playmod_action == "drop" and clicked_on != NULL) {
											data_.x = pInfo(peer)->x + 10, data_.y = pInfo(peer)->y + 16;
											raw = packPlayerMoving(&data_);
											to_netid = pInfo(clicked_on)->netID;
											raw[3] = 5;
										}
										else {
											data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
											raw = packPlayerMoving(&data_);
											to_netid = pInfo(peer)->netID;
											raw[3] = 4;
										}
										memcpy(raw + 8, &to_netid, 4);
										gamepacket_t p1;
										p1.Insert("OnTalkBubble");
										if (not playmod_text.empty()) {
											p1.Insert(pInfo(clicked_on)->netID), p1.Insert(playmod_text), p1.Insert(0);
											if (clicked_on != NULL) update_clothes(clicked_on);
										}
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
											if (not playmod_text.empty()) p1.CreatePacket(currentPeer);
											if (not playmod_sound.empty() and clicked_on != NULL or playmod_action == "drop" and clicked_on != NULL) {
												gamepacket_t p(0, pInfo(clicked_on)->netID);
												p.Insert("OnPlayPositioned");
												p.Insert("audio/" + playmod_sound);
												p.CreatePacket(currentPeer);
											}
											send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
										}
										delete[]raw;
									}
								}
								return true;
							}
						}
					}
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("`5" + items[p_].name + " ``this item has not been made or coded yet!");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(peer);
					{
						gamepacket_t p;
						p.Insert("OnConsoleMessage");
						p.Insert("`5" + items[p_].name + " ``this item has not been made or coded yet!");
						p.CreatePacket(peer);
					}
					break;
				}
				}
				break;
			}
			default:
			{
				if (items[p_].magplant or items[p_].mag_multiple) {
					if (world_->owner_name != pInfo(peer)->tankIDName) {
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						p.Insert("Only the world owner is allowed to place that here!");
						p.Insert(0), p.Insert(1);
						p.CreatePacket(peer);
						{
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("Only the world owner is allowed to place that here!");
							p.CreatePacket(peer);
						}
						return false;
					}
				}
				if (block_->locked) {
					WorldBlock* block2_ = &world_->blocks[block_->lock_origin];
					string owner_name = block2_->owner_name, user_name = pInfo(peer)->tankIDName;
					if (owner_name != user_name and not pInfo(peer)->dev) {
						if (block2_->fg == 4994 or find(block2_->admins.begin(), block2_->admins.end(), user_name) == block2_->admins.end() and not block2_->open_to_public) {
							if (block2_->fg == 4994) {
								if (not block2_->open_to_public) {
									gamepacket_t p(0, pInfo(peer)->netID);
									p.Insert("OnPlayPositioned");
									p.Insert("audio/punch_locked.wav");
									if (not pInfo(peer)->invis) {
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else {
										p.CreatePacket(peer);
									}
									if (p_ != 18) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(peer)->netID);
										p.Insert("That area is owned by " + world_->owner_name);
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(peer);
									}
									return true;
								}
								if (not block2_->build_only and block2_->open_to_public) {
									gamepacket_t p(0, pInfo(peer)->netID);
									p.Insert("OnPlayPositioned");
									p.Insert("audio/punch_locked.wav");
									if (not pInfo(peer)->invis) {
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == name_) {
												p.CreatePacket(currentPeer);
											}
										}
									}
									else {
										p.CreatePacket(peer);
									}
									if (p_ != 18) {
										gamepacket_t p;
										p.Insert("OnTalkBubble");
										p.Insert(pInfo(peer)->netID);
										p.Insert("This lock allows breaking only!");
										p.Insert(0);
										p.Insert(1);
										p.CreatePacket(peer);
									}
									return false;
								}
							}
							else {
								gamepacket_t p(0, pInfo(peer)->netID);
								p.Insert("OnPlayPositioned");
								p.Insert("audio/punch_locked.wav");
								if (not pInfo(peer)->invis) {
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == name_) {
											p.CreatePacket(currentPeer);
										}
									}
								}
								else {
									p.CreatePacket(peer);
								}
								if (p_ != 18) {
									gamepacket_t p;
									p.Insert("OnTalkBubble");
									p.Insert(pInfo(peer)->netID);
									p.Insert("That area is owned by " + world_->owner_name);
									p.Insert(0);
									p.Insert(1);
									p.CreatePacket(peer);
								}
								return false;
							}
						}
						if (items[p_].blockType == BlockTypes::LOCK) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("`w" + block2_->owner_name + "`` allows public building here, but no locks.");
							p.Insert(0);
							p.Insert(0);
							p.CreatePacket(peer);
							{
								gamepacket_t p(0, pInfo(peer)->netID);
								p.Insert("OnPlayPositioned");
								p.Insert("audio/punch_locked.wav");
								if (not pInfo(peer)->invis) {
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == name_) {
											p.CreatePacket(currentPeer);
										}
									}
								}
								else {
									p.CreatePacket(peer);
								}
							}
							return false;
						}
					}
				}
				else if (not world_->owner_name.empty() and items[p_].blockType != BlockTypes::CONSUMABLE) {
					string owner_name = world_->owner_name, user_name = pInfo(peer)->tankIDName;
					if (owner_name != user_name and not pInfo(peer)->dev) {
						if (!guild_access(peer, world_->guild_id) and find(world_->admins.begin(), world_->admins.end(), user_name) == world_->admins.end() and not world_->open_to_public) {
							gamepacket_t p(0, pInfo(peer)->netID);
							p.Insert("OnPlayPositioned");
							p.Insert("audio/punch_locked.wav");
							if (not pInfo(peer)->invis) {
								for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
									if (pInfo(currentPeer)->world == name_) {
										p.CreatePacket(currentPeer);
									}
								}
							}
							else {
								p.CreatePacket(peer);
							}
							if (p_ != 18) {
								gamepacket_t p;
								p.Insert("OnTalkBubble");
								p.Insert(pInfo(peer)->netID);
								p.Insert("That area is owned by " + (world_->owner_named.substr(0, 2) == "`o" ? "`w" + world_->owner_name : world_->owner_named) + "``");
								p.Insert(0);
								p.Insert(1);
								p.CreatePacket(peer);
							}
							return false;
						}
						if (items[p_].blockType == BlockTypes::LOCK) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("`w" + world_->owner_name + "`` allows public building here, but no locks.");
							p.Insert(0);
							p.Insert(0);
							p.CreatePacket(peer);
							{
								gamepacket_t p(0, pInfo(peer)->netID);
								p.Insert("OnPlayPositioned");
								p.Insert("audio/punch_locked.wav");
								if (not pInfo(peer)->invis) {
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == name_) {
											p.CreatePacket(currentPeer);
										}
									}
								}
								else {
									p.CreatePacket(peer);
								}
							}
							return false;
						}
					}
				}
				if (items[p_].blockType == BlockTypes::DOOR || items[p_].blockType == BlockTypes::PORTAL || items[p_].blockType == BlockTypes::LOCK || p_ == 1684 || p_ == 1912 || p_ == 4482) {
					if (find(world_->admins.begin(), world_->admins.end(), pInfo(peer)->tankIDName) == world_->admins.end() and world_->owner_name != pInfo(peer)->tankIDName) {
						if (patchPath(world_, pInfo(peer)->x, pInfo(peer)->y, x_ + (y_ * 100), peer)) {
							gamepacket_t p, p2(0, pInfo(peer)->netID);
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Something is blocking the way, get closer."), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
							p2.Insert("OnPlayPositioned"), p2.Insert("audio/punch_locked.wav"), p2.CreatePacket(peer);
							return true;
						}
					}
				}
				if (world_->owner_name.empty() and items[p_].blockType == BlockTypes::VENDING or world_->owner_name.empty() and items[p_].item_sucker) {
					gamepacket_t p;
					p.Insert("OnTalkBubble");
					p.Insert(pInfo(peer)->netID);
					p.Insert("This item can only be used in World-Locked worlds!");
					p.Insert(0), p.Insert(1);
					p.CreatePacket(peer);
					return false;
				}
				// statymas
				if (items[block_->fg].blockType == BlockTypes::CRYSTAL and items[p_].blockType == BlockTypes::CRYSTAL) {
					vector<vector<int>> current_{ {2242, 0}, {2244, 0}, {2246, 0}, {2248, 0}, {2250, 0} };
					int abcc = -1;
					string mix_with = "";
					if (modify_inventory(peer, p_, abcc) == 0) {
						bool obtained_ = false;
						for (int i = 0; i < block_->crystals.size(); i++) {
							vector<int> c_ = block_->crystals[i];
							if (c_[0] == p_) {
								block_->crystals[i][1]++;
								obtained_ = true;
							} for (int a = 0; a < current_.size(); a++) {
								if (current_[a][0] == c_[0]) {
									current_[a][1] = block_->crystals[i][1];
									break;
								}
							}
						} if (not obtained_) {
							block_->crystals.push_back({ p_, 1 });
							for (int a = 0; a < current_.size(); a++) {
								if (current_[a][0] == p_) {
									current_[a][1] = 1;
									break;
								}
							}
						} vector<string> reply{};
						for (int i = 0; i < current_.size(); i++) {
							reply.push_back(to_string(current_[i][1]) + "x `$" + mix_with + (current_[i][0] == 2242 ? "R" : (current_[i][0] == 2244 ? "G" : (current_[i][0] == 2246 ? "B" : (current_[i][0] == 2248 ? "W" : "B")))) + "``");
						} {
							gamepacket_t p;
							p.Insert("OnConsoleMessage");
							p.Insert("This Crystal is currently mixed with " + join(reply, ", "));
							p.CreatePacket(peer);
						}
					}
					return true;
				}
				if (p_ == 611) p_ = 610;
				if (block_->fg == 610 and p_ == 610) {
					// add kazkas
					int a = -1;
					if (modify_inventory(peer, 611, a, true) == 0) {
						PlayerMoving data_{};
						data_.packetType = 17, data_.netID = 66, data_.YSpeed = 66, data_.x = x_ * 32 + 16, data_.y = y_ * 32 + 16;
						BYTE* raw_e = packPlayerMoving(&data_);
						if (block_->bunny_egg_progress < 2001) {
							pInfo(peer)->egg++;
							block_->bunny_egg_progress++;
						}
						if (block_->bunny_egg_progress > 1000) {
							int burst_chance = 350;
							if (block_->bunny_egg_progress > 1500) burst_chance = 125;
							gamepacket_t p;
							p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
							if (rand() % burst_chance < 1) {
								p.Insert("`6The egg has exploded!``");
								block_->fg = 0, block_->bunny_egg_progress = 0;
								update_tile(peer, x_, y_, 0, false, true);
							}
							else p.Insert(block_->bunny_egg_progress <= 1500 ? "This oversized egg has a fair chance to burst!" : "`6This over-sized egg has a good chance to burst!``");
							p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						}
						data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
						BYTE* blc = raw + 56;
						form_visual(blc, *block_, *world_, peer, false);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
							if (pInfo(currentPeer)->world == world_->name) {
								send_raw(currentPeer, 4, raw_e, 56, ENET_PACKET_FLAG_RELIABLE);
								send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
							}
						}
						delete[] raw, raw_e, blc;
						if (block_->locked) {
							upd_lock(*block_, *world_, peer);
						}
					}
					return true;
				}
				else if (items[p_].blockType == BlockTypes::SEED and items[block_->fg].blockType != BlockTypes::SEED and block_->fg != 0 or items[p_].blockType != BlockTypes::BACKGROUND and items[p_].blockType != BlockTypes::SEED and block_->fg != 0) {
					packet_(peer, "action|play_sfx\nfile|audio/cant_place_tile.wav\ndelayMS|0");
					return false;
				}
				else if (items[p_].blockType == BlockTypes::BACKGROUND and items[block_->fg].blockType == BlockTypes::BEDROCK or items[p_].blockType == BlockTypes::BACKGROUND and items[block_->fg].blockType == BlockTypes::MAIN_DOOR) {
					return false;
				}
				else if (p_ == 4516 or p_ == 9270) {
					if (world_->owner_name.empty() || to_lower(world_->owner_name) != to_lower(pInfo(peer)->tankIDName)) {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
						p.Insert("Only the owner of the world can place this.");
						p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						return false;
					}
				}
				if (p_ == 5000 or p_ == 3832 or p_ == 226 or p_ == 3616 or p_ == 1276 or p_ == 1278 or p_ == 4758 or p_ == 3750 or p_ == 4992 or p_ == 3072 or p_ == 4884 or p_ == 1436 or p_ == 8246 or p_ == 10258) {
					bool block_place = false;
					int cctv_count = 0;
					for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
						if (world_->blocks[i_].fg == p_) {
							if (p_ != 1436 and p_ != 8246 and p_ != 10258) block_place = true;
						}
						if (p_ == 1436 || p_ == 8246 || p_ == 10258) {
							if (world_->blocks[i_].fg == 1436 || world_->blocks[i_].fg == 8246 || world_->blocks[i_].fg == 10258)  cctv_count++;
						}
					}
					if (block_place or cctv_count >= 8) {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID);
						if (p_ == 1436 || p_ == 8246 || p_ == 10258) p.Insert("``You can only have 8 " + items[p_].name + " in a world.");
						else {
							if (p_ == 5000 or p_ == 3832) {
								p.Insert("``You can only have one " + items[p_].name + " in a world.");
								{
									gamepacket_t p(0, pInfo(peer)->netID);
									p.Insert("OnPlayPositioned"), p.Insert("audio/punch_locked.wav");
									if (not pInfo(peer)->invis) {
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
											p.CreatePacket(currentPeer);
										}
									}
									else p.CreatePacket(peer);
								}
							}
							else p.Insert("This world already has a `$" + items[p_].name + "`` somewhere on it, installing two would be dangerous!");
						}
						p.Insert(0), p.Insert(1), p.CreatePacket(peer);
						return false;
					}
				}
				if (items[p_].collisionType == 1) {
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == name_ and not pInfo(currentPeer)->ghost) {
							if (y_ == pInfo(currentPeer)->y / 32) {
								if (pInfo(currentPeer)->state == 0 and x_ * 32 < pInfo(currentPeer)->x and abs(x_ * 32 - pInfo(currentPeer)->x) < 32 or pInfo(currentPeer)->state == 16 and abs(x_ * 32 - pInfo(currentPeer)->x) < 32 or pInfo(currentPeer)->state != 16 and abs(x_ * 32 - pInfo(currentPeer)->x) < 20) {
									return false;
								}
							}
						}
					}
				}
				int c_ = -1;
				switch (items[p_].blockType) {
				case BlockTypes::CRYSTAL:
				{
					block_->crystals.push_back({ p_, 1 });
					punch_tile(peer, x_, y_, 0x3, p_, mag_place ? -1 : pInfo(peer)->netID, 0x0);
					break;
				}
				case BlockTypes::PROVIDER:
				{
					punch_tile(peer, x_, y_, 0x3, p_, pInfo(peer)->netID, 0x0);
					long long time_ = time(nullptr);
					if (items[block_->fg].properties & Property_AutoPickup)
						block_->planted = time_;
					else {
						/*original:
							block_->planted = time_ - ((rand() % 14400) + 1);
							block_->planted -= ((rand() % 14400) + 1);
							*/
						block_->planted = time(nullptr) - (items[block_->fg].growTime / 2);
						// per real gt kai kurie provider greiciau auga
					}
					if (p_ == 5196) block_->planted = time_ - 39600;
					break;
				}
				case BlockTypes::SEED:
				{
					if (items[block_->fg].blockType == BlockTypes::SEED) {
						long long time_ = time(nullptr);
						int timed = items[block_->fg].growTime;
						if (has_playmod(pInfo(peer), "Reduced Growtime..") and rand() % items[pInfo(peer)->ances].chance < 1) timed *= 1.02;
						uint32_t laikas = uint32_t((time_ - block_->planted <= timed ? time_ - block_->planted : timed));
						gamepacket_t p;
						p.Insert("OnTalkBubble");
						p.Insert(pInfo(peer)->netID);
						if (block_->sp) {
							p.Insert("It would be too dangerous to try to mix three seeds."), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
							return false;
						}
						if (laikas == items[block_->fg].growTime) {
							p.Insert("This tree is already too big to splice another seed with."), p.Insert(0), p.Insert(1), p.CreatePacket(peer);
							return false;
						}
						for (int i_ = 0; i_ < items.size(); i_++) {
							if (items[i_].r_1 == p_ and items[i_].r_2 == block_->fg or items[i_].r_2 == p_ and items[i_].r_1 == block_->fg) {
								p.Insert("`w" + items[p_].name + "`` and `w" + items[block_->fg].name + "`` have been spliced to make a `$" + items[i_].name + " Tree``!");
								p.Insert(0);
								p.Insert(1);
								p.CreatePacket(peer);
								packet_(peer, "action|play_sfx\nfile|audio/success.wav\ndelayMS|0");
								block_->fg = i_ + 1, block_->sp = 1;
								PlayerMoving data_{};
								data_.packetType = 13, data_.plantingTree = p_;
								BYTE* raw = packPlayerMoving(&data_);
								raw[2] = 1;
								send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								delete[]raw;
								{
									PlayerMoving data_{};
									data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
									BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
									BYTE* blc = raw + 56;
									form_visual(blc, *block_, *world_, peer, false);
									for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
										if (pInfo(currentPeer)->world == world_->name) {
											send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
										}
									}
									delete[] raw, blc;
									if (block_->locked) {
										upd_lock(*block_, *world_, peer);
									}
								}
								if (not mag_place) modify_inventory(peer, p_, c_, false);
								return true;
							}
							else if (i_ + 1 == items.size()) {
								bool changed_ = false;
								if (p_ == 339 and block_->fg == 627 or block_->fg == 339 and p_ == 627) {
									uint32_t s_ = p_ == 339 ? block_->fg : p_;
									i_ = 742;
									changed_ = true;
								}
								else if (p_ == 743 and block_->fg == 253 or block_->fg == 743 and p_ == 253) {
									uint32_t s_ = p_ == 743 ? block_->fg : p_;
									i_ = 758;
									changed_ = true;
								}
								else if (p_ == 743 and block_->fg == 285 or block_->fg == 745 and p_ == 285) {
									uint32_t s_ = p_ == 745 ? block_->fg : p_;
									i_ = 6674;
									changed_ = true;
								} if (changed_) {
									p.Insert("`w" + items[p_].name + "`` and `w" + items[block_->fg].name + "`` have been spliced to make a `$" + items[i_].name + " Tree``!");
									p.Insert(0);
									p.Insert(1);
									p.CreatePacket(peer);
									packet_(peer, "action|play_sfx\nfile|audio/success.wav\ndelayMS|0");
									block_->fg = i_ + 1, block_->sp = 1;
									//plant_(peer, block_, x_, y_, p_, false);
									PlayerMoving data_{};
									data_.packetType = 13, data_.plantingTree = p_;
									BYTE* raw = packPlayerMoving(&data_);
									raw[2] = 1;
									send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
									delete[]raw;
									{
										PlayerMoving data_{};
										data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
										BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
										BYTE* blc = raw + 56;
										form_visual(blc, *block_, *world_, peer, false);
										for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
											if (pInfo(currentPeer)->world == world_->name) {
												send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
											}
										}
										delete[] raw, blc;
										if (block_->locked) {
											upd_lock(*block_, *world_, peer);
										}
									}
									if (not mag_place) modify_inventory(peer, p_, c_, false);
									return true;
								}
								p.Insert("Hmm, it looks like `w" + items[block_->fg].name + "`` and `w" + items[p_].name + "`` can't be spliced.");
								p.Insert(0);
								p.Insert(1);
								p.CreatePacket(peer);
								return false;
							}
						}
					}
					break;
				}
				case BlockTypes::LOCK:
				{
					if (p_ == 202 or p_ == 204 or p_ == 206 or p_ == 4994) {
						if (not world_->owner_name.empty() and world_->owner_name != pInfo(peer)->tankIDName) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("You must be world owner to place locks!");
							p.Insert(0);
							p.CreatePacket(peer);
							return true;
						}
						int safe_dis = p_ == 206 ? 7 : p_ == 204 ? 3 : 0; // nes kitaip susipisa viskas
						if (x_ < safe_dis or y_ < safe_dis or 100 - safe_dis < x_ or 60 - safe_dis < y_) {
							gamepacket_t p;
							p.Insert("OnTalkBubble");
							p.Insert(pInfo(peer)->netID);
							p.Insert("You can't place that here, move " + to_string(x_ < safe_dis ? safe_dis - x_ : y_ < safe_dis ? safe_dis - y_ : 100 - safe_dis < x_ ? x_ - (100 - safe_dis) : 60 - safe_dis < y_ ? y_ - (60 - safe_dis) : 0) + " block away from border!");
							p.Insert(0);
							p.CreatePacket(peer);
							return true;
						}
						block_->owner_name = pInfo(peer)->tankIDName;
						if (pInfo(peer)->name_color != "`0") block_->owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
						if (pInfo(peer)->mod == 1 && pInfo(peer)->dev == 1) block_->owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
						int lock_size = p_ == 202 ? 10 : (p_ == 204 ? 48 : (p_ == 202 ? 200 : 200));
						vector<vector<int>> tiles_ = lock_tiles(world_, x_, y_, lock_size);
						lock_size = tiles_.size();
						PlayerMoving data_{};
						data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
						data_.netID = pInfo(peer)->id;
						data_.plantingTree = p_;
						BYTE* raw;
						if (tiles_.size() != 0) {
							raw = packPlayerMoving(&data_, 112 + (lock_size * 2) + alloc_(world_, block_));
							int lalala = 8;
							memcpy(raw + 8, &lock_size, 2);
							memcpy(raw + 12, &lalala, 2);
							BYTE* blc = raw + 56;
							for (int i_ = 0; i_ < tiles_.size(); i_++) {
								vector<int> update_tiles = tiles_[i_];
								int x = update_tiles[0];
								int y = update_tiles[1];
								int sq_ = x + (y * 100);
								WorldBlock* block_ = &world_->blocks[sq_];
								if (block_->locked) {
									//cout << "was alrd lock" << endl;
									//continue;
								}
								else {
									block_->locked = true;
									block_->lock_origin = x_ + (y_ * 100);
									memcpy(blc + (i_ * 2), &sq_, 2);
								}
							}
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == name_) {
									packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
									send_raw(currentPeer, 4, raw, 112 + (lock_size * 2) + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw, blc;
						}
						else {
							raw = packPlayerMoving(&data_, 56);
							for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
								if (pInfo(currentPeer)->world == name_) {
									packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
									send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
								}
							}
							delete[] raw;
						}
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Area locked."), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
						{
							PlayerMoving data_{};
							data_.packetType = 13, data_.plantingTree = p_;
							BYTE* raw = packPlayerMoving(&data_);
							raw[2] = 1;
							send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							delete[]raw;
						}
						break;
					}
					if (not world_->owner_name.empty()) {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Only one `$World Lock`` can be placed in a world, you'd have to remove the other one first."), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
						return false;
					}
					for (int i_ = 0; i_ < world_->blocks.size(); i_++) {
						if (world_->blocks[i_].fg == 202 or world_->blocks[i_].fg == 204 or world_->blocks[i_].fg == 206 or world_->blocks[i_].fg == 4994) {
							if (world_->blocks[i_].owner_name != pInfo(peer)->tankIDName) {
								gamepacket_t p;
								p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("Your `$World Lock`` can't be placed in this world unless everyone else's locks are removed."), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
								return false;
							}
						}
					}
					if (pInfo(peer)->w_d == today_day && pInfo(peer)->w_w >= 75) {
						gamepacket_t p;
						p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("You locked too many new worlds today, try tomorrow!"), p.Insert(0), p.Insert(0), p.CreatePacket(peer);
						return false;
					}
					else if (pInfo(peer)->w_d != today_day && pInfo(peer)->w_w != 0) pInfo(peer)->w_w = 0;
					pInfo(peer)->w_w++, pInfo(peer)->w_d = today_day;
					pInfo(peer)->worlds_owned.push_back(world_->name);
					world_->owner_name = pInfo(peer)->tankIDName;
					if (pInfo(peer)->name_color != "`0") world_->owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
					if (pInfo(peer)->mod == 1 && pInfo(peer)->dev == 1) world_->owner_named = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
					PlayerMoving data_{};
					data_.packetType = 15, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8, data_.netID = pInfo(peer)->id, data_.plantingTree = p_;
					BYTE* raw = packPlayerMoving(&data_, 56);
					world_->lockid = p_;
					if (p_ == 11550 || p_ == 11586 || p_ == 10410) {
						if (p_ == 11550) world_->weather = 54;
						if (p_ == 11586) world_->weather = 55;
						if (p_ == 10410) world_->weather = 53;
						gamepacket_t p;
						p.Insert("OnSetCurrentWeather"), p.Insert(world_->weather == 0 ? 80 : world_->weather);
						for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != name_) continue;
							pInfo(currentPeer)->lock = p_;
							p.CreatePacket(currentPeer);
						}
					}
					gamepacket_t p, p2;
					p.Insert("OnTalkBubble"), p.Insert(pInfo(peer)->netID), p.Insert("`5[```w" + world_->name + "`` has been `$World Locked`` by " + (pInfo(peer)->name_color != "`0" ? pInfo(peer)->name_color : "`o") + "" + world_->owner_name + "```5]``"), p.Insert(0);
					p2.Insert("OnConsoleMessage"), p2.Insert("`5[```w" + world_->name + "`` has been `$World Locked`` by " + (pInfo(peer)->name_color != "`0" ? pInfo(peer)->name_color : "`o") + "" + world_->owner_name + "```5]``");
					gamepacket_t p3(0, pInfo(peer)->netID);
					{
						p3.Insert("OnNameChanged");
						if (pInfo(peer)->adminLevel == 0)pInfo(peer)->name_color = "`2";
						p3.Insert((not pInfo(peer)->d_name.empty() ? pInfo(peer)->d_name : pInfo(peer)->name_color + pInfo(peer)->tankIDName) + (pInfo(peer)->is_legend ? " of Legend" : "") + "``");
					}
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL) continue;
						if (pInfo(currentPeer)->world == name_) {
							packet_(currentPeer, "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0");
							send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
							p.CreatePacket(currentPeer), p2.CreatePacket(currentPeer), p3.CreatePacket(currentPeer);
						}
					}
					delete[] raw;
					{
						PlayerMoving data_{};
						data_.packetType = 13, data_.plantingTree = p_;
						BYTE* raw = packPlayerMoving(&data_);
						raw[2] = 1;
						send_raw(peer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
						delete[]raw;
					}
					break;
				}
				default:
				{
					if (p_ == 610) {
						punch_tile(peer, x_, y_, 0x3, 611, mag_place ? -1 : pInfo(peer)->netID, 0x0);
						{
							punch_tile(peer, x_, y_, 0x3, p_, -1, 0x0);
						}
					}
					else {
						punch_tile(peer, x_, y_, 0x3, p_, mag_place ? -1 : pInfo(peer)->netID, 0x0);
					}
					break;
				}
				}
				if (items[p_].blockType == BlockTypes::BACKGROUND)
					block_->bg = p_;
				else {
					block_->fg = p_;
				}
				if (items[p_].blockType == BlockTypes::SEED) {
					plant_(world_, peer, block_, x_, y_, p_, true, mag_place);
				}
				if (items[p_].heart_monitor) {
					block_->heart_monitor = pInfo(peer)->name_color + pInfo(peer)->tankIDName + "``";
					GlobalMonitors new_monitor;
					new_monitor.active = 1, new_monitor.world_name = world_->name, new_monitor.x = x_, new_monitor.y = y_;
					monitors.push_back(new_monitor);
				}
				if (items[p_].blockType == BlockTypes::PROVIDER or items[p_].vipentrance or items[p_].heart_monitor) {
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, peer, false, false, x_, y_);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw, blc;
					if (block_->locked) upd_lock(*block_, *world_, peer);
				}
				block_->lp = 0;
				if (items[p_].multiple_sides and pInfo(peer)->state == 16) {
					block_->flags |= 0x00200000;
					PlayerMoving data_{};
					data_.packetType = 5, data_.punchX = x_, data_.punchY = y_, data_.characterState = 0x8;
					BYTE* raw = packPlayerMoving(&data_, 112 + alloc_(world_, block_));
					BYTE* blc = raw + 56;
					form_visual(blc, *block_, *world_, peer, false);
					for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL or pInfo(currentPeer)->world != world_->name) continue;
						send_raw(currentPeer, 4, raw, 112 + alloc_(world_, block_), ENET_PACKET_FLAG_RELIABLE);
					}
					delete[] raw, blc;
					if (block_->locked) upd_lock(*block_, *world_, peer);
				}
				add_role_xp(peer, 1, "builder");
				if (not mag_place) modify_inventory(peer, (p_ == 610 ? 611 : p_), c_, false);
				break;
			}
			}
			break;

		}

		}
	}
	return true;
}
void move_(ENetPeer* peer, PlayerMoving* data) {
	data->netID = pInfo(peer)->netID;
	BYTE* raw = packPlayerMoving(data);
	for (ENetPeer* currentPeer = server->peers; currentPeer < &server->peers[server->peerCount]; ++currentPeer) {
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED or currentPeer->data == NULL || peer == currentPeer || pInfo(currentPeer)->world != pInfo(peer)->world) continue;
		send_raw(currentPeer, 4, raw, 56, ENET_PACKET_FLAG_RELIABLE);
	}
	delete[]raw;
}